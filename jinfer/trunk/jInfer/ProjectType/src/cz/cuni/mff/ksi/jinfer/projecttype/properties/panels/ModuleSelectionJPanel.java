/*
 *  Copyright (C) 2010 sviro
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cz.cuni.mff.ksi.jinfer.projecttype.properties.panels;

import cz.cuni.mff.ksi.jinfer.base.interfaces.IGGenerator;
import cz.cuni.mff.ksi.jinfer.base.interfaces.SchemaGenerator;
import cz.cuni.mff.ksi.jinfer.base.interfaces.Simplifier;
import cz.cuni.mff.ksi.jinfer.projecttype.properties.PropertiesPanel;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.swing.DefaultComboBoxModel;
import org.openide.util.Lookup;

/**
 *
 * @author sviro
 */
public class ModuleSelectionJPanel extends javax.swing.JPanel implements PropertiesPanel{

  private final Properties properties;

  private static final String DEFAULT_MENU_TEXT = "<none available>";

  /** Creates new form ModuleSelectionJPanel */
  public ModuleSelectionJPanel(final Properties properties) {
    super();
    this.properties = properties;
    initComponents();
    load();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    initialGrammar = new javax.swing.JComboBox();
    simplifier = new javax.swing.JComboBox();
    schemaGenerator = new javax.swing.JComboBox();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jPanel1 = new javax.swing.JPanel();
    jPanel2 = new javax.swing.JPanel();

    setLayout(new java.awt.GridBagLayout());

    initialGrammar.setModel(new javax.swing.DefaultComboBoxModel(lookupIGGenerators().toArray()));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.ipadx = 150;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 2);
    add(initialGrammar, gridBagConstraints);

    simplifier.setModel(new javax.swing.DefaultComboBoxModel(lookupSimplifiers().toArray()));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.ipadx = 150;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 2);
    add(simplifier, gridBagConstraints);

    schemaGenerator.setModel(new javax.swing.DefaultComboBoxModel(lookupSchemaGenerators().toArray()));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.ipadx = 150;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 2);
    add(schemaGenerator, gridBagConstraints);

    jLabel1.setText(org.openide.util.NbBundle.getMessage(ModuleSelectionJPanel.class, "ModuleSelectionJPanel.jLabel1.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 12);
    add(jLabel1, gridBagConstraints);

    jLabel2.setText(org.openide.util.NbBundle.getMessage(ModuleSelectionJPanel.class, "ModuleSelectionJPanel.jLabel2.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 12);
    add(jLabel2, gridBagConstraints);

    jLabel3.setText(org.openide.util.NbBundle.getMessage(ModuleSelectionJPanel.class, "ModuleSelectionJPanel.jLabel3.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 12);
    add(jLabel3, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 1.0;
    add(jPanel1, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridheight = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(jPanel2, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  @Override
  public final void load() {
    initialGrammar.setModel(new DefaultComboBoxModel(lookupIGGenerators().toArray()));
    simplifier.setModel(new DefaultComboBoxModel(lookupSimplifiers().toArray()));
    schemaGenerator.setModel(new DefaultComboBoxModel(lookupSchemaGenerators().toArray()));

    initialGrammar.setSelectedItem(properties.getProperty("moduleselector.initialgrammar", DEFAULT_MENU_TEXT));
    simplifier.setSelectedItem(properties.getProperty("moduleselector.simplifier", DEFAULT_MENU_TEXT));
    schemaGenerator.setSelectedItem(properties.getProperty("moduleselector.schemagenerator", DEFAULT_MENU_TEXT));

    //TODO treba doriesit ak neexistuje modul co je nacitany z properties a ak neexistuje ziaden modul danej kategorie
  }

  @Override
  public void store() {
    properties.setProperty("moduleselector.initialgrammar", (String) initialGrammar.getSelectedItem());
    properties.setProperty("moduleselector.simplifier", (String) simplifier.getSelectedItem());
    properties.setProperty("moduleselector.schemagenerator", (String) schemaGenerator.getSelectedItem());
  }

  private List<String> lookupIGGenerators() {
    final List<String> list = new ArrayList<String>();
    final Lookup lkp = Lookup.getDefault();
    for (IGGenerator igGenerator : lkp.lookupAll(IGGenerator.class)) {
      list.add(igGenerator.getModuleName());
    }
    return list;
  }

  private List<String> lookupSimplifiers() {
    final List<String> list = new ArrayList<String>();
    final Lookup lkp = Lookup.getDefault();
    for (Simplifier simplif : lkp.lookupAll(Simplifier.class)) {
      list.add(simplif.getModuleName());
    }
    return list;
  }

  private List<String> lookupSchemaGenerators() {
    final List<String> list = new ArrayList<String>();
    final Lookup lkp = Lookup.getDefault();
    for (SchemaGenerator sg : lkp.lookupAll(SchemaGenerator.class)) {
      list.add(sg.getModuleName());
    }
    return list;
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox initialGrammar;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JComboBox schemaGenerator;
  private javax.swing.JComboBox simplifier;
  // End of variables declaration//GEN-END:variables


}
