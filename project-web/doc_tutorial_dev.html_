#include "header.html_"

<!-- TODO link to architecture, inference etc. articles --!>

<div id="content">
	<h1>Module Developer's Tutorial</h1>

        <p>
          Target audience: jInfer module developers. Anyone who needs to extend jInfer capabilities by writing a new module.
        </p>
        <p>
          <span class="prerequisities">
            This tutorial assumes that you are a seasoned Java developer. Having experience with programming in some kind of framework (NetBeans Platform above all) will help you a lot.<br/>
            Make sure you have read the articles on architecture, data structures and inference process to understand what you will be implementing.<br/>
            Also, before starting this tutorial, make sure you can <a href="building_jinfer.html">build jInfer from sources</a>.
          </span>
        </p>

<h2>Overview</h2>
  <ol type=1>
    <li>Get NetBeans, jInfer sources, try a build.</li>
    <li>Decide on the type of module you want to create.</li>
    <li>Create new NetBeans module.</li>
    <li>Implement jInfer-specific interfaces.</li>
    <li>Implement your logic.</li>
  </ol>

<h2>Building jInfer from sources</h2>
  <p>
    Refer to the <a href="building_jinfer.html">official instructions</a>.
  </p>
  
<h2>What type of module?</h2>
  <p>
    First thing you need to realize is what kind of module you will be
    implementing. Is it going to be a part of the inference? If yes, what stage?
    Importing the initial grammar? Simplifying it? Exporting to resulting schema?
    If you are not sure what these terms mean, go read the articles on interence process again.
  </p>
  <p>
    If your logic doesn't belong to the inference process, it might just extend
    one of the existing modules. Try looking for the code you would like to change.
  </p>

<h2>New NetBeans module</h2>
<p>
  <span class="prerequisities">This section assumes you have successfully imported jInfer in NetBeans.</span>
</p>
<ol type=1>
  <li>Expand the jInfer suite (brown puzzles icon).</li>
  <li>Right-click <i>Modules</i>, select <i>Add New...</i>.</li>
  <li>On the first page, pick a name for your module. Click <i>Next</i>.</li>
  <li>On the second page, fill out the following:
    <ul>
      <li>
        <i>Code base</i>: this will be the package structure in which your code is placed.
        If you want, follow our convention: <code>cz.cuni.mff.ksi.jinfer.<i>yourmodule</i></code>.
        Otherwise choose something like <code><i>tld.company.jinfer.yourmodule</i></code>.
      </li>
      <li><i>Module display name</i>: pretty obvious.</li>
      <li><i>Generate XML layer</i>: you may want to check this option, but it doesn't really matter at this stage.</li>
    </ul>
    Rest of the options is uninteresting in most cases.
  </li>
  <li>Click <i>Finish</i>.</li>
  <li>Right-click the newly created module, select <i>Properties</i>.</li>
  <li>In <i>Libraries &gt; Module Dependencies</i>, click <i>Add Dependency...</i>.</li>
  <li>Filter for "base" and select <i>Base</i> as a dependency. Click <i>OK</i>.</li>
  <li>
      Still in <i>Properties</i>, switch to <i>Display</i> category. Fill in:
      <ul>
        <li><i>Display Name</i>: Fill in a user-friendly name of your module.</li>
        <li><i>Display Category</i>: type in <i>jInfer</i>.</li>
        <li><i>Short &amp; Long Description</i>: unleash your inner poet!</li>
      </ul>
  </li>
  <li>Still in <i>Properties</i>, switch to <i>API Versioning</i>.</li>
  <li>Type <code>cz.cuni.mff.ksi.jinfer.base.interfaces.inference.Simplifier</code> in <i>Provided Tokens</i>.</li>
  <li>Close <i>Properties</i> by clicking <i>OK</i>.</li>
</ol>

<h2>Implement jInfer's specifics</h2>

This section will show how to deal with a new inference module - a simplifier
that does no actual simplification, just returns the grammar it got on input.
Your module will need a "main" class implementing the chosen inference
interface, annotated with a <code>@ServiceProvider</code> annotation.

<ol type=1>
  <li>Add a new Java class: right click <i>Source Packages</i> in your new
      module, select <i>New &gt; Java Class...</i>.</li>
  <li>Fill in class name, for example <i>MySimplifierImpl</i>.</li>
  <li>Fill in package based on the <i>Code base</i> you selected while creating
      the module itself.</li>
  <li>Click <i>Finish</i>.</li>
  <li>In the heading line of the class, add <code>implements Simplifier</code> and
      fix the imports (you need <code>Simplifier</code> from Base module).</li>
  <li>Annotate this class with <code>@ServiceProvider(service = Simplifier.class)</code>.</li>
  <li>NetBeans will complain about missing method implementations, add them.</li>
  <li>
    Now fill in method bodies:
    <ul>
      <li><code>getName()</code>: return a string with module unix name, for example <code>"mysimplifier"</code>.</li>
      <li><code>getDisplayName()</code>: return a user friendly module name, for example <code>"My First Simplifier"</code>.</li>
      <li><code>getModuleDescription()</code>: return a short module description. You can also return <code>getDisplayName()</code> in this case.</li>
      <li><code>getCapabilities()</code>: for the moment, it is enough to return <code>Collections.emptyList()</code>.</li>
      <li><code>start()</code>: here is where your main logic belongs. In the case of a simplifier, you would do something with the rules and return a simplified grammar. For now, just do <code>callback.finished(initialGrammar);</code></li>
    </ul>
  </li>
</ol>

<h2>Run jInfer</h2>

At this moment, run the whole jInfer suite from the NetBeans you imported it into.
A new, child NetBeans should open with your module correctly installed. You can
now follow the <a href="doc_tutorial.html">User tutorial</a>, just select your new
simplifier while creating a new jInfer project.<br/>
That's it! Start hacking you logic now!

<h2>Implement your logic</h2>

This is the part where you actually have to do some thinking :-) Implementing
an importer? Take that <code>InputStream</code> and create some rules of it! Simplifier?
Take the rules you got and compact them somehow! Exporter? Take those rules and
write them out as a <code>String</code>! It only depends on which module you are
in and algorithm you're implementing.

<h2>Dealing with jInfer and NetBeans Platform</h2>

This section deals with a few important but pretty specific parts of interface
between your module (or any logic you implement) and either jInfer or NetBeans
Platform. Not nearly everything regarding interaction with NBP is mentioned here,
please refer to the relevant FAQ.

<h3>Module visibility</h3>

TODO

<h3>Error handling</h3>

TODO

<h3>Interruptions</h3>

TODO

<h3>Dialogs</h3>

TODO message, open, save

<h3>Configuration - options, preferences</h3>

TODO

<h3>Rule display</h3>

TODO

<h3>Console output, logging</h3>

TODO

</div>

#include "footer.html_"
