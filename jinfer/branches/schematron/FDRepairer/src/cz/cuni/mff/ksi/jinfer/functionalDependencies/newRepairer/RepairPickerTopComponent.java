/*
 * Copyright (C) 2011 sviro
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cz.cuni.mff.ksi.jinfer.functionalDependencies.newRepairer;

import cz.cuni.mff.ksi.jinfer.base.utils.RunningProject;
import java.awt.GridBagConstraints;
import org.apache.log4j.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.WindowManager;

/**
 * Top component which displays repair picker window.
 */
@ConvertAsProperties(dtd = "-//cz.cuni.mff.ksi.jinfer.functionalDependencies.newRepairer//RepairPicker//EN",
autostore = false)
@TopComponent.Description(preferredID = "RepairPickerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "cz.cuni.mff.ksi.jinfer.functionalDependencies.newRepairer.RepairPickerTopComponent")
@ActionReference(path = "Menu/Window/jInfer" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_RepairPickerAction",
preferredID = "RepairPickerTopComponent")
public final class RepairPickerTopComponent extends TopComponent {
  
  private static RepairPickerTopComponent instance;
  private static final String PREFERRED_ID = "RepairPickerTopComponent";
  
  private RepairPickerComponent component;

  public RepairPickerTopComponent() {
    initComponents();
    setName(NbBundle.getMessage(RepairPickerTopComponent.class, "CTL_RepairPickerTopComponent"));
    setToolTipText(NbBundle.getMessage(RepairPickerTopComponent.class, "HINT_RepairPickerTopComponent"));

  }
  
  public void drawRepairPicker(final RepairPickerComponent component) {
    this.component = component;
    
    final GridBagConstraints constraints = new GridBagConstraints();
    constraints.weightx = 1.0;
    constraints.weighty = 1.0;
    constraints.fill = GridBagConstraints.BOTH;
    
    jPanel1.removeAll();
    jPanel1.add(component, constraints);
    jPanel1.validate();
    
    this.open();
    this.requestActive();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanel1 = new javax.swing.JPanel();

    setLayout(new java.awt.GridBagLayout());

    jPanel1.setLayout(new java.awt.GridBagLayout());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jPanel1, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel jPanel1;
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
  }
  
    /**
   * Gets default instance. Do not use directly: reserved for *.settings files only,
   * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
   * To obtain the singleton instance, use {@link #findInstance}.
   */
  public static RepairPickerTopComponent getDefault() {
    synchronized(RepairPickerTopComponent.class) {
      if (instance == null) {
        instance = new RepairPickerTopComponent();
      }
      return instance;
    }
  }
  
    /**
   * Obtain the AutoEditorTopComponent instance. Never call {@link #getDefault} directly!
   */
  public static RepairPickerTopComponent findInstance() {
    synchronized(RepairPickerTopComponent.class) {
      final TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
        Logger.getLogger(RepairPickerTopComponent.class.getName()).warn(
                "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
        return getDefault();
      }
      if (win instanceof RepairPickerTopComponent) {
        return (RepairPickerTopComponent) win;
      }
      Logger.getLogger(RepairPickerTopComponent.class.getName()).warn(
              "There seem to be multiple components with the '" + PREFERRED_ID
              + "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
    }
  }
  
  
  @Override
  public boolean canClose() {
    if (RunningProject.isActiveProject()) {
      final NotifyDescriptor notifyDescriptor = new NotifyDescriptor.Confirmation("Closing this window will stop the repair. Proceed?", "Stop repair", NotifyDescriptor.OK_CANCEL_OPTION);
      if (DialogDisplayer.getDefault().notify(notifyDescriptor) == NotifyDescriptor.OK_OPTION) {
        component.guiInterrupt();
        return true;
      } else {
        return false;
      }
    }
    return true;
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }
}
