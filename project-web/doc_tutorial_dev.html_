#include "header.html_"

<!-- TODO link to architecture, inference etc. articles --!>

<div id="content">
	<h1>Module Developer's Tutorial</h1>

        <p>
          Target audience: jInfer module developers. Anyone who needs to extend jInfer capabilities by writing a new module.
        </p>
        <p>
          <span class="prerequisities">
            This tutorial assumes that you are a seasoned Java developer. Having experience with programming in some kind of framework (NetBeans Platform above all) will help you a lot.<br/>
            Make sure you have read the <a href="architecture.pdf">article</a> on architecture, data structures and inference process to understand what you will be implementing.<br/>
            Also, before starting this tutorial, make sure you can <a href="building_jinfer.html">build jInfer from sources</a>.
          </span>
        </p>

<h2>Overview</h2>
  <ol type=1>
    <li><a href="#1-get-jinfer">Get NetBeans, jInfer sources, try a build.</a></li>
    <li><a href="#2-module-type">Decide on the type of module you want to create.</a></li>
    <li><a href="#3-new-module">Create new NetBeans module.</a></li>
    <li><a href="#4-implement-jinfer">Implement jInfer-specific interfaces.</a></li>
    <li><a href="#5-implement-logic">Implement your logic.</a></li>
  </ol>

<h2 id="1-get-jinfer">Building jInfer from sources</h2>
  <p>
    Refer to the <a href="building_jinfer.html">official instructions</a>.
  </p>

<h2 id="2-module-type">What type of module?</h2>
  <p>
    First thing you need to realize is what kind of module you will be
    implementing. Is it going to be a part of the inference? If yes, what stage?
    Importing the initial grammar? Simplifying it? Exporting to resulting schema?
    If you are not sure what these terms mean, go read the articles on interence process again.
  </p>
  <p>
    If your logic doesn't belong to the inference process, it might just extend
    one of the existing modules. Try looking for the code you would like to change.
  </p>

<h2 id="3-new-module">New NetBeans module</h2>
<p>
  <span class="prerequisities">This section assumes you have successfully imported jInfer in NetBeans.</span>
</p>
<ol type=1>
  <li>Expand the jInfer suite (brown puzzles icon).</li>
  <li>Right-click <i>Modules</i>, select <i>Add New...</i>.</li>
  <li>On the first page, pick a name for your module. Click <i>Next</i>.</li>
  <li>On the second page, fill out the following:
    <ul>
      <li>
        <i>Code base</i>: this will be the package structure in which your code is placed.
        If you want, follow our convention: <code>cz.cuni.mff.ksi.jinfer.<i>yourmodule</i></code>.
        Otherwise choose something like <code><i>tld.company.jinfer.yourmodule</i></code>.
      </li>
      <li><i>Module display name</i>: pretty obvious.</li>
      <li><i>Generate XML layer</i>: you may want to check this option, but it doesn't really matter at this stage.</li>
    </ul>
    Rest of the options is uninteresting in most cases.
  </li>
  <li>Click <i>Finish</i>.</li>
</ol>

<h2 id="4-implement-jinfer">Implement jInfer's specifics</h2>

<p>
This section will show how to deal with a new inference module - a simplifier
that does no actual simplification, just returns the grammar it got on input.
Your module will need a "main" class implementing the chosen inference
interface, annotated with a <code>@ServiceProvider</code> annotation.
</p>

<p>
But first, we need to do some setup.

<ol type=1>
  <li>Right-click the newly created module, select <i>Properties</i>.</li>
  <li>In <i>Libraries &gt; Module Dependencies</i>, click <i>Add Dependency...</i>.</li>
  <li>Filter for "base" and select <i>Base</i> as a dependency. Click <i>OK</i>.</li>
  <li>
      Still in <i>Properties</i>, switch to <i>Display</i> category. Fill in:
      <ul>
        <li><i>Display Name</i>: Fill in a user-friendly name of your module.</li>
        <li><i>Display Category</i>: type in <i>jInfer</i>.</li>
        <li><i>Short &amp; Long Description</i>: unleash your inner poet!</li>
      </ul>
  </li>
  <li>Still in <i>Properties</i>, switch to <i>API Versioning</i>.</li>
  <li>Type <code>cz.cuni.mff.ksi.jinfer.base.interfaces.inference.Simplifier</code> in <i>Provided Tokens</i>.</li>
  <li>Close <i>Properties</i> by clicking <i>OK</i>.</li>
</ol>
</p>

<p>
Now to the class itself.

<ol type=1>
  <li>Add a new Java class: right click <i>Source Packages</i> in your new
      module, select <i>New &gt; Java Class...</i>.</li>
  <li>Fill in class name, for example <i>MySimplifierImpl</i>.</li>
  <li>Fill in package based on the <i>Code base</i> you selected while creating
      the module itself.</li>
  <li>Click <i>Finish</i>.</li>
  <li>In the heading line of the class, add <code>implements Simplifier</code> and
      fix the imports (you need <code>Simplifier</code> from Base module).</li>
  <li>Annotate this class with <code>@ServiceProvider(service = Simplifier.class)</code>.</li>
  <li>NetBeans will complain about missing method implementations, add them.</li>
  <li>
    Now fill in method bodies:
    <ul>
      <li><code>getName()</code>: return a string with module unix name, for example <code>"mysimplifier"</code>.</li>
      <li><code>getDisplayName()</code>: return a user friendly module name, for example <code>"My First Simplifier"</code>.</li>
      <li><code>getModuleDescription()</code>: return a short module description. You can also return <code>getDisplayName()</code> in this case.</li>
      <li><code>getCapabilities()</code>: for the moment, it is enough to return <code>Collections.emptyList()</code>.</li>
      <li><code>start()</code>: here is where your main logic belongs. In the case of a simplifier, you would do something with the rules and return a simplified grammar. For now, just do <code>callback.finished(initialGrammar);</code></li>
    </ul>
  </li>
</ol>
</p>

<h2>Run jInfer</h2>

<p>
  At this moment, run the whole jInfer suite from the NetBeans you imported it into.
  A new, child NetBeans should open with your module correctly installed. You can
  now follow the <a href="doc_tutorial.html">User tutorial</a>, just select your new
  simplifier while creating a new jInfer project.<br/>
  That's it! Start hacking you logic now!
</p>

<h2 id="5-implement-logic">Implement your logic</h2>

<p>
  This is the part where you actually have to do some thinking :-) Implementing
  an importer? Take that <code>InputStream</code> and create some rules of it! Simplifier?
  Take the rules you got and compact them somehow! Exporter? Take those rules and
  write them out as a <code>String</code>! It only depends on which module you are
  in and algorithm you're implementing.
</p>

<h2>Dealing with jInfer and NetBeans Platform</h2>

<p>
  This section deals with a few important but pretty specific parts of interface
  between your module (or any logic you implement) and either jInfer or NetBeans
  Platform. Not nearly everything regarding interaction with NBP is mentioned here,
  please refer to the relevant FAQ.
</p>

<h3>Module visibility</h3>

<p>
Each NBP module allows to set packages as public, which means their content will be visible for another modules. That means, if some module A sets
a dependency for module B, module A will be able to use only classes from packages, which were set as public in module B.
</p>
<span><i><strong>Important notice:</strong> Public packages do not affect <a href="http://wiki.netbeans.org/DevFaqLookup">Lookup</a> mechanism i.e. class annotated with serviceProvider may not be in the public package.</i></span>
<p>
There are two ways to set visible packages, first is to set it manually in module's project.xml file located in <i>ModulePath/nbproject/</i> folder.
</p>
<span>Example:</span><br/>
<pre class="code">
// This is a portion of example project.xml file.
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://www.netbeans.org/ns/project/1"&gt;
    &lt;type&gt;org.netbeans.modules.apisupport.project&lt;/type&gt;
    &lt;configuration&gt;
        &lt;data xmlns="http://www.netbeans.org/ns/nb-module-project/3"&gt;

            ....

            &lt;public-packages&gt;
                &lt;package&gt;some.example.package.name&lt;/package&gt;
            &lt;/public-packages&gt;
        &lt;/data&gt;
    &lt;/configuration&gt;
&lt;/project&gt;
</pre>

<p>
Another way is to set public packages through GUI:

<ol type=1>
	<li>Right-click the module, select <i>Properties</i>.</li>
	<li>In <i>API Versioning</i>, there is <i>Public Packages</i> section.</li>
	<li>Check which package will be public.</li>
</ol>

</p>
<h3>Error handling</h3>

TODO

<h3>Interruptions</h3>

TODO

<h3>Dialogs</h3>

<p>
  Creation of open/save dialog or message window is done by standard NBP API.
  For dialogs you can also use standard Java JFileChooser,
  but NBP <a href="http://bits.netbeans.org/dev/javadoc/org-openide-filesystems/org/openide/filesystems/FileChooserBuilder.html">FileChooserBuilder</a>
  is more convenient. This class creates dialog which remembers last-used directory according to key passed into its contructor.
</p>
<span>Example:</span><br/>
<pre class="code">
// The default dir to use if no value is stored
File home = new File (System.getProperty("user.home"));
// Now build a file chooser and invoke the dialog in one line of code
File toAdd = new FileChooserBuilder (CallingClass.class)
                   .setTitle("Some dialog title")
                   .setDefaultWorkingDirectory(home).showOpenDialog();
// Result will be null if the user clicked cancel or closed the dialog w/o OK
if (toAdd != null) {
    //do something
}
</pre>
<p>
  For messages creation is used <a href="http://bits.netbeans.org/dev/javadoc/org-openide-dialogs/org/openide/DialogDisplayer.html">DialogDisplayer</a> NBP API
  class. To determine which type of message will be shown (Confirmation dialog, message dialog...),
  <a href="http://bits.netbeans.org/dev/javadoc/org-openide-dialogs/org/openide/NotifyDescriptor.html">NotifyDescriptor</a> is used.
  Below is small example, which creates standard message notification. For more information please look at <a href="http://wiki.netbeans.org/NetBeansDeveloperFAQ#Dialogs_API">NBP Dialogs API FAQ</a>.
</p>
<span>Example:</span><br/>
<pre class="code">
// Creates standard information message with text "Hello world"
NotifyDescriptor nd = new NotifyDescriptor
                            .Message("Hello world",
                               NotifyDescriptor.INFORMATION_MESSAGE);
DialogDisplayer.getDefault().notify(nd);
</pre>

<h3>Configuration - options, preferences</h3>

TODO

<h3>Rule display</h3>

<p>
Rule displayer is component used for visualisation of rules in any part of inference process, but mainly in simplification part.
If provided rule displayers are not good enough or something is missing, you can implement rule displayer for your own.
You just need to follow these few easy steps:
</p>
<ol type=1>
	<li>Implement <code>cz.cuni.mff.ksi.jinfer.base.interfaces.RuleDisplayer</code>
		<ul>
			<li><code>RuleDisplayer</code> interface extends <code>NamedModule</code>, so you need to override its methods.</li>
			<li>Override <code>createDisplayer(name, rules)</code> method which creates displayer window responsible for displaying rules.</li>
		</ul>
	</li>
	<li>Annotate this class with <code>@ServiceProvider(service = RuleDisplayer.class)</code></li>
</ol>

<span>Example:</span><br/>
<pre class="code">
@ServiceProvider(service = RuleDisplayer.class)
public final class ExampleRuleDisplayer implements RuleDisplayer {

  @Override
  public void createDisplayer(final String panelName, final List<Element> rules) {
    // Creates standard NBP TopComponent in which are rules displayed.
    ExampleRDTopComp topComponent = ExampleRDTopComp.findInstance();
    if (!topComponent.isOpened()) {
      topComponent.open();
    }
    topComponent.createRuleDisplayer(panelName, rules);
  }

  @Override
  public String getName() {
    return "displayerID";
  }

  @Override
  public String getDisplayName() {
    return "Example rule displayer";
  }

  @Override
  public String getModuleDescription() {
    return getDisplayName();
  }
}
</pre>

<h3>Console output, logging</h3>

<p>

</p>

</div>

#include "footer.html_"
