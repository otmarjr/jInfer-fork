/*
 *  Copyright (C) 2010 vektor
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cz.cuni.mff.ksi.jinfer.validator;

import cz.cuni.mff.ksi.jinfer.validator.objects.Remark;
import java.awt.Desktop;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

public class MainWnd extends JFrame {

  // TODO vektor Column widths
  private static final long serialVersionUID = 7542612L;
  private static final String ANT = "C:\\Program Files\\NetBeans 6.9\\java\\ant\\bin\\ant.bat";
  private static final String ANT_LINUX = "/usr/share/java/apache-ant/bin/ant";
  private static final String PROJECT_ROOT = "C:\\Documents and Settings\\vitasek\\My Documents\\Sukromne\\jinfer";
  private final List<Remark> model = new ArrayList<Remark>();

  public MainWnd() {
    initComponents();

    setLocationRelativeTo(null);

    result.addMouseListener(new MouseAdapter() {

      @Override
      public void mouseClicked(final MouseEvent e) {
        if (e.getClickCount() == 2 && result.getSelectedRowCount() == 1) {
          try {
            Desktop.getDesktop().open(model.get(
                    result.convertRowIndexToModel(result.getSelectedRow())
                    ).getFile());
          } catch (IOException ex) {
          }
        }
      }
    });
  }

  private class MyModel extends DefaultTableModel {

    private static final long serialVersionUID = 175218631L;

    @Override
    public int getRowCount() {
      return model.size();
    }

    @Override
    public int getColumnCount() {
      return 5;
    }

    @Override
    public String getColumnName(final int column) {
      switch (column) {
        case 0:
          return "Severity";
        case 1:
          return "Module";
        case 2:
          return "File";
        case 3:
          return "Line";
        case 4:
          return "Text";
        default:
          throw new IllegalArgumentException();
      }
    }

    @Override
    public Object getValueAt(final int row, final int column) {
      final Remark r = model.get(row);
      switch (column) {
        case 0:
          return r.getSeverity().toString();
        case 1:
          return r.getModule();
        case 2:
          return r.getFile() != null ? r.getFile().getName() : "";
        case 3:
          return r.getLine() != null ? r.getLine() : "";
        case 4:
          return r.getText();
        default:
          throw new IllegalArgumentException();
      }
    }

    @Override
    public boolean isCellEditable(final int row, final int column) {
      return false;
    }
  }

  private void setUIEnabled(final boolean enabled) {
    runValidation.setEnabled(enabled);
    fixDeps.setEnabled(enabled);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings({"unchecked", "PMD"})
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    rootFolder = new javax.swing.JTextField();
    locateRoot = new javax.swing.JButton();
    antLocation = new javax.swing.JTextField();
    locateAnt = new javax.swing.JButton();
    runValidation = new javax.swing.JButton();
    compile = new javax.swing.JCheckBox();
    fixDeps = new javax.swing.JButton();
    jPanel2 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    result = new javax.swing.JTable();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("jInfer validator");

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));
    jPanel1.setLayout(new java.awt.GridBagLayout());

    jLabel1.setText("Ant location:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel1.add(jLabel1, gridBagConstraints);

    jLabel2.setText("jInfer root folder:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel1.add(jLabel2, gridBagConstraints);

    rootFolder.setText(PROJECT_ROOT);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.ipadx = 321;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel1.add(rootFolder, gridBagConstraints);

    locateRoot.setText("...");
    locateRoot.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        locateRootActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel1.add(locateRoot, gridBagConstraints);

    if ("Linux".equals(System.getProperty("os.name"))) {
      antLocation.setText(ANT_LINUX);
    } else {
      antLocation.setText(ANT);
    }
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel1.add(antLocation, gridBagConstraints);

    locateAnt.setText("...");
    locateAnt.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        locateAntActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel1.add(locateAnt, gridBagConstraints);

    runValidation.setText("Validate!");
    runValidation.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        runValidationActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel1.add(runValidation, gridBagConstraints);

    compile.setText("Compile?");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel1.add(compile, gridBagConstraints);

    fixDeps.setText("Fix dependencies");
    fixDeps.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fixDepsActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    jPanel1.add(fixDeps, gridBagConstraints);

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

    result.setAutoCreateRowSorter(true);
    result.setModel(new MyModel());
    result.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(result);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
      .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void runValidationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runValidationActionPerformed
    setUIEnabled(false);
    final Thread t = new Thread(new Runnable() {

      @Override
      public void run() {
        model.clear();
        model.addAll(Logic.checkSuite(antLocation.getText(),
                rootFolder.getText(), compile.isSelected()));
        result.setModel(new MyModel());
        setUIEnabled(true);
      }
    });
    t.start();
  }//GEN-LAST:event_runValidationActionPerformed

  private void locateAntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locateAntActionPerformed
    final JFileChooser jfc = new JFileChooser(new File(antLocation.getText()));
    if (jfc.showOpenDialog(MainWnd.this) == JFileChooser.APPROVE_OPTION) {
      antLocation.setText(jfc.getSelectedFile().getAbsolutePath());
    }
  }//GEN-LAST:event_locateAntActionPerformed

  private void locateRootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locateRootActionPerformed
    final JFileChooser jfc = new JFileChooser(new File(rootFolder.getText()));
    jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    if (jfc.showOpenDialog(MainWnd.this) == JFileChooser.APPROVE_OPTION) {
      rootFolder.setText(jfc.getSelectedFile().getAbsolutePath());
    }
  }//GEN-LAST:event_locateRootActionPerformed

  private void fixDepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixDepsActionPerformed
    setUIEnabled(false);
    final Thread t = new Thread(new Runnable() {

      @Override
      public void run() {
        model.clear();
        model.addAll(CallToAnt.fixDependencies(antLocation.getText(), rootFolder.getText()));
        result.setModel(new MyModel());
        setUIEnabled(true);
      }
    });
    t.start();
  }//GEN-LAST:event_fixDepsActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField antLocation;
  private javax.swing.JCheckBox compile;
  private javax.swing.JButton fixDeps;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton locateAnt;
  private javax.swing.JButton locateRoot;
  private javax.swing.JTable result;
  private javax.swing.JTextField rootFolder;
  private javax.swing.JButton runValidation;
  // End of variables declaration//GEN-END:variables
}
