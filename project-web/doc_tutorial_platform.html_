#include "header.html_"

<!-- TODO link to architecture, inference etc. articles --!>

<div id="content">

<h1>Dealing with jInfer and NetBeans Platform</h1>

<p>
  Target audience: jInfer developers. Anyone who needs to interact with jInfer
  or NetBeans while hacking our framework.
</p>

<p>
  This tutorial deals with a few important but pretty specific parts of interface
  between your module (or any logic you implement) and either jInfer or NetBeans
  Platform. Not nearly everything regarding interaction with NBP is mentioned here,
  please refer to the relevant FAQ.
</p>

<p>
  <span class="prerequisities">
    This tutorial assumes that you are a seasoned Java developer. 
    Having experience with programming in some kind of framework
    (NetBeans Platform above all) will help you a lot.<br/>
    Make sure you have read the <a href="architecture.pdf">article</a> on architecture,
    data structures and inference process to understand what you will be implementing.<br/>
    Also, before starting this tutorial, make sure you can
    <a href="building_jinfer.html">build jInfer from sources</a>.
  </span>
</p>

<h2>Overview</h2>

<ol type=1>
  <li><a href="#1-module-visibility">Module visibility</a></li>
  <li><a href="#2-error-handling">Error handling</a></li>
  <li><a href="#3-interruptions">Interruptions</a></li>
  <li><a href="#4-dialogs">Dialogs</a></li>
  <li><a href="#5-configuration">Configuration - options, preferences</a></li>
  <li><a href="#6-rule-display">Rule display</a></li>
  <li><a href="#7-output-logging">Console output, logging</a></li>
  <li><a href="#8-runningproject">RunningProject class</a></li>
  <li><a href="#9-module-selection">Module selection</a></li>
</ol>

<h2 id="1-module-visibility">Module visibility</h2>

<p>
Each NBP module allows to set packages as public, which means their content will be visible for another modules. That means, if some module A sets
a dependency for module B, module A will be able to use only classes from packages, which were set as public in module B.
</p>
<span><i><strong>Important notice:</strong> Public packages do not affect <a href="http://wiki.netbeans.org/DevFaqLookup">Lookup</a> mechanism i.e. class annotated with serviceProvider may not be in the public package.</i></span>
<p>
There are two ways to set visible packages, first is to set it manually in module's project.xml file located in <i>ModulePath/nbproject/</i> folder.
</p>
<span>Example:</span><br/>
<pre class="code">
// This is a portion of example project.xml file.
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://www.netbeans.org/ns/project/1"&gt;
    &lt;type&gt;org.netbeans.modules.apisupport.project&lt;/type&gt;
    &lt;configuration&gt;
        &lt;data xmlns="http://www.netbeans.org/ns/nb-module-project/3"&gt;

            ....

            &lt;public-packages&gt;
                &lt;package&gt;some.example.package.name&lt;/package&gt;
            &lt;/public-packages&gt;
        &lt;/data&gt;
    &lt;/configuration&gt;
&lt;/project&gt;
</pre>

<p>
Another way is to set public packages through GUI:

<ol type=1>
	<li>Right-click the module, select <i>Properties</i>.</li>
	<li>In <i>API Versioning</i>, there is <i>Public Packages</i> section.</li>
	<li>Check which package will be public.</li>
</ol>

</p>

<h2 id="2-error-handling">Error handling</h2>

<p>
Each run of inference is encapsulated in a <code>try-catch</code> block, so it is safe to throw any exception in inference process.
Each thrown exception will be catched, get logged, presented to the user and inference will stop. However if module uses threads which
throw exception, it is catched by NBP, instead of our code. Because of this is reasonable to catch this exception in your module and re-throw it in the right thread.
</p>

<h2 id="3-interruptions">Interruptions</h2>

<p>
In our application, we gave user an ability to stop inference in any moment of its run. For this reason, modules have to check in every time-consuming place
such as long loops, if this case happens. Example below shows, how to check the interruption from user and what to do to correctly stop inference.
</p>
<span>Example:</span>
<pre class="code">
for (forever) {
    if (Thread.interrupted()) {
        throw new InterruptedException();
    }
    doStuff();
}

</pre>

<h2 id="4-dialogs">Dialogs</h2>

<p>
  Creation of open/save dialog or message window is done by standard NBP API.
  For dialogs you can also use standard Java JFileChooser,
  but NBP <a href="http://bits.netbeans.org/dev/javadoc/org-openide-filesystems/org/openide/filesystems/FileChooserBuilder.html">FileChooserBuilder</a>
  is more convenient. This class creates dialog which remembers last-used directory according to key passed into its contructor.
</p>
<span>Example:</span><br/>
<pre class="code">
// The default dir to use if no value is stored
File home = new File (System.getProperty("user.home"));
// Now build a file chooser and invoke the dialog in one line of code
File toAdd = new FileChooserBuilder (CallingClass.class)
                   .setTitle("Some dialog title")
                   .setDefaultWorkingDirectory(home).showOpenDialog();
// Result will be null if the user clicked cancel or closed the dialog w/o OK
if (toAdd != null) {
    //do something
}
</pre>
<p>
  For messages creation is used <a href="http://bits.netbeans.org/dev/javadoc/org-openide-dialogs/org/openide/DialogDisplayer.html">DialogDisplayer</a> NBP API
  class. To determine which type of message will be shown (Confirmation dialog, message dialog...),
  <a href="http://bits.netbeans.org/dev/javadoc/org-openide-dialogs/org/openide/NotifyDescriptor.html">NotifyDescriptor</a> is used.
  Below is small example, which creates standard message notification. For more information please look at <a href="http://wiki.netbeans.org/NetBeansDeveloperFAQ#Dialogs_API">NBP Dialogs API FAQ</a>.
</p>
<span>Example:</span><br/>
<pre class="code">
// Creates standard information message with text "Hello world"
NotifyDescriptor nd = new NotifyDescriptor
                            .Message("Hello world",
                               NotifyDescriptor.INFORMATION_MESSAGE);
DialogDisplayer.getDefault().notify(nd);
</pre>

<h2 id="5-configuration">Configuration - options, preferences</h2>

<p>
Option panels located in <i>Tools > Options</i> menu are standard part of NBP API. We created for our purpose jInfer option subCategory
where are located Preferences applied for each jInfer Project. Below are described few step to create
your own option panel. For more information, please visit <a href="http://platform.netbeans.org/tutorials/60/nbm-options.html">NetBeans Options tutorial</a>.
</p>
<ol>
	<li>Create options window:
		<ul>
			<li>Right click <i>Source Packages</i> in your module, select <i>New &gt; Other</i>.</li>
			<li>Under Categories, select Module Development. Under File Types, select Options Panel. Click <i>Next</i>.</li>
			<li>Keep checked <i>Create Secondary Panel</i> and choose jInfer as a <i>Primary Panel</i>. Fill in remaining fields. Click <i>Next</i>.
			</li>
			<li>Fill in <i>Class Name Prefix</i> and <i>Package</i> and click <i>Finish</i>.</li>
		</ul>
	</li>
	<li>Design newly created <i>ClassNamePrexix</i>Panel.java.</li>
	<li>Implement <code>store()</code> and <code>load()</code> methods according to comments inside.</li>
</ol>
<p>
Both <code>store()</code> and <code>load()</code> methods uses <a href="http://bits.netbeans.org/dev/javadoc/org-openide-util/org/openide/util/NbPreferences.html">NbPreferences</a> class. Example below shows how to store and load Preferences.
</p>
<span>Example:</span><br/>
<pre class="code">
public void store() {
    // Saves state of checkBox into Preferences for ExampleClass
    //Class in Property with name "PropertyName".
    NbPreferences.forModule(ExampleClass.class)
        .putBoolean("PropertyName", someCheckBox.isSelected());
}

public void load() {
    // Get from ExampleClass Class Preferences Property with name
    // "PropertyName". Second parameter of method getBoolean is used
    // as default if no Property with defined name is saved in Preferences.
    someCheckBox.setSelected(NbPreferences.forModule(ExampleClass.class)
                                 .getBoolean("PropertyName", true));
}
</pre>

<p>
Second type of preferences used in jInfer is Project properties. Each jInfer Project has its properties panel accessible
in its content menu and preferences set in this properties are applied for each project separately. To implement this kind of
preferences, it is necessary to implement <a href="http://jinfer.sourceforge.net/javadoc/cz/cuni/mff/ksi/jinfer/base/interfaces/PropertiesPanelProvider.html">PropertiesPanelProvider</a> interface and extend <a href="http://jinfer.sourceforge.net/javadoc/cz/cuni/mff/ksi/jinfer/base/objects/AbstractPropertiesPanel.html">AbstractPropertiesPanel</a> class. Each Project properties window has category tree, where each category represents separate panel with properties. This category is definded by provider interface, and properties panel by class extended AbstractPropertiesPanel.
</p>
<h4>PropertiesPanelProvider</h4>
<p>As was written above, PropertiesPanelProvider defines category in Project properties windows. In the example below, we'll try to explain how to create a simple provider and what each method is responsible for.</p>
<span>Example:</span><br/>
<pre class="code">
public class ExampleProvider implemenets PropertiesPanelProvider {

  // Get Providers programmatic name or Id.
  public String getName() {
    return "ExampleProvider";
  }

  // This name will be displayed in category tree.
  public String getDisplayName() {
    return "Example Category";
  }

  // Priority of category. Higher the number, higher
  // will be category in tree. If two categories have
  // same priorities, they are sorted according
  // to their names.
  public int getPriority() {
    return 0;
  }

  // Returns properties panel defined for this category.
  public AbstractPropertiesPanel getPanel(final Properties properties) {
    return new ExamplePropertiesPanel(properties);
  }

  // Defines parent category of this category. If return null, this is top
  // level category. In other cases id of parent category must be returned.
  public String getParent() {
    return null;
  }

  // Optional. For each category can be defined list of virtual categories
  // which shows instead of properties panel only panel with information,
  // how many and for what kind of modules categories contains
  // this virtual category.
  public List<VirtualCategoryPanel> getSubCategories() {
    return null;
  }
}
</pre>
<h4>AbstractPropertiesPanel</h4>
<p>
This class represents visual component of properties category. You can design it in whatever way you like. For proper functionality must be fullfiled these few steps:
</p>
<ol>
	<li>Call <code>super(Properties)</code> in constructor: By this step is Properties instance saved into <code>properties</code> protected
		field and you can use it in <code>load()</code> and <code>store()</code> methods.</li>
	<li>Implement <code>load()</code> method: In this method are values, previously saved into Properties instance provided to this panel, loaded into
		components to be founded in this panel.</li>
	<li>Implement <code>store()</code> method: Here are values gathered from components of this panel saved into Properties.</li>
</ol>

<span>Example:</span><br/>
<pre class="code">
// This is only a part of
public abstract class ExamplePanel extends AbstractPropertiesPanel {

  public ExamplePanel(final Properties properties) {
    super(properties);
  }

  public abstract void store() {
    properties.setProperty("exampleKey", someTextField.getText());
  }

  public abstract void load() {
    String propValue = properties.getProperty("exampleKey", "");
    someTextField.setText(propValue);
  }

}
</pre>

<h2 id="6-rule-display">Rule display</h2>

<p>
Rule displayer is component used for visualisation of rules in any part of inference process, but mainly in simplification part.
If provided rule displayers are not good enough or something is missing, you can implement rule displayer for your own.
You just need to follow these few easy steps:
</p>
<ol type=1>
	<li>Implement <code>cz.cuni.mff.ksi.jinfer.base.interfaces.RuleDisplayer</code>
		<ul>
			<li><code>RuleDisplayer</code> interface extends <code>NamedModule</code>, so you need to override its methods.</li>
			<li>Override <code>createDisplayer(name, rules)</code> method which creates displayer window responsible for displaying rules.</li>
		</ul>
	</li>
	<li>Annotate this class with <code>@ServiceProvider(service = RuleDisplayer.class)</code></li>
</ol>

<span>Example:</span><br/>
<pre class="code">
@ServiceProvider(service = RuleDisplayer.class)
public final class ExampleRuleDisplayer implements RuleDisplayer {

  @Override
  public void createDisplayer(final String panelName, final List<Element> rules) {
    // Creates standard NBP TopComponent in which are rules displayed.
    ExampleRDTopComp topComponent = ExampleRDTopComp.findInstance();
    if (!topComponent.isOpened()) {
      topComponent.open();
    }
    topComponent.createRuleDisplayer(panelName, rules);
  }

  @Override
  public String getName() {
    return "displayerID";
  }

  @Override
  public String getDisplayName() {
    return "Example rule displayer";
  }

  @Override
  public String getModuleDescription() {
    return getDisplayName();
  }
}
</pre>

<h2 id="7-output-logging">Console output, logging</h2>

<p>
For printing data to console output, NBP provides <a href="http://bits.netbeans.org/dev/javadoc/org-openide-io/org/openide/windows/IOProvider.html">IOProvider</a> and <a href="http://bits.netbeans.org/dev/javadoc/org-openide-io/org/openide/windows/InputOutput.html">InputOutput</a> classes.
IOProvider's method <code>getIO(String, boolean)</code> returns InputOutput instance, which can be used to obtain Reader/OutputWriter to read/write into output window.
</p>
<span>Example:</span><br/>
<pre class="code">
// Creates new output window, where first parameter is a name and second
// is flag determinig if new window will be created if there is already
// a window with the same name.
final InputOutput ioResult = IOProvider.getDefault().getIO("Example", true);
ioResult.getOut().println("Hello world");

// After writing everything into output window close the output.
ioResult.getOut().close();
</pre>

<p>
Logging is done in jInfer by using <a href="http://logging.apache.org/log4j/1.2/">Log4j tool</a>. If you are not familiar with
Log4j, example below show you some simple usage. All logged messages are saved in a standard log file placed
in <i>UserHome/.jinfer/</i> folder and printed into "jInfer" output window in jInfer application. For each of these two places can be set
in jInfer options, for which LOG level will be messages saved/printed.
</p>
<span>Example:<span><br/>
<pre class="code">
// Creates Logger instance for particular class
private static final Logger LOG = Logger.getLogger(Example.class);

    ...

// Log a message with info level
LOG.info("Some message with info log level");
</pre>

<h2 id="8-runningproject"><code>RunningProject</code> class</h2>

TODO

<h2 id="9-module-selection">Module selection</h2>

TODO

</div>

#include "footer.html_"
