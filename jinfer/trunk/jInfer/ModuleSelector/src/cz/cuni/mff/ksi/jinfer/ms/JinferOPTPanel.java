/*
 *  Copyright (C) 2010 reseto
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cz.cuni.mff.ksi.jinfer.moduleselector;

import cz.cuni.mff.ksi.jinfer.base.interfaces.IGGenerator;
import cz.cuni.mff.ksi.jinfer.base.interfaces.ModuleSelection;
import cz.cuni.mff.ksi.jinfer.base.interfaces.SchemaGenerator;
import cz.cuni.mff.ksi.jinfer.base.interfaces.Simplifier;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import org.openide.util.Lookup;
import org.openide.util.NbPreferences;
import org.openide.util.lookup.Lookups;

final class JinferOPTPanel extends JPanel {

  private static final long serialVersionUID = 87541;

  private static final String DEFAULT_MENU_TEXT = "<none available>";
  private String iGGenerator;
  private String simplifier;
  private String schemaGenerator;

  public JinferOPTPanel() {
    initComponents();
    // TODO listen to changes in form fields and call controller.changed()
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jTabbedPane1 = new javax.swing.JTabbedPane();
    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jComboBox1 = new javax.swing.JComboBox();
    jComboBox2 = new javax.swing.JComboBox();
    jComboBox3 = new javax.swing.JComboBox();

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(JinferOPTPanel.class, "JinferOPTPanel.jLabel1.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(JinferOPTPanel.class, "JinferOPTPanel.jLabel2.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(JinferOPTPanel.class, "JinferOPTPanel.jLabel3.text")); // NOI18N

    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

    jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

    jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(32, 32, 32)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel2)
          .addComponent(jLabel1)
          .addComponent(jLabel3))
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jComboBox1, 0, 286, Short.MAX_VALUE)
          .addComponent(jComboBox2, 0, 286, Short.MAX_VALUE)
          .addComponent(jComboBox3, 0, 286, Short.MAX_VALUE))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(27, 27, 27)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(178, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(JinferOPTPanel.class, "JinferOPTPanel.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  public void load() {
    // read settings
    iGGenerator = NbPreferences.forModule(JinferOPTPanel.class).get("PreferredIGGenerator", DEFAULT_MENU_TEXT);
    simplifier = NbPreferences.forModule(JinferOPTPanel.class).get("PreferredSimplifier", DEFAULT_MENU_TEXT);
    schemaGenerator  = NbPreferences.forModule(JinferOPTPanel.class).get("PreferredSchemaGenerator", DEFAULT_MENU_TEXT);

    // init GUI
    jComboBox1.removeAllItems();
    jComboBox2.removeAllItems();
    jComboBox3.removeAllItems();

    for (final IGGenerator ig : lookupIGGenerators()) {
      /* here we wrap the IGGenerator inside IGGMenuItem,
       * because jcombobox displays items by calling their toString() method
       * and since we don't know what the toString method of IGGenerator does..
       */
      jComboBox1.addItem(new IGGMenuItem(ig));
      if (iGGenerator.equals(ig.getModuleName())) {
        jComboBox1.setSelectedIndex(jComboBox1.getItemCount() - 1);
      }
    }

    for (final Simplifier s : lookupSimplifiers()) {
      jComboBox2.addItem(new SimplifierMenuItem(s));
      if (simplifier.equals(s.getModuleName())) {
        jComboBox2.setSelectedIndex(jComboBox2.getItemCount() - 1);
      }
    }

    for (final SchemaGenerator sg : lookupSchemaGenerators()) {
      jComboBox3.addItem(new SchemaMenuItem(sg));
      if (schemaGenerator.equals(sg.getModuleName())) {
        jComboBox3.setSelectedIndex(jComboBox3.getItemCount() - 1);
      }
    }
  }

  public void store() {
    iGGenerator = ((IGGMenuItem) jComboBox1.getSelectedItem()).toString();
    simplifier  = ((SimplifierMenuItem) jComboBox2.getSelectedItem()).toString();
    schemaGenerator = ((SchemaMenuItem) jComboBox3.getSelectedItem()).toString();

    NbPreferences.forModule(JinferOPTPanel.class).put("PreferredIGGenerator", iGGenerator);
    NbPreferences.forModule(JinferOPTPanel.class).put("PreferredSimplifier", simplifier);
    NbPreferences.forModule(JinferOPTPanel.class).put("PreferredSchemaGenerator", schemaGenerator);
  }

  boolean valid() {
    // TODO check whether form is consistent and complete
    return true;
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox jComboBox1;
  private javax.swing.JComboBox jComboBox2;
  private javax.swing.JComboBox jComboBox3;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JTabbedPane jTabbedPane1;
  // End of variables declaration//GEN-END:variables

  private List<IGGenerator> lookupIGGenerators() {
    final List<IGGenerator> list = new ArrayList<IGGenerator>();
    final Lookup lkp = Lookups.forPath("IGGeneratorProviders");
    for (final IGGenerator ig : lkp.lookupAll(IGGenerator.class)) {
      list.add(ig);
    }
    return list;
  }

  private List<Simplifier> lookupSimplifiers() {
    final List<Simplifier> list = new ArrayList<Simplifier>();
    final Lookup lkp = Lookups.forPath("SimplifierProviders");
    for (final Simplifier s : lkp.lookupAll(Simplifier.class)) {
      list.add(s);
    }
    return list;
  }

  private List<SchemaGenerator> lookupSchemaGenerators() {
    final List<SchemaGenerator> list = new ArrayList<SchemaGenerator>();
    final Lookup lkp = Lookups.forPath("SchemaGeneratorProviders");
    for (final SchemaGenerator sg : lkp.lookupAll(SchemaGenerator.class)) {
      list.add(sg);
    }
    return list;
  }

  private class IGGMenuItem {
    private final IGGenerator item;

    public IGGenerator get() {
      return item;
    }

    public IGGMenuItem(final IGGenerator generator) {
      this.item = generator;
    }

    @Override
    public String toString() {
      return item.getModuleName();
    }
  }

  private class SimplifierMenuItem {
    private final Simplifier item;

    public Simplifier get() {
      return item;
    }

    public SimplifierMenuItem(final Simplifier item) {
      this.item = item;
    }

    @Override
    public String toString() {
      return item.getModuleName();
    }
  }

  private class SchemaMenuItem {
    private final SchemaGenerator item;

    public SchemaGenerator get() {
      return item;
    }

    public SchemaMenuItem(final SchemaGenerator item) {
      this.item = item;
    }

    @Override
    public String toString() {
      return item.getModuleName();
    }
  }
}
