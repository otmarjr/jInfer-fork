/*
 *  Copyright (C) 2011 sviro
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cz.cuni.mff.ksi.jinfer.treeruledisplayer;

import java.awt.event.InputEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.logging.Logger;
import javax.swing.JPanel;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Rule display component. Acts as a tabbed pane, each tab showing one ruleset.
 * @author sviro
 */
@TopComponent.Description(
        preferredID = TreeRuleDisplayerTopComponent.PREFERRED_ID,
        iconBase = TreeRuleDisplayerTopComponent.ICON_PATH,
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(
        mode = "editor",
        openAtStartup = false)
@ActionID(
        category = "Window",
        id = "cz.cuni.mff.ksi.jinfer.treeruledisplayer.TreeRuleDisplayerTopComponent")
@ActionReference(
        path = "Menu/Window/jInfer",
        position = 100)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TreeRuleDisplayerAction",
        preferredID = TreeRuleDisplayerTopComponent.PREFERRED_ID)
public final class TreeRuleDisplayerTopComponent extends TopComponent {

  private static final long serialVersionUID = 435252345l;

  private static TreeRuleDisplayerTopComponent instance;

  public static final String ICON_PATH = "cz/cuni/mff/ksi/jinfer/treeruledisplayer/graphics/icon16.png";
  public static final String PREFERRED_ID = "TreeRuleDisplayerTopComponent";

  private int panelSequence = 0;

  public TreeRuleDisplayerTopComponent() {
    super();
    initComponents();
    setName(NbBundle.getMessage(TreeRuleDisplayerTopComponent.class, "CTL_TreeRuleDisplayerTopComponent"));
    setToolTipText(NbBundle.getMessage(TreeRuleDisplayerTopComponent.class, "HINT_TreeRuleDisplayerTopComponent"));

    panels.addMouseListener(new MouseAdapter() {

      @Override
      public void mouseClicked(final MouseEvent evt) {
        final int tabIndex = panels.indexAtLocation(evt.getX(), evt.getY());

        if (tabIndex < 0) {
          return;
        }
        if ((evt.getModifiers() & InputEvent.BUTTON1_MASK) != 0
                && evt.getClickCount() >= 2) {
          panels.remove(tabIndex);
        }
      }
    });
  }

  /**
   * Creates a new panel with provided name.
   */
  public void createNewPanel(final String name, final JPanel graphPanel) {
    panelSequence++;
    panels.add(name + " [" + panelSequence + "]", graphPanel);

    if (panels.getTabCount() > 10) {
      panels.remove(0);
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("PMD")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    panels = new javax.swing.JTabbedPane();

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(panels, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(panels, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTabbedPane panels;
  // End of variables declaration//GEN-END:variables

  /**
   * Gets default instance. Do not use directly: reserved for *.settings files only,
   * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
   * To obtain the singleton instance, use {@link #findInstance}.
   */
  public static synchronized TreeRuleDisplayerTopComponent getDefault() {
    if (instance == null) {
      instance = new TreeRuleDisplayerTopComponent();
    }
    return instance;
  }

  /**
   * Obtain the TreeRuleDisplayerTopComponent instance. Never call {@link #getDefault} directly!
   */
  public static synchronized TreeRuleDisplayerTopComponent findInstance() {
    final TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
    if (win == null) {
      Logger.getLogger(TreeRuleDisplayerTopComponent.class.getName()).warning(
              "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
      return getDefault();
    }
    if (win instanceof TreeRuleDisplayerTopComponent) {
      return (TreeRuleDisplayerTopComponent) win;
    }
    Logger.getLogger(TreeRuleDisplayerTopComponent.class.getName()).warning(
            "There seem to be multiple components with the '" + PREFERRED_ID
            + "' ID. That is a potential source of errors and unexpected behavior.");
    return getDefault();
  }
}
