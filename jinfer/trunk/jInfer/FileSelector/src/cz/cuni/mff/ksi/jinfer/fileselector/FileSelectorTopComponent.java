/*
 *  Copyright (C) 2010 sviro
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cz.cuni.mff.ksi.jinfer.fileselector;

import cz.cuni.mff.ksi.jinfer.base.objects.Input;
import cz.cuni.mff.ksi.jinfer.fileselector.nodes.RootNode;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.ImageUtilities;
import org.openide.util.NbPreferences;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//cz.cuni.mff.ksi.jinfer.fileselector//FileSelector//EN", autostore = false)
public final class FileSelectorTopComponent extends TopComponent implements ExplorerManager.Provider {

  private static final long serialVersionUID = 75433342454l;

  private static FileSelectorTopComponent instance;
  /** path to the icon used by the component and its open action */
  private static final String ICON_PATH = "cz/cuni/mff/ksi/jinfer/fileselector/resource/icon16.png";
  private static final String PREFERRED_ID = "FileSelectorTopComponent";
  private final ExplorerManager em = new ExplorerManager();
  private Input input;

  public FileSelectorTopComponent() {
    super();
    initComponents();
    loadInput();
    setName(NbBundle.getMessage(FileSelectorTopComponent.class, "CTL_FileSelectorTopComponent"));
    setToolTipText(NbBundle.getMessage(FileSelectorTopComponent.class, "HINT_FileSelectorTopComponent"));
    setIcon(ImageUtilities.loadImage(ICON_PATH, true));
    final ActionMap map = getActionMap();
    map.put("delete", new FileDeleteAction(this));
    em.setRootContext(new RootNode(this, input));
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new BeanTreeView();

    ((BeanTreeView) jScrollPane1).setRootVisible(false);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  // End of variables declaration//GEN-END:variables

  /**
   * Gets default instance. Do not use directly: reserved for *.settings files only,
   * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
   * To obtain the singleton instance, use {@link #findInstance}.
   */
  public static synchronized FileSelectorTopComponent getDefault() {
    if (instance == null) {
      instance = new FileSelectorTopComponent();
    }
    return instance;
  }

  /**
   * Obtain the FileSelectorTopComponent instance. Never call {@link #getDefault} directly!
   */
  public static synchronized FileSelectorTopComponent findInstance() {
    TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
    if (win == null) {
      Logger.getLogger(FileSelectorTopComponent.class.getName()).warning(
              "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
      return getDefault();
    }
    if (win instanceof FileSelectorTopComponent) {
      return (FileSelectorTopComponent) win;
    }
    Logger.getLogger(FileSelectorTopComponent.class.getName()).warning(
            "There seem to be multiple components with the '" + PREFERRED_ID
            + "' ID. That is a potential source of errors and unexpected behavior.");
    return getDefault();
  }

  private void loadInput() {
    final String xml = NbPreferences.forModule(FileSelectorTopComponent.class).get("xmlFiles", "");
    final String xsd = NbPreferences.forModule(FileSelectorTopComponent.class).get("xsdFiles", "");
    final String query = NbPreferences.forModule(FileSelectorTopComponent.class).get("queryFiles", "");

    final List<File> xmlList = new ArrayList<File>();
    final List<File> xsdList = new ArrayList<File>();
    final List<File> queryList = new ArrayList<File>();
    
    fillFileList(xmlList, xml);
    fillFileList(xsdList, xsd);
    fillFileList(queryList, query);

    input = new Input(xmlList, xsdList, queryList);
  }

  private void fillFileList(final List<File> list, final String input) {
    String[] files;
    if (!"".equals(input)) {
      files = input.split(",");
      for (String fileName : files) {
        list.add(new File(fileName));
      }
    }
  }

  public void storeInput() {
    final String xml = buildStoreString(input.getDocuments());
    final String xsd = buildStoreString(input.getSchemas());
    final String query = buildStoreString(input.getQueries());

    NbPreferences.forModule(FileSelectorTopComponent.class).put("xmlFiles", xml);
    NbPreferences.forModule(FileSelectorTopComponent.class).put("xsdFiles", xsd);
    NbPreferences.forModule(FileSelectorTopComponent.class).put("queryFiles", query);
  }

  private String buildStoreString (final Collection<File> collection) {
    final StringBuilder sb = new StringBuilder();
    for (File file : collection) {
      sb.append(file.getAbsolutePath()).append(",");
    }
    if (sb.length() > 0) {
      sb.deleteCharAt(sb.length() - 1);
    }

    return sb.toString();
  }


  @Override
  public int getPersistenceType() {
    return TopComponent.PERSISTENCE_ALWAYS;
  }

  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
//    try {
//      NbPreferences.forModule(FileSelectorTopComponent.class).clear();
//    } catch (BackingStoreException ex) {
//      Exceptions.printStackTrace(ex);
//    }
    storeInput();
  }

  public void writeProperties(final java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  public Object readProperties(final java.util.Properties p) {
    if (instance == null) {
      instance = this;
    }
    instance.readPropertiesImpl(p);
    return instance;
  }

  private void readPropertiesImpl(final java.util.Properties p) {
    final String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  @Override
  protected String preferredID() {
    return PREFERRED_ID;
  }

  @Override
  public ExplorerManager getExplorerManager() {
    return em;
  }

  /**
   * @return the model
   */
  public Input getInput() {
    return input;
  }
}
