
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 24 18:33:08 CET 2012
//----------------------------------------------------

package cz.cuni.mff.ksi.jinfer.xqueryimporter.xqanalyzer;

import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ValidationMode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.PrologNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ContextItemExprNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.WhereClauseNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.NodeContentItem;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.EmptySequenceNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.InClauseNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.TupleStreamNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ReturnClauseNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.StringLiteral;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.Quantifier;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.EscapeContentItem;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.TestExpressionNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.KindTestNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.NodeKind;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.OrderingMode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.NamespaceDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ComparisonExprSuffix;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.Content;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.CDataSectionNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.PragmaNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.FunctionDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ContentItem;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.EntityRefContentItem;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.QueryBodyNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.PredicateListNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.LibraryModule;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ConstructorKind;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.OrderSpecNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.NameTestNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.OrderDirection;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ElseExpressionNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.OrderModifier;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ItemTypeNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.LocationHintNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ParamNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.TypeswitchExprNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.DefaultValueNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.LocationHintsNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.DefaultNamespaceDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.OptionDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.OrderByClauseNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.EmptyOrderMode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.InitialStep;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.FunctionCallNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.OperandExpressionNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ExprNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.TypeNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.MainModule;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.IfExprNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.PreserveMode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.LiteralType;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.EscapeItem;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.NillableTypeName;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.InheritMode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ModuleImportNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.FunctionBodyNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ThenExpressionNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.FLWORExprNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.LetClauseNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.PathExpr;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.StepExprNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.SchemaPrefix;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.CommaOperatorNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.UnaryOperator;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.PITargetNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.UnorderedExprNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.CaseClauseNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.NameNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ConstructorNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.AnyItemNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ConstructionDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.OrderedExprNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.PragmaListNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.VersionDecl;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.Operator;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.DefaultCollationDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.LiteralNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.SchemaImportNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.OperatorNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.BindingSequenceNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ConstructorType;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.DefaultNamespaceKind;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.AttrListNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.Cardinality;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.Module;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ValidateExprNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.DefaultCaseNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.VarDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.SelfOrDescendantStepNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.CopyNamespacesDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.InClausesNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.BaseURIDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.CharRefContentItem;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.CaseClausesNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.VarRefNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.QuantifiedExprNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ModuleNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.AxisNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.OrderingModeDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.AttributeNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ConstructionMode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.PrologChildNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.BoundarySpaceDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.VarValueNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.XQNodeList;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ParamListNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.EmptyOrderDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.AtomicTypeNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.CharContentItem;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.VariableBindingNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ExtensionExprNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.BoundarySpaceMode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ForClauseNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.KindTestSuffix;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ModuleDeclNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.ContentNode;
import cz.cuni.mff.ksi.jinfer.base.objects.xquery.syntaxtree.nodes.AxisKind;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 24 18:33:08 CET 2012
  */
@SuppressWarnings("PMD")
public class XQParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public XQParser() {super();}

  /** Constructor which sets the default scanner. */
  public XQParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public XQParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01f3\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\003\000\002\005\003\000\002\005\003" +
    "\000\002\004\006\000\002\331\002\000\002\331\004\000" +
    "\002\006\004\000\002\007\004\000\002\012\007\000\002" +
    "\010\004\000\002\013\002\000\002\013\003\000\002\014" +
    "\004\000\002\014\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\015\002\000" +
    "\002\015\003\000\002\016\004\000\002\016\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\024\003\000\002\024\003\000\002\374\003\000\002" +
    "\023\006\000\002\030\004\000\002\044\003\000\002\044" +
    "\003\000\002\021\005\000\002\045\003\000\002\045\003" +
    "\000\002\027\005\000\002\034\004\000\002\046\003\000" +
    "\002\046\003\000\002\035\004\000\002\047\003\000\002" +
    "\047\003\000\002\036\006\000\002\052\003\000\002\052" +
    "\003\000\002\053\003\000\002\053\003\000\002\031\004" +
    "\000\002\032\004\000\002\037\006\000\002\255\002\000" +
    "\002\255\003\000\002\041\002\000\002\041\004\000\002" +
    "\042\002\000\002\042\003\000\002\043\004\000\002\043" +
    "\005\000\002\256\005\000\002\256\004\000\002\040\006" +
    "\000\002\337\002\000\002\337\005\000\002\025\006\000" +
    "\002\055\002\000\002\055\003\000\002\054\004\000\002" +
    "\054\003\000\002\033\004\000\002\026\007\000\002\070" +
    "\002\000\002\070\003\000\002\062\003\000\002\062\004" +
    "\000\002\074\003\000\002\074\003\000\002\071\003\000" +
    "\002\072\003\000\002\072\005\000\002\073\005\000\002" +
    "\100\005\000\002\375\003\000\002\375\003\000\002\011" +
    "\003\000\002\076\003\000\002\223\003\000\002\223\005" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\104\007\000\002" +
    "\237\003\000\002\237\004\000\002\240\003\000\002\240" +
    "\003\000\002\225\002\000\002\225\003\000\002\227\002" +
    "\000\002\227\003\000\002\241\011\000\002\332\002\000" +
    "\002\332\003\000\002\243\002\000\002\243\003\000\002" +
    "\244\011\000\002\244\012\000\002\333\005\000\002\242" +
    "\010\000\002\245\002\000\002\245\003\000\002\246\010" +
    "\000\002\246\011\000\002\226\004\000\002\230\004\000" +
    "\002\371\003\000\002\371\003\000\002\232\003\000\002" +
    "\231\003\000\002\231\005\000\002\233\004\000\002\247" +
    "\005\000\002\235\002\000\002\235\003\000\002\234\003" +
    "\000\002\234\003\000\002\051\002\000\002\051\003\000" +
    "\002\050\003\000\002\050\003\000\002\334\002\000\002" +
    "\334\004\000\002\105\012\000\002\250\003\000\002\250" +
    "\003\000\002\251\002\000\002\251\003\000\002\252\010" +
    "\000\002\252\011\000\002\106\012\000\002\253\003\000" +
    "\002\253\004\000\002\335\002\000\002\335\004\000\002" +
    "\254\007\000\002\336\002\000\002\336\005\000\002\107" +
    "\011\000\002\110\003\000\002\111\003\000\002\111\005" +
    "\000\002\112\003\000\002\113\003\000\002\113\005\000" +
    "\002\114\004\000\002\236\002\000\002\236\004\000\002" +
    "\213\003\000\002\213\003\000\002\213\003\000\002\115" +
    "\004\000\002\116\002\000\002\116\004\000\002\117\003" +
    "\000\002\120\003\000\002\120\005\000\002\217\003\000" +
    "\002\217\003\000\002\121\003\000\002\122\003\000\002" +
    "\122\005\000\002\220\003\000\002\220\003\000\002\220" +
    "\003\000\002\220\003\000\002\123\003\000\002\124\003" +
    "\000\002\124\005\000\002\221\003\000\002\221\003\000" +
    "\002\125\003\000\002\126\003\000\002\126\005\000\002" +
    "\222\003\000\002\222\003\000\002\127\004\000\002\060" +
    "\002\000\002\060\004\000\002\130\004\000\002\061\002" +
    "\000\002\061\004\000\002\131\004\000\002\065\002\000" +
    "\002\065\004\000\002\132\004\000\002\064\002\000\002" +
    "\064\004\000\002\133\004\000\002\066\002\000\002\066" +
    "\003\000\002\067\003\000\002\067\004\000\002\373\003" +
    "\000\002\373\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\215\003\000\002\215\003\000\002" +
    "\215\003\000\002\215\003\000\002\215\003\000\002\215" +
    "\003\000\002\214\003\000\002\214\003\000\002\214\003" +
    "\000\002\214\003\000\002\214\003\000\002\214\003\000" +
    "\002\216\003\000\002\216\003\000\002\216\003\000\002" +
    "\135\005\000\002\211\003\000\002\211\004\000\002\137" +
    "\006\000\002\212\003\000\002\212\004\000\002\376\003" +
    "\000\002\376\003\000\002\075\007\000\002\344\002\000" +
    "\002\344\004\000\002\345\003\000\002\346\002\000\002" +
    "\346\003\000\002\347\003\000\002\347\004\000\002\136" +
    "\003\000\002\136\003\000\002\140\004\000\002\140\004" +
    "\000\002\155\002\000\002\155\003\000\002\154\003\000" +
    "\002\156\003\000\002\156\005\000\002\162\003\000\002" +
    "\162\003\000\002\157\003\000\002\157\003\000\002\160" +
    "\004\000\002\176\003\000\002\176\003\000\002\177\004" +
    "\000\002\177\003\000\002\203\003\000\002\203\003\000" +
    "\002\203\003\000\002\203\003\000\002\203\003\000\002" +
    "\203\003\000\002\203\003\000\002\200\004\000\002\205" +
    "\002\000\002\205\003\000\002\201\004\000\002\201\003" +
    "\000\002\204\003\000\002\204\003\000\002\204\003\000" +
    "\002\204\003\000\002\204\003\000\002\202\003\000\002" +
    "\307\003\000\002\307\003\000\002\206\003\000\002\206" +
    "\003\000\002\350\003\000\002\350\003\000\002\350\003" +
    "\000\002\161\004\000\002\207\002\000\002\207\003\000" +
    "\002\210\003\000\002\210\004\000\002\153\005\000\002" +
    "\141\003\000\002\141\003\000\002\141\003\000\002\141" +
    "\003\000\002\141\003\000\002\141\003\000\002\141\003" +
    "\000\002\141\003\000\002\142\003\000\002\142\003\000" +
    "\002\143\003\000\002\143\003\000\002\143\003\000\002" +
    "\144\004\000\002\152\005\000\002\077\002\000\002\077" +
    "\003\000\002\145\003\000\002\147\005\000\002\150\005" +
    "\000\002\146\005\000\002\224\002\000\002\224\003\000" +
    "\002\151\003\000\002\151\003\000\002\163\003\000\002" +
    "\163\003\000\002\163\003\000\002\164\006\000\002\u0100" +
    "\003\000\002\u0100\003\000\002\262\003\000\002\262\010" +
    "\000\002\261\002\000\002\261\003\000\002\276\003\000" +
    "\002\276\004\000\002\377\002\000\002\377\003\000\002" +
    "\257\003\000\002\267\002\000\002\267\003\000\002\270" +
    "\004\000\002\270\005\000\002\271\002\000\002\271\007" +
    "\000\002\260\005\000\002\260\005\000\002\272\002\000" +
    "\002\272\003\000\002\273\003\000\002\273\004\000\002" +
    "\277\003\000\002\277\003\000\002\274\002\000\002\274" +
    "\003\000\002\275\003\000\002\275\004\000\002\301\003" +
    "\000\002\301\003\000\002\300\003\000\002\300\003\000" +
    "\002\302\003\000\002\302\003\000\002\304\003\000\002" +
    "\304\003\000\002\304\003\000\002\304\003\000\002\303" +
    "\003\000\002\303\003\000\002\303\003\000\002\303\003" +
    "\000\002\303\003\000\002\165\005\000\002\u0101\003\000" +
    "\002\u0101\003\000\002\351\003\000\002\352\002\000\002" +
    "\352\003\000\002\353\003\000\002\353\004\000\002\354" +
    "\003\000\002\354\003\000\002\166\006\000\002\u0102\003" +
    "\000\002\u0102\003\000\002\355\002\000\002\355\004\000" +
    "\002\356\003\000\002\357\002\000\002\357\003\000\002" +
    "\360\003\000\002\360\004\000\002\263\005\000\002\u0103" +
    "\003\000\002\u0103\003\000\002\361\003\000\002\362\002" +
    "\000\002\362\003\000\002\363\003\000\002\363\004\000" +
    "\002\167\003\000\002\167\003\000\002\167\003\000\002" +
    "\167\003\000\002\167\003\000\002\167\003\000\002\170" +
    "\005\000\002\171\005\000\002\264\003\000\002\264\006" +
    "\000\002\101\002\000\002\101\003\000\002\102\003\000" +
    "\002\172\005\000\002\265\003\000\002\265\006\000\002" +
    "\173\005\000\002\174\005\000\002\175\005\000\002\266" +
    "\003\000\002\266\006\000\002\063\004\000\002\323\002" +
    "\000\002\323\003\000\002\056\004\000\002\057\003\000" +
    "\002\057\004\000\002\324\002\000\002\324\003\000\002" +
    "\325\003\000\002\325\003\000\002\325\003\000\002\306" +
    "\003\000\002\306\003\000\002\306\003\000\002\305\003" +
    "\000\002\305\003\000\002\310\003\000\002\310\003\000" +
    "\002\310\003\000\002\310\003\000\002\310\003\000\002" +
    "\310\003\000\002\310\003\000\002\310\003\000\002\310" +
    "\003\000\002\321\004\000\002\u0104\003\000\002\u0104\003" +
    "\000\002\311\005\000\002\u0105\003\000\002\u0105\003\000" +
    "\002\322\002\000\002\322\003\000\002\322\003\000\002" +
    "\320\004\000\002\u0106\003\000\002\u0106\003\000\002\317" +
    "\004\000\002\u0107\003\000\002\u0107\003\000\002\316\005" +
    "\000\002\u0108\003\000\002\u0108\003\000\002\364\002\000" +
    "\002\364\003\000\002\364\003\000\002\313\005\000\002" +
    "\u0109\003\000\002\u0109\003\000\002\326\002\000\002\326" +
    "\004\000\002\366\002\000\002\366\004\000\002\365\003" +
    "\000\002\365\003\000\002\315\005\000\002\u010a\003\000" +
    "\002\u010a\003\000\002\367\003\000\002\312\005\000\002" +
    "\u010b\003\000\002\u010b\003\000\002\u010b\003\000\002\327" +
    "\002\000\002\327\004\000\002\330\002\000\002\330\005" +
    "\000\002\372\002\000\002\372\003\000\002\370\003\000" +
    "\002\370\003\000\002\314\005\000\002\u010c\003\000\002" +
    "\u010c\003\000\002\u010c\003\000\002\343\003\000\002\342" +
    "\003\000\002\341\003\000\002\340\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02c5\000\004\271\004\001\uffff\000\004\273\u02c3\001" +
    "\002\000\004\002\u02c2\001\002\000\002\001\ufffe\000\034" +
    "\211\011\212\034\221\030\223\024\224\014\225\052\230" +
    "\022\233\050\234\020\235\051\236\037\240\010\242\021" +
    "\001\ufff4\000\006\217\u02bc\237\u02b9\001\uffc5\000\004\310" +
    "\u02b8\001\002\000\032\211\011\212\034\221\030\223\024" +
    "\224\014\225\052\230\022\233\050\234\020\235\051\236" +
    "\037\240\010\001\ufff3\000\002\001\uffe2\000\002\001\uffd5" +
    "\000\002\001\uffde\000\032\211\011\212\034\221\030\223" +
    "\024\224\014\225\052\230\022\233\050\234\020\235\051" +
    "\236\037\240\010\001\ufff4\000\002\001\uffe3\000\006\205" +
    "\u02b3\206\u02b4\001\002\000\004\300\u02ae\001\002\000\006" +
    "\226\u02ad\227\u02ac\001\002\000\002\001\uffe4\000\002\001" +
    "\uffd6\000\004\217\u02a9\001\002\000\002\001\uffed\000\002" +
    "\001\ufffd\000\004\217\u029c\001\uffba\000\002\001\000\000" +
    "\002\001\uffe5\000\002\001\uffee\000\006\215\u0296\216\u0295" +
    "\001\002\000\002\001\uffdd\000\002\001\uffef\000\004\301" +
    "\u0294\001\002\000\002\001\uffe1\000\010\027\u026f\032\u0277" +
    "\241\u0273\001\uffec\000\022\020\114\021\070\025\066\026" +
    "\115\036\125\043\076\245\075\246\116\001\uff30\000\002" +
    "\001\uffdf\000\002\001\ufffc\000\004\222\063\001\002\000" +
    "\002\001\ufff0\000\002\001\uffe0\000\006\231\057\232\060" +
    "\001\002\000\004\301\056\001\002\000\004\300\053\001" +
    "\002\000\004\220\054\001\002\000\004\301\055\001\002" +
    "\000\002\001\uffdb\000\002\001\uffc8\000\002\001\uffd2\000" +
    "\002\001\uffd1\000\002\001\uffd3\000\002\001\ufff2\000\002" +
    "\001\uffdc\000\002\001\uff41\000\010\017\u0254\020\114\021" +
    "\070\001\uff96\000\002\001\uff71\000\004\243\u024f\001\uff62" +
    "\000\004\307\u0236\001\002\000\006\245\075\246\116\001" +
    "\uff2f\000\002\001\uff61\000\002\001\uff97\000\002\001\uff9c" +
    "\000\002\001\uff2c\000\022\020\114\021\070\025\066\026" +
    "\115\036\125\043\076\245\075\246\116\001\uff30\000\012" +
    "\257\u022a\260\u022b\261\u022d\262\u0229\001\uff4e\000\004\251" +
    "\u0227\001\uff39\000\002\001\uff46\000\002\001\uff5e\000\002" +
    "\001\uff2e\000\006\263\u0222\264\u0224\001\uff53\000\004\210" +
    "\u0181\001\uffa3\000\002\001\uff9d\000\004\265\u021f\001\uff55" +
    "\000\004\247\u021d\001\uff33\000\002\001\uff98\000\002\001" +
    "\uffa2\000\004\244\u021a\001\uff5f\000\004\307\u0208\001\002" +
    "\000\002\001\uff70\000\002\001\uff2b\000\002\001\uffa4\000" +
    "\006\253\u0205\254\u0204\001\uff42\000\132\044\u014f\045\u0141" +
    "\046\u012d\047\u0151\050\u0103\051\u014c\052\u010d\053\u0158\054" +
    "\u0121\063\u0117\064\u011d\065\u015d\066\u010c\136\u013f\137\u0111" +
    "\142\u0137\143\u0134\144\u015c\145\u0110\146\u0139\147\u0120\150" +
    "\u012b\151\u0138\152\u0116\153\u014d\154\u0132\155\u0157\156\u0155" +
    "\157\u010f\160\u0108\161\u010b\162\u0131\163\u0104\266\u015b\267" +
    "\u0105\273\u011c\275\u012f\276\u013e\277\u0128\304\u013d\305\u0115" +
    "\306\u015e\315\u0106\336\u0145\001\ufeee\000\004\250\375\001" +
    "\uff36\000\006\255\371\256\372\001\uff47\000\002\001\uff9a" +
    "\000\022\020\114\021\070\025\066\026\115\036\125\043" +
    "\076\245\075\246\116\001\uff30\000\002\001\uff9f\000\002" +
    "\001\uff9e\000\002\001\uff4d\000\004\307\317\001\002\000" +
    "\004\252\165\001\uff3c\000\002\001\uff52\000\002\001\ufff8" +
    "\000\002\001\uffa0\000\040\164\153\165\152\166\141\167" +
    "\143\170\151\171\147\172\144\173\162\174\150\175\146" +
    "\176\137\177\142\200\156\201\155\202\140\001\uff5b\000" +
    "\002\001\uff1d\000\002\001\uff1b\000\002\001\uff25\000\002" +
    "\001\uff1e\000\002\001\uff24\000\002\001\uff22\000\006\245" +
    "\075\246\116\001\uff30\000\002\001\uff1c\000\002\001\uff23" +
    "\000\002\001\uff21\000\002\001\uff1a\000\002\001\uff26\000" +
    "\002\001\uff27\000\002\001\uff59\000\002\001\uff20\000\002" +
    "\001\uff1f\000\002\001\uff5c\000\002\001\uff58\000\002\001" +
    "\uff57\000\002\001\uff19\000\002\001\uff5a\000\002\001\uff3d" +
    "\000\062\074\172\075\203\076\173\077\243\100\202\101" +
    "\234\105\213\106\201\107\220\110\240\111\177\112\212" +
    "\113\231\114\217\115\176\116\224\117\166\120\170\121" +
    "\221\122\205\123\241\127\210\320\233\321\215\001\002" +
    "\000\002\001\ufe40\000\002\001\ufe46\000\002\001\ufe3f\000" +
    "\002\001\ufe49\000\002\001\ufe15\000\002\001\ufe14\000\004" +
    "\103\316\001\002\000\010\124\314\125\311\126\313\001" +
    "\ufe57\000\002\001\ufe3a\000\002\001\ufe34\000\004\103\310" +
    "\001\002\000\002\001\ufe24\000\002\001\ufe1f\000\002\001" +
    "\ufe13\000\002\001\ufe4b\000\002\001\ufe42\000\002\001\ufe48" +
    "\000\002\001\ufe45\000\002\001\ufe59\000\002\001\ufe4d\000" +
    "\002\001\ufe33\000\002\001\ufe25\000\004\317\275\001\002" +
    "\000\002\001\ufe4f\000\002\001\ufe4c\000\002\001\ufe36\000" +
    "\002\001\ufe2e\000\002\001\ufe43\000\002\001\ufe52\000\002" +
    "\001\ufe47\000\002\001\ufe39\000\006\313\274\317\275\001" +
    "\ufe2c\000\002\001\uff3b\000\004\317\261\001\002\000\006" +
    "\313\255\317\261\001\ufe1e\000\002\001\ufe37\000\004\103" +
    "\254\001\002\000\002\001\ufe4e\000\002\001\ufe20\000\002" +
    "\001\ufe50\000\016\074\172\075\203\076\173\077\243\100" +
    "\202\101\234\001\ufe3e\000\006\314\244\316\245\001\ufe32" +
    "\000\002\001\ufe2d\000\002\001\ufe51\000\002\001\ufe4a\000" +
    "\002\001\ufe21\000\002\001\ufe31\000\002\001\ufe30\000\004" +
    "\103\247\001\002\000\002\001\ufe35\000\004\103\253\001" +
    "\002\000\002\001\ufe3c\000\002\001\ufe3d\000\002\001\ufe41" +
    "\000\002\001\ufe44\000\002\001\ufe17\000\004\104\264\001" +
    "\ufe1c\000\002\001\ufe18\000\004\103\262\001\002\000\002" +
    "\001\ufe10\000\002\001\ufe22\000\002\001\ufe1d\000\004\317" +
    "\266\001\002\000\004\102\270\001\ufe1a\000\002\001\ufe0f" +
    "\000\002\001\ufe1b\000\002\001\ufe19\000\004\103\273\001" +
    "\002\000\002\001\ufe12\000\002\001\ufe16\000\002\001\ufe27" +
    "\000\002\001\ufe11\000\004\103\304\001\002\000\002\001" +
    "\ufe28\000\004\104\302\001\ufe2a\000\002\001\ufe2b\000\004" +
    "\317\266\001\002\000\002\001\ufe29\000\002\001\ufe2f\000" +
    "\004\103\307\001\002\000\002\001\ufe23\000\002\001\ufe26" +
    "\000\002\001\ufe3b\000\002\001\ufe54\000\002\001\ufe56\000" +
    "\002\001\ufe55\000\002\001\ufe53\000\002\001\ufe58\000\002" +
    "\001\ufe38\000\004\130\322\001\uffb7\000\004\024\324\001" +
    "\002\000\002\001\uffb6\000\062\074\172\075\203\076\173" +
    "\077\243\100\202\101\234\105\213\106\201\107\220\110" +
    "\240\111\177\112\212\113\231\114\217\115\176\116\224" +
    "\117\166\120\170\121\221\122\205\123\241\127\210\320" +
    "\233\321\215\001\002\000\002\001\ufe5a\000\022\020\114" +
    "\021\070\025\066\026\115\036\125\043\076\245\075\246" +
    "\116\001\uff30\000\004\210\327\001\uff6f\000\004\023\344" +
    "\001\002\000\004\145\337\001\002\000\004\210\331\001" +
    "\uff6e\000\004\145\332\001\002\000\004\307\333\001\002" +
    "\000\004\130\322\001\uffb7\000\004\024\335\001\002\000" +
    "\022\020\114\021\070\025\066\026\115\036\125\043\076" +
    "\245\075\246\116\001\uff30\000\002\001\uff6c\000\004\307" +
    "\340\001\002\000\004\130\322\001\uffb7\000\004\024\342" +
    "\001\002\000\022\020\114\021\070\025\066\026\115\036" +
    "\125\043\076\245\075\246\116\001\uff30\000\002\001\uff6d" +
    "\000\022\020\114\021\070\025\066\026\115\036\125\043" +
    "\076\245\075\246\116\001\uff30\000\002\001\uff72\000\004" +
    "\055\347\001\002\000\004\040\351\001\002\000\006\035" +
    "\362\040\351\001\002\000\004\145\353\001\uff65\000\002" +
    "\001\uff6a\000\004\307\360\001\002\000\062\074\172\075" +
    "\203\076\173\077\243\100\202\101\234\105\213\106\201" +
    "\107\220\110\240\111\177\112\212\113\231\114\217\115" +
    "\176\116\224\117\166\120\170\121\221\122\205\123\241" +
    "\127\210\320\233\321\215\001\002\000\004\037\356\001" +
    "\002\000\022\020\114\021\070\025\066\026\115\036\125" +
    "\043\076\245\075\246\116\001\uff30\000\002\001\uff66\000" +
    "\004\130\361\001\002\000\002\001\uff64\000\004\145\364" +
    "\001\uff68\000\002\001\uff69\000\004\307\370\001\002\000" +
    "\004\037\366\001\002\000\022\020\114\021\070\025\066" +
    "\026\115\036\125\043\076\245\075\246\116\001\uff30\000" +
    "\002\001\uff6b\000\002\001\uff67\000\002\001\uff44\000\002" +
    "\001\uff43\000\006\245\075\246\116\001\uff30\000\002\001" +
    "\uff45\000\006\320\233\321\215\001\002\000\002\001\uff37" +
    "\000\002\001\uff35\000\004\126\u0101\001\ufe5c\000\002\001" +
    "\ufe5b\000\002\001\ufe5d\000\022\020\114\021\070\025\066" +
    "\026\115\036\125\043\076\245\075\246\116\001\uff30\000" +
    "\002\001\ufeed\000\004\062\u01c7\001\ufeb2\000\002\001\ufe5f" +
    "\000\024\020\114\021\070\025\066\026\115\036\125\043" +
    "\076\131\ufec8\245\075\246\116\001\uff30\000\002\001\ufee8" +
    "\000\002\001\uff14\000\062\074\172\075\203\076\173\077" +
    "\243\100\202\101\234\105\213\106\201\107\220\110\240" +
    "\111\177\112\212\113\231\114\217\115\176\116\224\117" +
    "\166\120\170\121\221\122\205\303\u0188\332\u0189\333\u0187" +
    "\334\u018d\001\002\000\002\001\ufef3\000\120\044\u014f\045" +
    "\u0141\046\u012d\047\u0151\050\u0103\051\u014c\052\u010d\053\u0158" +
    "\054\u0121\063\u0117\064\u011d\136\u013f\137\u0111\142\u0137\143" +
    "\u0134\144\u015c\145\u0110\146\u0139\147\u0120\150\u012b\151\u0138" +
    "\152\u0116\153\u014d\154\u0132\155\u0157\156\u0155\157\u010f\160" +
    "\u0108\161\u010b\162\u0131\163\u0104\273\u011c\275\u012f\276\u013e" +
    "\277\u0128\304\u013d\305\u0115\306\u015e\315\u0106\001\ufeee\000" +
    "\024\020\114\021\070\025\066\026\115\036\125\043\076" +
    "\055\ufec8\245\075\246\116\001\uff30\000\002\001\ufebd\000" +
    "\002\001\ufee7\000\004\307\u01f1\001\002\000\002\001\ufe83" +
    "\000\002\001\ufe6e\000\002\001\uff08\000\002\001\ufed3\000" +
    "\002\001\ufe64\000\002\001\ufef2\000\002\001\ufeb9\000\002" +
    "\001\ufe6f\000\002\001\ufe6d\000\002\001\ufefd\000\022\020" +
    "\114\021\070\025\066\026\115\036\125\043\076\245\075" +
    "\246\116\001\uff30\000\002\001\ufece\000\002\001\ufeba\000" +
    "\062\074\172\075\203\076\173\077\243\100\202\101\234" +
    "\105\213\106\201\107\220\110\240\111\177\112\212\113" +
    "\231\114\217\115\176\116\224\117\166\120\170\121\221" +
    "\122\205\303\u0188\332\u0189\333\u0187\334\u018d\001\002\000" +
    "\002\001\ufe72\000\002\001\ufee6\000\022\020\114\021\070" +
    "\025\066\026\115\036\125\043\076\245\075\246\116\001" +
    "\uff30\000\004\331\u01a8\001\002\000\024\020\114\021\070" +
    "\025\066\026\115\036\125\043\076\131\ufe68\245\075\246" +
    "\116\001\uff30\000\002\001\ufed4\000\002\001\ufef9\000\002" +
    "\001\ufed2\000\002\001\ufebc\000\002\001\ufecb\000\002\001" +
    "\ufefc\000\002\001\ufed1\000\002\001\ufef4\000\002\001\ufefa" +
    "\000\022\020\114\021\070\025\066\026\115\036\125\043" +
    "\076\245\075\246\116\001\uff30\000\010\030\u019c\073\u019d" +
    "\267\u0105\001\002\000\002\001\ufecd\000\004\323\u0192\001" +
    "\002\000\002\001\ufee5\000\002\001\ufef1\000\024\020\114" +
    "\021\070\025\066\026\115\036\125\043\076\131\ufec8\245" +
    "\075\246\116\001\uff30\000\002\001\ufe8d\000\062\074\172" +
    "\075\203\076\173\077\243\100\202\101\234\105\213\106" +
    "\201\107\220\110\240\111\177\112\212\113\231\114\217" +
    "\115\176\116\224\117\166\120\170\121\221\122\205\303" +
    "\u0188\332\u0189\333\u0187\334\u018d\001\002\000\002\001\ufed6" +
    "\000\002\001\ufe8c\000\002\001\ufef5\000\002\001\ufee9\000" +
    "\006\067\u0184\070\u0185\001\uff02\000\002\001\ufebf\000\002" +
    "\001\ufe70\000\024\020\114\021\070\025\066\026\115\036" +
    "\125\043\076\055\ufec2\245\075\246\116\001\uff30\000\002" +
    "\001\ufecc\000\002\001\ufe82\000\002\001\uff07\000\022\020" +
    "\114\021\070\025\066\026\115\036\125\043\076\245\075" +
    "\246\116\001\uff30\000\002\001\ufed0\000\002\001\ufec0\000" +
    "\002\001\ufebe\000\004\073\u017b\001\002\000\002\001\ufed5" +
    "\000\002\001\ufeeb\000\002\001\uff28\000\006\311\u0177\312" +
    "\u0175\001\ufe8a\000\002\001\ufed7\000\002\001\ufe71\000\022" +
    "\020\114\021\070\025\066\026\115\036\125\043\076\245" +
    "\075\246\116\001\uff30\000\002\001\ufef0\000\002\001\uff31" +
    "\000\022\020\114\021\070\025\066\026\115\036\125\043" +
    "\076\245\075\246\116\001\uff30\000\002\001\uff29\000\022" +
    "\020\114\021\070\025\066\026\115\036\125\043\076\245" +
    "\075\246\116\001\uff30\000\004\072\u0164\001\ufedc\000\002" +
    "\001\uff2a\000\002\001\ufef7\000\002\001\ufeea\000\002\001" +
    "\ufecf\000\002\001\ufef6\000\022\020\114\021\070\025\066" +
    "\026\115\036\125\043\076\245\075\246\116\001\uff30\000" +
    "\004\072\u0164\001\ufedc\000\002\001\uff01\000\002\001\uff17" +
    "\000\002\001\ufec6\000\200\044\u014f\045\u0141\046\u012d\047" +
    "\u0151\050\u0103\051\u014c\052\u010d\053\u0158\054\u0121\063\u0117" +
    "\064\u011d\074\ufeee\075\ufeee\076\ufeee\077\ufeee\100\ufeee\101" +
    "\ufeee\105\ufeee\106\ufeee\107\ufeee\110\ufeee\111\ufeee\112\ufeee" +
    "\113\ufeee\114\ufeee\115\ufeee\116\ufeee\117\ufeee\120\ufeee\121" +
    "\ufeee\122\ufeee\136\u013f\137\u0111\142\u0137\143\u0134\144\u015c" +
    "\145\u0110\146\u0139\147\u0120\150\u012b\151\u0138\152\u0116\153" +
    "\u014d\154\u0132\155\u0157\156\u0155\157\u010f\160\u0108\161\u010b" +
    "\162\u0131\163\u0104\273\u011c\275\u012f\276\u013e\277\u0128\303" +
    "\ufeee\304\u013d\305\u0115\306\u015e\315\u0106\332\ufeee\333\ufeee" +
    "\334\ufeee\001\uff04\000\002\001\ufe6a\000\002\001\uff06\000" +
    "\002\001\uff03\000\002\001\ufeda\000\004\072\u0164\001\ufedb" +
    "\000\002\001\ufefb\000\022\020\114\021\070\025\066\026" +
    "\115\036\125\043\076\245\075\246\116\001\uff30\000\004" +
    "\071\u0166\001\002\000\002\001\ufed8\000\002\001\ufed9\000" +
    "\004\131\u0169\001\002\000\002\001\ufec4\000\002\001\ufedd" +
    "\000\004\131\u016c\001\002\000\002\001\ufe61\000\004\131" +
    "\u016e\001\002\000\004\073\u016f\001\002\000\002\001\ufe69" +
    "\000\004\131\u0171\001\002\000\004\073\u0172\001\002\000" +
    "\002\001\ufe63\000\002\001\ufe88\000\002\001\ufe8b\000\002" +
    "\001\ufe85\000\006\311\u0177\312\u0175\001\ufe89\000\002\001" +
    "\ufe86\000\004\141\u0179\001\002\000\002\001\ufe8e\000\002" +
    "\001\ufe87\000\002\001\uff16\000\004\131\u017d\001\002\000" +
    "\002\001\ufe6c\000\004\210\u0181\001\ufec1\000\004\055\u0180" +
    "\001\002\000\002\001\ufec3\000\022\020\114\021\070\025" +
    "\066\026\115\036\125\043\076\245\075\246\116\001\uff30" +
    "\000\002\001\uffa1\000\120\044\u014f\045\u0141\046\u012d\047" +
    "\u0151\050\u0103\051\u014c\052\u010d\053\u0158\054\u0121\063\u0117" +
    "\064\u011d\136\u013f\137\u0111\142\u0137\143\u0134\144\u015c\145" +
    "\u0110\146\u0139\147\u0120\150\u012b\151\u0138\152\u0116\153\u014d" +
    "\154\u0132\155\u0157\156\u0155\157\u010f\160\u0108\161\u010b\162" +
    "\u0131\163\u0104\273\u011c\275\u012f\276\u013e\277\u0128\304\u013d" +
    "\305\u0115\306\u015e\315\u0106\001\ufeee\000\002\001\ufeff\000" +
    "\002\001\ufefe\000\002\001\uff00\000\002\001\ufedf\000\002" +
    "\001\ufee2\000\002\001\ufee0\000\002\001\ufeef\000\002\001" +
    "\ufee4\000\002\001\ufee1\000\002\001\ufede\000\002\001\ufee3" +
    "\000\002\001\ufec7\000\004\131\u0191\001\002\000\002\001" +
    "\ufe60\000\004\140\u0193\001\ufe81\000\004\322\u0196\001\ufe7e" +
    "\000\004\135\u0195\001\002\000\002\001\ufe84\000\002\001" +
    "\ufe7c\000\002\001\ufe7f\000\002\001\ufe80\000\004\322\u019a" +
    "\001\ufe7d\000\002\001\ufe7b\000\002\001\uff13\000\002\001" +
    "\uff12\000\002\001\uff11\000\024\020\114\021\070\025\066" +
    "\026\115\036\125\043\076\131\ufec8\245\075\246\116\001" +
    "\uff30\000\004\131\u01a0\001\002\000\002\001\uff15\000\004" +
    "\131\u01a2\001\002\000\004\073\u01a3\001\002\000\002\001" +
    "\ufe5e\000\002\001\ufe67\000\004\131\u01a7\001\002\000\002" +
    "\001\ufe66\000\002\001\ufe6b\000\004\062\u01aa\001\ufeaf\000" +
    "\004\062\u01ea\001\ufeae\000\004\331\u01d0\001\ufeab\000\006" +
    "\060\u01ad\061\u01af\001\002\000\002\001\ufeb0\000\040\004" +
    "\u01b3\005\u01c0\030\u01b7\063\u0117\064\u011d\073\u01b4\133\u01b2" +
    "\134\u01b1\136\u013f\137\u0111\142\u0137\143\u0134\324\u01c1\325" +
    "\u01b8\326\u01b0\001\ufeb6\000\002\001\ufebb\000\002\001\ufeb8" +
    "\000\002\001\ufe94\000\002\001\ufe79\000\002\001\ufe78\000" +
    "\002\001\ufe90\000\002\001\uffa5\000\002\001\ufeb4\000\002" +
    "\001\ufe97\000\002\001\uffa6\000\002\001\ufe93\000\002\001" +
    "\ufe95\000\004\335\u01cd\001\ufe76\000\004\057\u01c5\001\002" +
    "\000\040\004\u01b3\005\u01c0\030\u01b7\063\u0117\064\u011d\073" +
    "\u01b4\133\u01b2\134\u01b1\136\u013f\137\u0111\142\u0137\143\u0134" +
    "\324\u01c1\325\u01b8\326\u01b0\001\ufeb5\000\022\020\114\021" +
    "\070\025\066\026\115\036\125\043\076\245\075\246\116" +
    "\001\uff30\000\002\001\ufe96\000\002\001\ufe8f\000\002\001" +
    "\ufe91\000\002\001\ufe92\000\004\131\u01c3\001\002\000\002" +
    "\001\uffa7\000\002\001\ufeb3\000\004\331\u01c6\001\002\000" +
    "\004\062\u01c7\001\ufeb2\000\002\001\ufeb1\000\004\056\u01c9" +
    "\001\002\000\002\001\ufeb7\000\004\132\u01cf\001\002\000" +
    "\002\001\ufe77\000\004\335\u01ce\001\ufe75\000\002\001\ufe74" +
    "\000\002\001\ufe73\000\002\001\ufe7a\000\004\062\u01c7\001" +
    "\ufeb2\000\002\001\ufead\000\004\014\u01d3\001\002\000\004" +
    "\062\u01c7\001\ufeb2\000\006\010\u01d5\011\u01d7\001\002\000" +
    "\022\004\u01b3\005\u01c0\012\u01e4\030\u01b7\073\u01b4\324\u01c1" +
    "\325\u01b8\327\u01e2\001\ufea1\000\002\001\ufeaa\000\022\004" +
    "\u01b3\005\u01c0\013\u01db\030\u01b7\073\u01b4\324\u01c1\325\u01b8" +
    "\330\u01da\001\ufea7\000\004\007\u01e0\001\002\000\002\001" +
    "\ufea2\000\002\001\ufe9b\000\002\001\ufea3\000\002\001\ufe9a" +
    "\000\022\004\u01b3\005\u01c0\013\u01db\030\u01b7\073\u01b4\324" +
    "\u01c1\325\u01b8\330\u01da\001\ufea6\000\002\001\ufea5\000\002" +
    "\001\ufea4\000\002\001\ufea9\000\004\006\u01e9\001\002\000" +
    "\002\001\ufe99\000\002\001\ufe9f\000\002\001\ufe9d\000\022" +
    "\004\u01b3\005\u01c0\012\u01e4\030\u01b7\073\u01b4\324\u01c1\325" +
    "\u01b8\327\u01e2\001\ufea0\000\002\001\ufe98\000\002\001\ufe9c" +
    "\000\002\001\ufe9e\000\002\001\ufea8\000\004\331\u01d0\001" +
    "\ufeab\000\002\001\ufeac\000\004\131\u01ed\001\002\000\002" +
    "\001\ufec5\000\002\001\ufef8\000\004\131\u01f0\001\002\000" +
    "\002\001\uff18\000\002\001\ufeca\000\004\055\u01f3\001\002" +
    "\000\002\001\ufec9\000\002\001\uff05\000\002\001\ufeec\000" +
    "\004\131\u01f7\001\002\000\002\001\ufe65\000\004\303\u01f9" +
    "\001\002\000\004\062\u01fb\001\uff0f\000\004\270\u0201\001" +
    "\002\000\004\274\u01ff\001\uff0c\000\002\001\uff0d\000\004" +
    "\274\u0200\001\uff0b\000\002\001\uff0e\000\002\001\uff0a\000" +
    "\002\001\uff09\000\002\001\uff10\000\004\131\u0203\001\002" +
    "\000\002\001\ufe62\000\002\001\uff3e\000\002\001\uff3f\000" +
    "\006\245\075\246\116\001\uff30\000\002\001\uff40\000\004" +
    "\130\322\001\uffb7\000\004\034\u020a\001\002\000\022\020" +
    "\114\021\070\025\066\026\115\036\125\043\076\245\075" +
    "\246\116\001\uff30\000\004\210\u020d\001\uff89\000\004\210" +
    "\u0214\001\uff88\000\004\145\u020f\001\002\000\002\001\uff8a" +
    "\000\004\307\u0210\001\002\000\004\130\322\001\uffb7\000" +
    "\004\034\u0212\001\002\000\022\020\114\021\070\025\066" +
    "\026\115\036\125\043\076\245\075\246\116\001\uff30\000" +
    "\002\001\uff87\000\004\145\u0215\001\002\000\004\307\u0216" +
    "\001\002\000\004\130\322\001\uffb7\000\004\034\u0218\001" +
    "\002\000\022\020\114\021\070\025\066\026\115\036\125" +
    "\043\076\245\075\246\116\001\uff30\000\002\001\uff86\000" +
    "\006\245\075\246\116\001\uff30\000\002\001\uff5d\000\002" +
    "\001\uff34\000\006\320\233\321\215\001\002\000\002\001" +
    "\uff32\000\006\245\075\246\116\001\uff30\000\002\001\uff56" +
    "\000\002\001\uff54\000\002\001\uff50\000\006\245\075\246" +
    "\116\001\uff30\000\002\001\uff4f\000\002\001\uff51\000\002" +
    "\001\uff3a\000\062\074\172\075\203\076\173\077\243\100" +
    "\202\101\234\105\213\106\201\107\220\110\240\111\177" +
    "\112\212\113\231\114\217\115\176\116\224\117\166\120" +
    "\170\121\221\122\205\123\241\127\210\320\233\321\215" +
    "\001\002\000\002\001\uff38\000\002\001\uff4a\000\002\001" +
    "\uff4b\000\002\001\uff48\000\006\245\075\246\116\001\uff30" +
    "\000\002\001\uff49\000\002\001\uff4c\000\004\055\u0230\001" +
    "\002\000\004\042\u0231\001\002\000\022\020\114\021\070" +
    "\025\066\026\115\036\125\043\076\245\075\246\116\001" +
    "\uff30\000\004\041\u0233\001\002\000\022\020\114\021\070" +
    "\025\066\026\115\036\125\043\076\245\075\246\116\001" +
    "\uff30\000\002\001\uff63\000\002\001\uff2d\000\004\130\322" +
    "\001\uffb7\000\004\022\u0238\001\uff91\000\004\145\u024d\001" +
    "\002\000\002\001\uff90\000\004\024\u023b\001\002\000\022" +
    "\020\114\021\070\025\066\026\115\036\125\043\076\245" +
    "\075\246\116\001\uff30\000\004\210\u023d\001\uff8f\000\004" +
    "\145\u0247\001\002\000\002\001\uff92\000\004\210\u0240\001" +
    "\uff8e\000\004\145\u0241\001\002\000\004\307\u0242\001\002" +
    "\000\004\130\322\001\uffb7\000\004\022\u0238\001\uff91\000" +
    "\004\024\u0245\001\002\000\022\020\114\021\070\025\066" +
    "\026\115\036\125\043\076\245\075\246\116\001\uff30\000" +
    "\002\001\uff8c\000\004\307\u0248\001\002\000\004\130\322" +
    "\001\uffb7\000\004\022\u0238\001\uff91\000\004\024\u024b\001" +
    "\002\000\022\020\114\021\070\025\066\026\115\036\125" +
    "\043\076\245\075\246\116\001\uff30\000\002\001\uff8d\000" +
    "\004\307\u024e\001\002\000\002\001\uff8b\000\006\245\075" +
    "\246\116\001\uff30\000\002\001\uff60\000\002\001\uff99\000" +
    "\002\001\uff95\000\006\015\u0257\016\u025a\001\uff94\000\022" +
    "\020\114\021\070\025\066\026\115\036\125\043\076\245" +
    "\075\246\116\001\uff30\000\002\001\uff85\000\002\001\uff93" +
    "\000\002\001\uff82\000\022\020\114\021\070\025\066\026" +
    "\115\036\125\043\076\245\075\246\116\001\uff30\000\004" +
    "\037\u025b\001\002\000\002\001\uff83\000\022\020\114\021" +
    "\070\025\066\026\115\036\125\043\076\245\075\246\116" +
    "\001\uff30\000\002\001\uff9b\000\004\210\u026d\001\uff81\000" +
    "\002\001\uff84\000\006\203\u0262\204\u0265\001\uff7c\000\002" +
    "\001\uff80\000\006\205\u0267\206\u0269\001\uff78\000\002\001" +
    "\uff7a\000\002\001\uff7b\000\002\001\uff7e\000\002\001\uff79" +
    "\000\004\207\u026a\001\uff74\000\002\001\uff76\000\002\001" +
    "\uff77\000\002\001\uff75\000\004\273\u026c\001\002\000\002" +
    "\001\uff7d\000\002\001\uff73\000\022\020\114\021\070\025" +
    "\066\026\115\036\125\043\076\245\075\246\116\001\uff30" +
    "\000\002\001\uff7f\000\004\304\u0283\001\002\000\002\001" +
    "\uffe8\000\002\001\uffe6\000\004\222\063\001\002\000\004" +
    "\303\u0280\001\002\000\002\001\ufff5\000\002\001\uffe7\000" +
    "\010\027\u026f\032\u0277\241\u0273\001\uffeb\000\004\307\u0278" +
    "\001\002\000\004\130\322\001\uffb7\000\006\033\u027b\034" +
    "\u027a\001\002\000\022\020\114\021\070\025\066\026\115" +
    "\036\125\043\076\245\075\246\116\001\uff30\000\002\001" +
    "\uffb4\000\002\001\uffb8\000\002\001\uffb5\000\004\222\063" +
    "\001\002\000\002\001\uffe9\000\004\273\u0281\001\002\000" +
    "\002\001\uffd4\000\002\001\uffea\000\004\145\u0285\001\uffb1" +
    "\000\006\031\u028d\055\u028f\001\002\000\004\307\u028b\001" +
    "\002\000\002\001\uffb0\000\002\001\uffaa\000\004\210\u0289" +
    "\001\uffab\000\004\145\u0285\001\002\000\002\001\uffa9\000" +
    "\004\130\322\001\uffb7\000\002\001\uffa8\000\062\074\172" +
    "\075\203\076\173\077\243\100\202\101\234\105\213\106" +
    "\201\107\220\110\240\111\177\112\212\113\231\114\217" +
    "\115\176\116\224\117\166\120\170\121\221\122\205\123" +
    "\241\127\210\320\233\321\215\001\002\000\010\030\u01b7" +
    "\033\u0292\073\u01b4\001\002\000\002\001\uffaf\000\002\001" +
    "\uffb2\000\002\001\uffad\000\002\001\uffac\000\002\001\uffae" +
    "\000\002\001\uffc7\000\002\001\uffcb\000\002\001\uffcc\000" +
    "\004\210\u0298\001\002\000\006\213\u029b\214\u029a\001\002" +
    "\000\002\001\uffcd\000\002\001\uffc9\000\002\001\uffca\000" +
    "\004\300\u02a7\001\002\000\004\301\u029e\001\002\000\004" +
    "\302\u029f\001\uffc3\000\004\210\u02a2\001\uffc1\000\002\001" +
    "\uffbb\000\002\001\uffc2\000\004\301\u02a6\001\002\000\004" +
    "\210\u02a4\001\uffc0\000\004\301\u02a5\001\002\000\002\001" +
    "\uffbe\000\002\001\uffbf\000\004\220\u02a8\001\002\000\002" +
    "\001\uffb9\000\004\301\u02aa\001\002\000\002\001\uffd7\000" +
    "\002\001\uffda\000\002\001\uffd8\000\002\001\uffd9\000\004" +
    "\220\u02af\001\002\000\004\301\u02b0\001\002\000\004\222" +
    "\063\001\002\000\002\001\ufff6\000\002\001\uffd0\000\002" +
    "\001\uffcf\000\002\001\uffce\000\002\001\ufff7\000\004\222" +
    "\063\001\002\000\002\001\ufff1\000\002\001\uffb3\000\004" +
    "\217\u02c1\001\002\000\002\001\uffc4\000\004\301\u02bf\001" +
    "\002\000\004\300\u02bd\001\002\000\004\220\u02be\001\002" +
    "\000\002\001\uffbd\000\004\302\u029f\001\uffc3\000\002\001" +
    "\uffc6\000\002\001\uffbc\000\002\001\001\000\004\272\u02c4" +
    "\001\ufffa\000\004\273\u02c7\001\002\000\004\222\063\001" +
    "\002\000\002\001\ufffb\000\002\001\ufff9" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02c5\000\010\002\004\003\006\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\005\030\006\026\007\043\010\041\012\015\013\040\014" +
    "\011\017\044\021\045\022\035\023\032\024\025\030\031" +
    "\031\022\032\016\033\012\034\037\035\046\036\042\037" +
    "\014\040\034\045\024\001\001\000\006\255\u02ba\256\u02b9" +
    "\001\001\000\002\001\001\000\040\017\u02b5\021\045\022" +
    "\035\023\032\024\025\030\031\031\022\032\016\033\012" +
    "\034\037\035\046\036\042\037\014\040\034\045\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\010\u02b4\013\040\014\011\017\044\021\045\022" +
    "\035\023\032\024\025\030\031\031\022\032\016\033\012" +
    "\034\037\035\046\036\042\037\014\040\034\045\024\001" +
    "\001\000\002\001\001\000\004\047\u02b1\001\001\000\002" +
    "\001\001\000\004\044\u02aa\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\337\u029c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\u0296\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\u0273\016\u0275\020\u0271\025\u026f" +
    "\026\u0274\027\u0270\001\001\000\110\011\133\066\120\067" +
    "\070\076\116\103\111\104\134\105\125\106\126\107\105" +
    "\110\073\111\066\112\071\113\112\114\101\115\135\117" +
    "\106\120\103\121\132\122\076\123\127\124\122\125\100" +
    "\126\117\127\063\130\131\131\077\132\121\133\107\223" +
    "\104\237\064\240\123\241\110\242\072\250\130\373\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\374" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\225\u0252\226\u0251\240\u0250\241\110\242\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\373\u0234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\106\066\120" +
    "\067\070\076\u022e\103\111\104\134\105\125\106\126\107" +
    "\105\110\073\111\066\112\071\113\112\114\101\115\135" +
    "\117\106\120\103\121\132\122\076\123\127\124\122\125" +
    "\100\126\117\127\063\130\131\131\077\132\121\133\107" +
    "\223\104\237\064\240\123\241\110\242\072\250\130\373" +
    "\102\001\001\000\004\220\u022b\001\001\000\004\061\u0225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\217\u0222\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\116\u021f\001\001\000\004\064\u021b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\222\u0205\001\001\000\142\075\u0108" +
    "\134\u014d\135\u0152\136\u014f\137\u0147\140\u0112\141\u0151\142" +
    "\u0149\143\u0155\144\u0135\145\u0123\146\u0113\147\u0125\150\u0129" +
    "\151\u0141\152\u0145\154\u013f\156\u0139\157\u0159\160\u0119\161" +
    "\u0128\163\u0142\164\u0143\165\u010d\166\u0126\167\u013a\170\u011e" +
    "\171\u014a\172\u013b\173\u0117\174\u0111\175\u0118\176\u0158\177" +
    "\u012b\200\u0153\201\u0124\202\u0146\203\u011d\204\u0109\205\u0134" +
    "\211\u011a\212\u012d\264\u0122\265\u0106\266\u0132\u0100\u0121\u0101" +
    "\u0148\u0102\u012f\001\001\000\004\065\375\001\001\000\004" +
    "\221\372\001\001\000\002\001\001\000\106\066\120\067" +
    "\070\076\345\103\111\104\134\105\125\106\126\107\105" +
    "\110\073\111\066\112\071\113\112\114\101\115\135\117" +
    "\106\120\103\121\132\122\076\123\127\124\122\125\100" +
    "\126\117\127\063\130\131\131\077\132\121\133\107\223" +
    "\104\237\064\240\123\241\110\242\072\250\130\373\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\213" +
    "\144\214\153\215\157\216\160\236\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\066\120" +
    "\067\070\115\162\117\106\120\103\121\132\122\076\123" +
    "\127\124\122\125\100\126\117\127\063\130\131\131\077" +
    "\132\121\133\107\373\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\057\225\305\234\306\174\310\221" +
    "\311\210\312\215\313\203\314\241\315\170\316\205\317" +
    "\222\320\166\321\206\u0104\231\u0105\235\u0106\177\u0107\173" +
    "\u0108\236\u0109\224\u010a\213\u010b\227\u010c\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\324\314\325\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\342\305\367\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\326\275\342\276\365\277\001\001\000\002" +
    "\001\001\000\006\341\271\343\270\001\001\000\010\327" +
    "\257\341\256\370\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\312\251\314\250\322\247\u010b\227\u010c\226" +
    "\001\001\000\004\364\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\330\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\340\264\001\001\000\004\372\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\366\300\001\001\000\002\001\001\000\004\340\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\055\317\056\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\057\322\305\234\306\174\310\221\311\210" +
    "\312\215\313\203\314\241\315\170\316\205\317\222\320" +
    "\166\321\206\u0104\231\u0105\235\u0106\177\u0107\173\u0108\236" +
    "\u0109\224\u010a\213\u010b\227\u010c\226\001\001\000\002\001" +
    "\001\000\102\066\120\067\070\103\324\104\134\105\125" +
    "\106\126\107\105\110\073\111\066\112\071\113\112\114" +
    "\101\115\135\117\106\120\103\121\132\122\076\123\127" +
    "\124\122\125\100\126\117\127\063\130\131\131\077\132" +
    "\121\133\107\237\064\240\123\241\110\242\072\250\130" +
    "\373\102\001\001\000\006\251\325\252\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\055\333\056\320\001" +
    "\001\000\002\001\001\000\102\066\120\067\070\103\335" +
    "\104\134\105\125\106\126\107\105\110\073\111\066\112" +
    "\071\113\112\114\101\115\135\117\106\120\103\121\132" +
    "\122\076\123\127\124\122\125\100\126\117\127\063\130" +
    "\131\131\077\132\121\133\107\237\064\240\123\241\110" +
    "\242\072\250\130\373\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\055\340\056\320\001\001\000\002" +
    "\001\001\000\102\066\120\067\070\103\342\104\134\105" +
    "\125\106\126\107\105\110\073\111\066\112\071\113\112" +
    "\114\101\115\135\117\106\120\103\121\132\122\076\123" +
    "\127\124\122\125\100\126\117\127\063\130\131\131\077" +
    "\132\121\133\107\237\064\240\123\241\110\242\072\250" +
    "\130\373\102\001\001\000\002\001\001\000\102\066\120" +
    "\067\070\103\344\104\134\105\125\106\126\107\105\110" +
    "\073\111\066\112\071\113\112\114\101\115\135\117\106" +
    "\120\103\121\132\122\076\123\127\124\122\125\100\126" +
    "\117\127\063\130\131\131\077\132\121\133\107\237\064" +
    "\240\123\241\110\242\072\250\130\373\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\253\347\254\351" +
    "\001\001\000\004\254\362\001\001\000\004\336\353\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\057\354" +
    "\305\234\306\174\310\221\311\210\312\215\313\203\314" +
    "\241\315\170\316\205\317\222\320\166\321\206\u0104\231" +
    "\u0105\235\u0106\177\u0107\173\u0108\236\u0109\224\u010a\213\u010b" +
    "\227\u010c\226\001\001\000\002\001\001\000\102\066\120" +
    "\067\070\103\356\104\134\105\125\106\126\107\105\110" +
    "\073\111\066\112\071\113\112\114\101\115\135\117\106" +
    "\120\103\121\132\122\076\123\127\124\122\125\100\126" +
    "\117\127\063\130\131\131\077\132\121\133\107\237\064" +
    "\240\123\241\110\242\072\250\130\373\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\335\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\066\120\067\070\103\366\104\134" +
    "\105\125\106\126\107\105\110\073\111\066\112\071\113" +
    "\112\114\101\115\135\117\106\120\103\121\132\122\076" +
    "\123\127\124\122\125\100\126\117\127\063\130\131\131" +
    "\077\132\121\133\107\237\064\240\123\241\110\242\072" +
    "\250\130\373\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\066\120" +
    "\067\070\125\373\126\117\127\063\130\131\131\077\132" +
    "\121\133\107\373\102\001\001\000\002\001\001\000\006" +
    "\063\376\305\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\323\u0101\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\066\120\067\070\076\u0201\103\111\104" +
    "\134\105\125\106\126\107\105\110\073\111\066\112\071" +
    "\113\112\114\101\115\135\117\106\120\103\121\132\122" +
    "\076\123\127\124\122\125\100\126\117\127\063\130\131" +
    "\131\077\132\121\133\107\223\104\237\064\240\123\241" +
    "\110\242\072\250\130\373\102\001\001\000\002\001\001" +
    "\000\004\377\u01f7\001\001\000\002\001\001\000\110\066" +
    "\120\067\070\076\u018e\077\u01f5\103\111\104\134\105\125" +
    "\106\126\107\105\110\073\111\066\112\071\113\112\114" +
    "\101\115\135\117\106\120\103\121\132\122\076\123\127" +
    "\124\122\125\100\126\117\127\063\130\131\131\077\132" +
    "\121\133\107\223\104\237\064\240\123\241\110\242\072" +
    "\250\130\373\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\206\u018d\307\u01f4\310\u018a\311\210\312\215" +
    "\313\203\314\241\315\170\316\205\317\222\320\166\321" +
    "\206\350\u018b\u0104\231\u0105\235\u0106\177\u0107\173\u0108\236" +
    "\u0109\224\u010a\213\u010b\227\u010c\226\001\001\000\002\001" +
    "\001\000\122\141\u0151\142\u0149\143\u0155\144\u0135\145\u0123" +
    "\146\u0113\147\u0125\150\u0129\151\u0141\152\u0145\154\u01f3\156" +
    "\u0139\157\u0159\160\u0119\161\u0128\163\u0142\164\u0143\165\u010d" +
    "\166\u0126\167\u013a\170\u011e\171\u014a\172\u013b\173\u0117\174" +
    "\u0111\175\u0118\176\u0158\177\u012b\200\u0153\201\u0124\202\u0146" +
    "\203\u011d\204\u0109\205\u0134\264\u0122\265\u0106\266\u0132\u0100" +
    "\u0121\u0101\u0148\u0102\u012f\001\001\000\110\066\120\067\070" +
    "\076\u018e\077\u01f1\103\111\104\134\105\125\106\126\107" +
    "\105\110\073\111\066\112\071\113\112\114\101\115\135" +
    "\117\106\120\103\121\132\122\076\123\127\124\122\125" +
    "\100\126\117\127\063\130\131\131\077\132\121\133\107" +
    "\223\104\237\064\240\123\241\110\242\072\250\130\373" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\106\066\120\067\070\076\u01ee\103\111" +
    "\104\134\105\125\106\126\107\105\110\073\111\066\112" +
    "\071\113\112\114\101\115\135\117\106\120\103\121\132" +
    "\122\076\123\127\124\122\125\100\126\117\127\063\130" +
    "\131\131\077\132\121\133\107\223\104\237\064\240\123" +
    "\241\110\242\072\250\130\373\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\206\u018d\307\u01ed\310\u018a" +
    "\311\210\312\215\313\203\314\241\315\170\316\205\317" +
    "\222\320\166\321\206\350\u018b\u0104\231\u0105\235\u0106\177" +
    "\u0107\173\u0108\236\u0109\224\u010a\213\u010b\227\u010c\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\106\066\120" +
    "\067\070\076\u01eb\103\111\104\134\105\125\106\126\107" +
    "\105\110\073\111\066\112\071\113\112\114\101\115\135" +
    "\117\106\120\103\121\132\122\076\123\127\124\122\125" +
    "\100\126\117\127\063\130\131\131\077\132\121\133\107" +
    "\223\104\237\064\240\123\241\110\242\072\250\130\373" +
    "\102\001\001\000\002\001\001\000\112\066\120\067\070" +
    "\076\u01a5\101\u01a4\102\u01a3\103\111\104\134\105\125\106" +
    "\126\107\105\110\073\111\066\112\071\113\112\114\101" +
    "\115\135\117\106\120\103\121\132\122\076\123\127\124" +
    "\122\125\100\126\117\127\063\130\131\131\077\132\121" +
    "\133\107\223\104\237\064\240\123\241\110\242\072\250" +
    "\130\373\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\066\120\067\070\076\u01a0\103\111\104" +
    "\134\105\125\106\126\107\105\110\073\111\066\112\071" +
    "\113\112\114\101\115\135\117\106\120\103\121\132\122" +
    "\076\123\127\124\122\125\100\126\117\127\063\130\131" +
    "\131\077\132\121\133\107\223\104\237\064\240\123\241" +
    "\110\242\072\250\130\373\102\001\001\000\006\075\u019a" +
    "\376\u019d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\110\066\120\067\070" +
    "\076\u018e\077\u018f\103\111\104\134\105\125\106\126\107" +
    "\105\110\073\111\066\112\071\113\112\114\101\115\135" +
    "\117\106\120\103\121\132\122\076\123\127\124\122\125" +
    "\100\126\117\127\063\130\131\131\077\132\121\133\107" +
    "\223\104\237\064\240\123\241\110\242\072\250\130\373" +
    "\102\001\001\000\002\001\001\000\056\206\u018d\307\u0189" +
    "\310\u018a\311\210\312\215\313\203\314\241\315\170\316" +
    "\205\317\222\320\166\321\206\350\u018b\u0104\231\u0105\235" +
    "\u0106\177\u0107\173\u0108\236\u0109\224\u010a\213\u010b\227\u010c" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\162\u0182\001\001\000" +
    "\002\001\001\000\002\001\001\000\106\066\120\067\070" +
    "\103\111\104\134\105\125\106\126\107\105\110\073\111" +
    "\066\112\071\113\112\114\101\115\135\117\106\120\103" +
    "\121\132\122\076\123\127\124\122\125\100\126\117\127" +
    "\063\130\131\131\077\132\121\133\107\223\u017d\224\u017e" +
    "\237\064\240\123\241\110\242\072\250\130\373\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\106\066\120\067\070\076\u017b\103\111\104\134\105" +
    "\125\106\126\107\105\110\073\111\066\112\071\113\112" +
    "\114\101\115\135\117\106\120\103\121\132\122\076\123" +
    "\127\124\122\125\100\126\117\127\063\130\131\131\077" +
    "\132\121\133\107\223\104\237\064\240\123\241\110\242" +
    "\072\250\130\373\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\351\u0177" +
    "\352\u0173\353\u0175\354\u0172\001\001\000\002\001\001\000" +
    "\002\001\001\000\106\066\120\067\070\076\u016f\103\111" +
    "\104\134\105\125\106\126\107\105\110\073\111\066\112" +
    "\071\113\112\114\101\115\135\117\106\120\103\121\132" +
    "\122\076\123\127\124\122\125\100\126\117\127\063\130" +
    "\131\131\077\132\121\133\107\223\104\237\064\240\123" +
    "\241\110\242\072\250\130\373\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\106\066\120\067\070\076\u016c" +
    "\103\111\104\134\105\125\106\126\107\105\110\073\111" +
    "\066\112\071\113\112\114\101\115\135\117\106\120\103" +
    "\121\132\122\076\123\127\124\122\125\100\126\117\127" +
    "\063\130\131\131\077\132\121\133\107\223\104\237\064" +
    "\240\123\241\110\242\072\250\130\373\102\001\001\000" +
    "\002\001\001\000\106\066\120\067\070\076\u016a\103\111" +
    "\104\134\105\125\106\126\107\105\110\073\111\066\112" +
    "\071\113\112\114\101\115\135\117\106\120\103\121\132" +
    "\122\076\123\127\124\122\125\100\126\117\127\063\130" +
    "\131\131\077\132\121\133\107\223\104\237\064\240\123" +
    "\241\110\242\072\250\130\373\102\001\001\000\010\153" +
    "\u0160\207\u0169\210\u0161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\106\066\120\067\070\076\u0167\103\111\104\134" +
    "\105\125\106\126\107\105\110\073\111\066\112\071\113" +
    "\112\114\101\115\135\117\106\120\103\121\132\122\076" +
    "\123\127\124\122\125\100\126\117\127\063\130\131\131" +
    "\077\132\121\133\107\223\104\237\064\240\123\241\110" +
    "\242\072\250\130\373\102\001\001\000\010\153\u0160\207" +
    "\u0162\210\u0161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\124\141\u0151\142\u0149\143\u0155\144" +
    "\u0135\145\u0123\146\u0113\147\u0125\150\u0129\151\u0141\152\u0145" +
    "\154\u015f\155\u015e\156\u0139\157\u0159\160\u0119\161\u0128\163" +
    "\u0142\164\u0143\165\u010d\166\u0126\167\u013a\170\u011e\171\u014a" +
    "\172\u013b\173\u0117\174\u0111\175\u0118\176\u0158\177\u012b\200" +
    "\u0153\201\u0124\202\u0146\203\u011d\204\u0109\205\u0134\264\u0122" +
    "\265\u0106\266\u0132\u0100\u0121\u0101\u0148\u0102\u012f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\153\u0166\001\001\000\002\001\001\000" +
    "\106\066\120\067\070\076\u0164\103\111\104\134\105\125" +
    "\106\126\107\105\110\073\111\066\112\071\113\112\114" +
    "\101\115\135\117\106\120\103\121\132\122\076\123\127" +
    "\124\122\125\100\126\117\127\063\130\131\131\077\132" +
    "\121\133\107\223\104\237\064\240\123\241\110\242\072" +
    "\250\130\373\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\354\u0179" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\066\120\067\070\103\u0181\104\134" +
    "\105\125\106\126\107\105\110\073\111\066\112\071\113" +
    "\112\114\101\115\135\117\106\120\103\121\132\122\076" +
    "\123\127\124\122\125\100\126\117\127\063\130\131\131" +
    "\077\132\121\133\107\237\064\240\123\241\110\242\072" +
    "\250\130\373\102\001\001\000\002\001\001\000\116\141" +
    "\u0151\142\u0149\143\u0155\144\u0135\145\u0123\146\u0113\147\u0125" +
    "\150\u0129\151\u0141\152\u0145\157\u0185\160\u0119\161\u0128\163" +
    "\u0142\164\u0143\165\u010d\166\u0126\167\u013a\170\u011e\171\u014a" +
    "\172\u013b\173\u0117\174\u0111\175\u0118\176\u0158\177\u012b\200" +
    "\u0153\201\u0124\202\u0146\203\u011d\204\u0109\205\u0134\264\u0122" +
    "\265\u0106\266\u0132\u0100\u0121\u0101\u0148\u0102\u012f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\355\u0193\001\001\000\010\356\u0197" +
    "\357\u0196\360\u0198\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\110\066\120\067\070" +
    "\076\u018e\077\u019e\103\111\104\134\105\125\106\126\107" +
    "\105\110\073\111\066\112\071\113\112\114\101\115\135" +
    "\117\106\120\103\121\132\122\076\123\127\124\122\125" +
    "\100\126\117\127\063\130\131\131\077\132\121\133\107" +
    "\223\104\237\064\240\123\241\110\242\072\250\130\373" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\257\u01aa\267\u01ab\270\u01a8\001\001\000\002\001" +
    "\001\000\004\271\u01d0\001\001\000\004\262\u01ad\001\001" +
    "\000\002\001\001\000\040\100\u01be\163\u01b5\164\u0143\165" +
    "\u010d\166\u0126\261\u01ba\263\u01bd\276\u01bb\303\u01b8\304\u01b4" +
    "\375\u01bc\u0100\u0121\u0101\u0148\u0102\u012f\u0103\u01b9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\361\u01c9\362" +
    "\u01ca\363\u01cb\001\001\000\002\001\001\000\034\100\u01be" +
    "\163\u01b5\164\u0143\165\u010d\166\u0126\263\u01bd\303\u01b8\304" +
    "\u01c3\375\u01bc\u0100\u0121\u0101\u0148\u0102\u012f\u0103\u01b9\001\001" +
    "\000\106\066\120\067\070\076\u01c1\103\111\104\134\105" +
    "\125\106\126\107\105\110\073\111\066\112\071\113\112" +
    "\114\101\115\135\117\106\120\103\121\132\122\076\123" +
    "\127\124\122\125\100\126\117\127\063\130\131\131\077" +
    "\132\121\133\107\223\104\237\064\240\123\241\110\242" +
    "\072\250\130\373\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\377\u01c7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\377\u01d1\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\377\u01d3\001\001\000\004\260" +
    "\u01d5\001\001\000\020\100\u01be\274\u01e0\275\u01e4\301\u01e2" +
    "\302\u01e6\303\u01e5\375\u01bc\001\001\000\002\001\001\000" +
    "\020\100\u01be\272\u01d7\273\u01dc\277\u01dd\300\u01d8\303\u01db" +
    "\375\u01bc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\100\u01be\277\u01de\300\u01d8\303\u01db\375\u01bc\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\100\u01be\301\u01e7\302\u01e6\303\u01e5\375\u01bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\271\u01ea\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\344\u01f9\001\001\000\002\001\001\000" +
    "\010\345\u01fd\346\u01fb\347\u01fc\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\066" +
    "\120\067\070\127\u0206\130\131\131\077\132\121\133\107" +
    "\373\102\001\001\000\002\001\001\000\006\055\u0208\056" +
    "\320\001\001\000\002\001\001\000\102\066\120\067\070" +
    "\103\u020a\104\134\105\125\106\126\107\105\110\073\111" +
    "\066\112\071\113\112\114\101\115\135\117\106\120\103" +
    "\121\132\122\076\123\127\124\122\125\100\126\117\127" +
    "\063\130\131\131\077\132\121\133\107\237\064\240\123" +
    "\241\110\242\072\250\130\373\102\001\001\000\006\245" +
    "\u020d\246\u020b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\055\u0210\056" +
    "\320\001\001\000\002\001\001\000\102\066\120\067\070" +
    "\103\u0212\104\134\105\125\106\126\107\105\110\073\111" +
    "\066\112\071\113\112\114\101\115\135\117\106\120\103" +
    "\121\132\122\076\123\127\124\122\125\100\126\117\127" +
    "\063\130\131\131\077\132\121\133\107\237\064\240\123" +
    "\241\110\242\072\250\130\373\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\055\u0216" +
    "\056\320\001\001\000\002\001\001\000\102\066\120\067" +
    "\070\103\u0218\104\134\105\125\106\126\107\105\110\073" +
    "\111\066\112\071\113\112\114\101\115\135\117\106\120" +
    "\103\121\132\122\076\123\127\124\122\125\100\126\117" +
    "\127\063\130\131\131\077\132\121\133\107\237\064\240" +
    "\123\241\110\242\072\250\130\373\102\001\001\000\002" +
    "\001\001\000\046\066\120\067\070\114\u021a\115\135\117" +
    "\106\120\103\121\132\122\076\123\127\124\122\125\100" +
    "\126\117\127\063\130\131\131\077\132\121\133\107\373" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\063\u021d\305\377\001\001\000\002\001\001\000\042\066" +
    "\120\067\070\117\u0220\120\103\121\132\122\076\123\127" +
    "\124\122\125\100\126\117\127\063\130\131\131\077\132" +
    "\121\133\107\373\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\066\120\067\070\121" +
    "\u0224\122\076\123\127\124\122\125\100\126\117\127\063" +
    "\130\131\131\077\132\121\133\107\373\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\057\u0227\305\234\306\174\310\221\311\210\312\215\313" +
    "\203\314\241\315\170\316\205\317\222\320\166\321\206" +
    "\u0104\231\u0105\235\u0106\177\u0107\173\u0108\236\u0109\224\u010a" +
    "\213\u010b\227\u010c\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\066" +
    "\120\067\070\123\u022d\124\122\125\100\126\117\127\063" +
    "\130\131\131\077\132\121\133\107\373\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\102\066\120\067\070\103\u0231\104\134\105" +
    "\125\106\126\107\105\110\073\111\066\112\071\113\112" +
    "\114\101\115\135\117\106\120\103\121\132\122\076\123" +
    "\127\124\122\125\100\126\117\127\063\130\131\131\077" +
    "\132\121\133\107\237\064\240\123\241\110\242\072\250" +
    "\130\373\102\001\001\000\002\001\001\000\102\066\120" +
    "\067\070\103\u0233\104\134\105\125\106\126\107\105\110" +
    "\073\111\066\112\071\113\112\114\101\115\135\117\106" +
    "\120\103\121\132\122\076\123\127\124\122\125\100\126" +
    "\117\127\063\130\131\131\077\132\121\133\107\237\064" +
    "\240\123\241\110\242\072\250\130\373\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\055\u0236\056\320" +
    "\001\001\000\006\332\u0239\333\u0238\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\102\066\120" +
    "\067\070\103\u023b\104\134\105\125\106\126\107\105\110" +
    "\073\111\066\112\071\113\112\114\101\115\135\117\106" +
    "\120\103\121\132\122\076\123\127\124\122\125\100\126" +
    "\117\127\063\130\131\131\077\132\121\133\107\237\064" +
    "\240\123\241\110\242\072\250\130\373\102\001\001\000" +
    "\006\243\u023d\244\u023e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\u0242\056\320\001\001\000\006\332\u0243" +
    "\333\u0238\001\001\000\002\001\001\000\102\066\120\067" +
    "\070\103\u0245\104\134\105\125\106\126\107\105\110\073" +
    "\111\066\112\071\113\112\114\101\115\135\117\106\120" +
    "\103\121\132\122\076\123\127\124\122\125\100\126\117" +
    "\127\063\130\131\131\077\132\121\133\107\237\064\240" +
    "\123\241\110\242\072\250\130\373\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\055\u0248\056\320\001" +
    "\001\000\006\332\u0249\333\u0238\001\001\000\002\001\001" +
    "\000\102\066\120\067\070\103\u024b\104\134\105\125\106" +
    "\126\107\105\110\073\111\066\112\071\113\112\114\101" +
    "\115\135\117\106\120\103\121\132\122\076\123\127\124" +
    "\122\125\100\126\117\127\063\130\131\131\077\132\121" +
    "\133\107\237\064\240\123\241\110\242\072\250\130\373" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\066\120\067\070\112\u024f\113\112\114" +
    "\101\115\135\117\106\120\103\121\132\122\076\123\127" +
    "\124\122\125\100\126\117\127\063\130\131\131\077\132" +
    "\121\133\107\373\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\227\u0258\230\u0255\371" +
    "\u0257\001\001\000\102\066\120\067\070\103\u0254\104\134" +
    "\105\125\106\126\107\105\110\073\111\066\112\071\113" +
    "\112\114\101\115\135\117\106\120\103\121\132\122\076" +
    "\123\127\124\122\125\100\126\117\127\063\130\131\131" +
    "\077\132\121\133\107\237\064\240\123\241\110\242\072" +
    "\250\130\373\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\110\066\120\067\070\103\u025e" +
    "\104\134\105\125\106\126\107\105\110\073\111\066\112" +
    "\071\113\112\114\101\115\135\117\106\120\103\121\132" +
    "\122\076\123\127\124\122\125\100\126\117\127\063\130" +
    "\131\131\077\132\121\133\107\231\u025c\232\u025d\233\u025f" +
    "\237\064\240\123\241\110\242\072\250\130\373\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\102\066\120" +
    "\067\070\103\u025b\104\134\105\125\106\126\107\105\110" +
    "\073\111\066\112\071\113\112\114\101\115\135\117\106" +
    "\120\103\121\132\122\076\123\127\124\122\125\100\126" +
    "\117\127\063\130\131\131\077\132\121\133\107\237\064" +
    "\240\123\241\110\242\072\250\130\373\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\234\u0262\235\u0260\247\u0263\001\001\000\002\001\001\000" +
    "\006\050\u0267\051\u0265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\334" +
    "\u026a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\066\120\067\070\103\u025e\104\134\105\125" +
    "\106\126\107\105\110\073\111\066\112\071\113\112\114" +
    "\101\115\135\117\106\120\103\121\132\122\076\123\127" +
    "\124\122\125\100\126\117\127\063\130\131\131\077\132" +
    "\121\133\107\233\u026d\237\064\240\123\241\110\242\072" +
    "\250\130\373\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\374\u0281" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\u027d\025\u026f\026\u0274\027\u0270\001\001" +
    "\000\002\001\001\000\006\055\u0278\056\320\001\001\000" +
    "\004\054\u027b\001\001\000\102\066\120\067\070\103\u027c" +
    "\104\134\105\125\106\126\107\105\110\073\111\066\112" +
    "\071\113\112\114\101\115\135\117\106\120\103\121\132" +
    "\122\076\123\127\124\122\125\100\126\117\127\063\130" +
    "\131\131\077\132\121\133\107\237\064\240\123\241\110" +
    "\242\072\250\130\373\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\374\u027e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\070\u0283\071\u0285\072\u0287\073\u0286" +
    "\001\001\000\004\062\u028d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\u0289\001\001\000\002\001\001\000\006\055\u028b\056" +
    "\320\001\001\000\002\001\001\000\056\057\u0292\305\234" +
    "\306\174\310\221\311\210\312\215\313\203\314\241\315" +
    "\170\316\205\317\222\320\166\321\206\u0104\231\u0105\235" +
    "\u0106\177\u0107\173\u0108\236\u0109\224\u010a\213\u010b\227\u010c" +
    "\226\001\001\000\010\074\u028f\100\u0290\375\u01bc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\u0298\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\u029f\001\001\000\006\042\u02a0\043\u02a2\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\374" +
    "\u02b0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\374" +
    "\u02b6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\u02bf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\331\u02c4\001\001\000\002\001\001\000\004" +
    "\374\u02c5\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XQParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$XQParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XQParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private boolean failed = false; 
    
    private String failMsg = "";
    
    private int errLine = -1;
    
    private int errColumn = -1;
    
    public ModuleNode getModuleNode() {
        return action_obj.getModuleNode();
    }
    
    public String getFailMsg() {
        return failMsg;
    }
       
    public boolean parsingFailed() {
        return failed;
    }      
    
    public int getErrorLine() {
        return errLine;  
    }
    
    public int getErrorColumn() {
        return errColumn;  
    }
      
    @Override
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                errLine = s.left + 1;
            }
            if (s.right >= 0) {
                errColumn = s.right + 1;
            }
        }
        m.append(" : "+message);
        if (!failMsg.isEmpty()) {
            failMsg += " > " + m.toString();
        } else {
          failMsg = m.toString();
        }
        failed = true;
    }
   
    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$XQParser$actions {



    private ModuleNode moduleNode;
    
    public ModuleNode getModuleNode() {
      return moduleNode;
    }   

    private void log(String msg) {
        System.out.println(msg);
    }

    private String extractName(String value, int beginCount, int endCount) {
        return value.substring(beginCount, value.length() - endCount).trim();
    }

    // gets QName from -{QName} {OS} "("-   
    private String extractQNameFromQNameLpar(String value) {
        return value.substring(0, value.length() - 1).trim();
    }
    
    // gets URI Literal from -"at" {OS} {URILiteral}-
    private String extractURILiteralFromAtURILiteral(String value) {
        return new StringLiteral(value.substring(2, 
            value.length()).trim()).getValue();
    }
    
    // gets NCName from -"processing-instruction" {RS} {NCName} {OS} "{"-
    private String extractNCNameFromPINCNameLbrace(String value) {
        return value.substring(22, value.length() - 1).trim();
    }
    
    // gets NCName from -"attribute" {RS} {QName} {OS} "{"-
    private String extractQNameFromAttributeQNameLbrace(String value) {
        return extractName(value, 9, 1);
    }

    // gets QName from -"element" {RS} {QName} {OS} "{"-
    private String extractQNameFromElementQNameLbrace(String value) {
        return extractName(value, 7, 1);
    }
          
    private ValidationMode extractValidationMode(String value) {
        for (ValidationMode mode : ValidationMode.values()) {
            if (value.endsWith(mode.toString())) {
                return mode;
            }
        }
        assert(false);
        return null;
    }
    
    private ConstructionMode getContructionMode(String value) {
        for (ConstructionMode mode : ConstructionMode.values()) {
            if (value.equals(mode.toString())) {
                return mode;
            }
        }
        assert(false);
        return null;
    }
 

  private final XQParser parser;

  /** Constructor */
  CUP$XQParser$actions(XQParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$XQParser$do_action(
    int                        CUP$XQParser$act_num,
    java_cup.runtime.lr_parser CUP$XQParser$parser,
    java.util.Stack            CUP$XQParser$stack,
    int                        CUP$XQParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$XQParser$result;

      /* select the action based on the action number */
      switch (CUP$XQParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // TypeName ::= TOK_QNameForItemType 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = q; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("TypeName",222, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // ElementName ::= TOK_QNameForItemType 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = q; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementName",223, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // AttributeName ::= TOK_QNameForItemType 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = q; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttributeName",224, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // ElementDeclaration ::= ElementName 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementDeclaration",225, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // SchemaElementType_choice ::= TOK_SchemaElementTypeForDocumentTest 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaElementType_choice",266, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // SchemaElementType_choice ::= TOK_SchemaElementTypeForKindTest 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaElementType_choice",266, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // SchemaElementType_choice ::= TOK_SchemaElementType 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaElementType_choice",266, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // SchemaElementTest ::= SchemaElementType_choice ElementDeclaration TOK_RparForKindTest 
            {
              KindTestNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new KindTestNode(NodeKind.SCHEMA_ELEMENT, e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaElementTest",202, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // ElementNameOrWildcard ::= TOK_AnyName 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = a; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementNameOrWildcard",246, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // ElementNameOrWildcard ::= ElementName 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementNameOrWildcard",246, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // Nillable_opt ::= TOK_Nillable 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Nillable_opt",248, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // Nillable_opt ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Nillable_opt",248, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // ElementTestSuffix_opt ::= TOK_CommaForKindTest TypeName Nillable_opt 
            {
              NillableTypeName RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new NillableTypeName(t, n); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementTestSuffix_opt",214, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // ElementTestSuffix_opt ::= 
            {
              NillableTypeName RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementTestSuffix_opt",214, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // ElementTest_opt ::= ElementNameOrWildcard ElementTestSuffix_opt 
            {
              KindTestSuffix RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		NillableTypeName t = (NillableTypeName)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new KindTestSuffix(e, t); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementTest_opt",213, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // ElementTest_opt ::= 
            {
              KindTestSuffix RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementTest_opt",213, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // ElementType_choice ::= TOK_ElementTypeForDocumentTest 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementType_choice",265, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // ElementType_choice ::= TOK_ElementTypeForKindTest 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementType_choice",265, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // ElementType_choice ::= TOK_ElementType 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementType_choice",265, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // ElementTest ::= ElementType_choice ElementTest_opt TOK_RparForKindTest 
            {
              KindTestNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		KindTestSuffix t = (KindTestSuffix)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new KindTestNode(NodeKind.ELEMENT, t); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementTest",200, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // AttributeDeclaration ::= AttributeName 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = a; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttributeDeclaration",245, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // SchemaAttributeType_choice ::= TOK_SchemaAttributeTypeForKindTest 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaAttributeType_choice",264, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // SchemaAttributeType_choice ::= TOK_SchemaAttributeType 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaAttributeType_choice",264, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // SchemaAttributeTest ::= SchemaAttributeType_choice AttributeDeclaration TOK_RparForKindTest 
            {
              KindTestNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new KindTestNode(NodeKind.SCHEMA_ATTRIBUTE, a); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaAttributeTest",203, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // AttribNameOrWildcard ::= TOK_AnyName 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = a; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttribNameOrWildcard",243, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // AttribNameOrWildcard ::= AttributeName 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = a; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttribNameOrWildcard",243, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // AttributeTestSuffix_opt ::= TOK_CommaForKindTest TypeName 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = t; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttributeTestSuffix_opt",244, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // AttributeTestSuffix_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttributeTestSuffix_opt",244, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // AttributeTest_opt ::= AttribNameOrWildcard AttributeTestSuffix_opt 
            {
              KindTestSuffix RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new KindTestSuffix(a, s); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttributeTest_opt",212, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // AttributeTest_opt ::= 
            {
              KindTestSuffix RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttributeTest_opt",212, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // AttributeType_choice ::= TOK_AttributeTypeForKindTest 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttributeType_choice",263, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // AttributeType_choice ::= TOK_AttributeType 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttributeType_choice",263, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // AttributeTest ::= AttributeType_choice AttributeTest_opt TOK_RparForKindTest 
            {
              KindTestNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		KindTestSuffix t = (KindTestSuffix)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new KindTestNode(NodeKind.ATTRIBUTE, t); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttributeTest",201, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // ProcessingInstruction_choice_opt ::= TOK_StringLiteralForKindTest 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ProcessingInstruction_choice_opt",242, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // ProcessingInstruction_choice_opt ::= TOK_NCNameForPI 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = n; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ProcessingInstruction_choice_opt",242, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // ProcessingInstruction_choice_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ProcessingInstruction_choice_opt",242, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // ProcessingInstructionLpar_choice ::= TOK_ProcessingInstructionLparForKindTest 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ProcessingInstructionLpar_choice",262, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // ProcessingInstructionLpar_choice ::= TOK_ProcessingInstructionLpar 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ProcessingInstructionLpar_choice",262, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // PITest ::= ProcessingInstructionLpar_choice ProcessingInstruction_choice_opt TOK_RparForKindTest 
            {
              KindTestNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new KindTestNode(NodeKind.PROCESSING_INSTRUCTION, p); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PITest",204, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // CommentLpar_choice ::= TOK_CommentLparForKindTest 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommentLpar_choice",261, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // CommentLpar_choice ::= TOK_CommentLpar 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommentLpar_choice",261, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // CommentTest ::= CommentLpar_choice TOK_RparForKindTest 
            {
              KindTestNode RESULT =null;
		 RESULT = new KindTestNode(NodeKind.COMMENT); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommentTest",205, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // TextLpar_choice ::= TOK_TextLparForKindTest 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("TextLpar_choice",260, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // TextLpar_choice ::= TOK_TextLpar 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("TextLpar_choice",260, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // TextTest ::= TextLpar_choice TOK_RparForKindTest 
            {
              KindTestNode RESULT =null;
		 RESULT = new KindTestNode(NodeKind.TEXT); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("TextTest",206, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // ElementTest_choice_opt ::= SchemaElementTest 
            {
              KindTestNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode s = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementTest_choice_opt",208, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // ElementTest_choice_opt ::= ElementTest 
            {
              KindTestNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode e = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementTest_choice_opt",208, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // ElementTest_choice_opt ::= 
            {
              KindTestNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementTest_choice_opt",208, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // DocumentLpar_choice ::= TOK_DocumentLparForKindTest 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DocumentLpar_choice",259, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // DocumentLpar_choice ::= TOK_DocumentLpar 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DocumentLpar_choice",259, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // DocumentTest ::= DocumentLpar_choice ElementTest_choice_opt TOK_RparForKindTest 
            {
              KindTestNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		KindTestNode e = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new KindTestNode(NodeKind.DOCUMENT, e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DocumentTest",199, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // NodeLpar_choice ::= TOK_NodeLparForKindTest 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NodeLpar_choice",258, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // NodeLpar_choice ::= TOK_NodeLpar 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NodeLpar_choice",258, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // AnyKindTest ::= NodeLpar_choice TOK_RparForKindTest 
            {
              KindTestNode RESULT =null;
		 RESULT = new KindTestNode(NodeKind.ANY_KIND); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AnyKindTest",207, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // KindTest ::= AnyKindTest 
            {
              KindTestNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode t = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = t; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("KindTest",198, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // KindTest ::= TextTest 
            {
              KindTestNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode t = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = t; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("KindTest",198, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // KindTest ::= CommentTest 
            {
              KindTestNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode t = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = t; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("KindTest",198, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // KindTest ::= PITest 
            {
              KindTestNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode t = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = t; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("KindTest",198, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // KindTest ::= SchemaAttributeTest 
            {
              KindTestNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode t = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = t; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("KindTest",198, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // KindTest ::= SchemaElementTest 
            {
              KindTestNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode t = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = t; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("KindTest",198, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // KindTest ::= AttributeTest 
            {
              KindTestNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode t = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = t; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("KindTest",198, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // KindTest ::= ElementTest 
            {
              KindTestNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode t = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = t; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("KindTest",198, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // KindTest ::= DocumentTest 
            {
              KindTestNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode t = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = t; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("KindTest",198, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // AtomicType ::= TOK_QNameForSequenceType 
            {
              AtomicTypeNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new AtomicTypeNode(q); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AtomicType",195, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // AtomicType ::= TOK_QNameForAtomicType 
            {
              AtomicTypeNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new AtomicTypeNode(q); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AtomicType",195, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // ItemType ::= AtomicType 
            {
              ItemTypeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		AtomicTypeNode a = (AtomicTypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = a; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ItemType",196, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // ItemType ::= TOK_Item 
            {
              ItemTypeNode RESULT =null;
		 RESULT = new AnyItemNode(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ItemType",196, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // ItemType ::= KindTest 
            {
              ItemTypeNode RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode k = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = k; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ItemType",196, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // OccurrenceIndicator ::= TOK_OccurrenceOneOrMore 
            {
              Cardinality RESULT =null;
		 RESULT = Cardinality.ONE_OR_MORE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OccurrenceIndicator",211, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // OccurrenceIndicator ::= TOK_OccurrenceZeroOrMore 
            {
              Cardinality RESULT =null;
		 RESULT = Cardinality.ZERO_OR_MORE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OccurrenceIndicator",211, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // OccurrenceIndicator ::= TOK_OccurrenceZeroOrOne 
            {
              Cardinality RESULT =null;
		 RESULT = Cardinality.ZERO_OR_ONE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OccurrenceIndicator",211, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // OccurrenceIndicator_opt ::= OccurrenceIndicator 
            {
              Cardinality RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Cardinality o = (Cardinality)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = o; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OccurrenceIndicator_opt",210, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // OccurrenceIndicator_opt ::= 
            {
              Cardinality RESULT =null;
		 RESULT = Cardinality.ONE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OccurrenceIndicator_opt",210, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // SequenceType ::= ItemType OccurrenceIndicator_opt 
            {
              TypeNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ItemTypeNode i = (ItemTypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Cardinality o = (Cardinality)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new TypeNode(o, i); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SequenceType",45, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // SequenceType ::= TOK_EmptySequence 
            {
              TypeNode RESULT =null;
		 RESULT = new TypeNode(Cardinality.ZERO); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SequenceType",45, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // TypeDeclaration ::= TOK_As SequenceType 
            {
              TypeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode s = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",44, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // OccurrenceZeroOrOne_opt ::= TOK_OccurrenceZeroOrOne 
            {
              Cardinality RESULT =null;
		 RESULT = Cardinality.ZERO_OR_ONE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OccurrenceZeroOrOne_opt",209, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // OccurrenceZeroOrOne_opt ::= 
            {
              Cardinality RESULT =null;
		 RESULT = Cardinality.ONE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OccurrenceZeroOrOne_opt",209, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // SingleType ::= AtomicType OccurrenceZeroOrOne_opt 
            {
              TypeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		AtomicTypeNode a = (AtomicTypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Cardinality o = (Cardinality)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new TypeNode(o, a); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SingleType",49, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // PILbrace_choice ::= TOK_PILbrace Expr TOK_Rbrace TOK_LbraceExprEnclosure 
            {
              PITargetNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		 RESULT = new PITargetNode(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PILbrace_choice",180, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // PILbrace_choice ::= TOK_PINCNameLbrace 
            {
              PITargetNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new PITargetNode(extractNCNameFromPINCNameLbrace(n)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PILbrace_choice",180, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // CompPIConstructor ::= PILbrace_choice Expr_opt TOK_Rbrace 
            {
              ConstructorNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		PITargetNode p = (PITargetNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ConstructorNode(ConstructorKind.COMPUTED, ConstructorType.PROCESSING_INSTRUCTION, p, new ContentNode(e)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CompPIConstructor",123, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // CompCommentConstructor ::= TOK_CommentLbrace Expr TOK_Rbrace 
            {
              ConstructorNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ConstructorNode(ConstructorKind.COMPUTED, ConstructorType.COMMENT, new ContentNode(e)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CompCommentConstructor",122, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // CompTextConstructor ::= TOK_TextLbrace Expr TOK_Rbrace 
            {
              ConstructorNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ConstructorNode(ConstructorKind.COMPUTED, ConstructorType.TEXT, new ContentNode(e)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CompTextConstructor",121, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // AttributeLbrace_choice ::= TOK_AttributeLbrace Expr TOK_Rbrace TOK_LbraceExprEnclosure 
            {
              NameNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		 RESULT = new NameNode(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttributeLbrace_choice",179, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // AttributeLbrace_choice ::= TOK_AttributeQNameLbrace 
            {
              NameNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new NameNode(
               extractQNameFromAttributeQNameLbrace(q)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttributeLbrace_choice",179, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // CompAttrConstructor ::= AttributeLbrace_choice Expr_opt TOK_Rbrace 
            {
              ConstructorNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		NameNode a = (NameNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ConstructorNode(ConstructorKind.COMPUTED, ConstructorType.ATTRIBUTE, a, new ContentNode(e)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CompAttrConstructor",120, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // ContentExpr ::= Expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ContentExpr",64, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // ContentExpr_opt ::= ContentExpr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ContentExpr_opt",63, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // ContentExpr_opt ::= 
            {
              ExprNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ContentExpr_opt",63, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // ElementLbrace_choice ::= TOK_ElementLbrace Expr TOK_Rbrace TOK_LbraceExprEnclosure 
            {
              NameNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		 RESULT = new NameNode(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementLbrace_choice",178, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // ElementLbrace_choice ::= TOK_ElementQNameLbrace 
            {
              NameNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new NameNode(
               extractQNameFromElementQNameLbrace(e)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ElementLbrace_choice",178, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // CompElemConstructor ::= ElementLbrace_choice ContentExpr_opt TOK_Rbrace 
            {
              ConstructorNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		NameNode e = (NameNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ConstructorNode(ConstructorKind.COMPUTED, ConstructorType.ELEMENT, e , new ContentNode(c)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CompElemConstructor",119, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // CompDocConstructor ::= TOK_DocumentLbrace Expr TOK_Rbrace 
            {
              ConstructorNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ConstructorNode(ConstructorKind.COMPUTED, ConstructorType.DOCUMENT, new ContentNode(e)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CompDocConstructor",118, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // ComputedConstructor ::= CompPIConstructor 
            {
              ConstructorNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode c = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ComputedConstructor",117, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // ComputedConstructor ::= CompCommentConstructor 
            {
              ConstructorNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode c = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ComputedConstructor",117, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // ComputedConstructor ::= CompTextConstructor 
            {
              ConstructorNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode c = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ComputedConstructor",117, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // ComputedConstructor ::= CompAttrConstructor 
            {
              ConstructorNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode c = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ComputedConstructor",117, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // ComputedConstructor ::= CompElemConstructor 
            {
              ConstructorNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode c = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ComputedConstructor",117, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // ComputedConstructor ::= CompDocConstructor 
            {
              ConstructorNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode c = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ComputedConstructor",117, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // CDataSectionChar_list ::= CDataSectionChar_list TOK_CDataSectionChar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l + c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CDataSectionChar_list",241, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // CDataSectionChar_list ::= TOK_CDataSectionChar 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CDataSectionChar_list",241, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // CDataSectionChar_list_opt ::= CDataSectionChar_list 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CDataSectionChar_list_opt",240, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // CDataSectionChar_list_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CDataSectionChar_list_opt",240, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // CDataSectionContents ::= CDataSectionChar_list_opt 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CDataSectionContents",239, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // CdataSectionStart_choice ::= TOK_CdataSectionStart 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CdataSectionStart_choice",257, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // CdataSectionStart_choice ::= TOK_CdataSectionStartForElementContent 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CdataSectionStart_choice",257, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // CDataSection ::= CdataSectionStart_choice CDataSectionContents TOK_CdataSectionEnd 
            {
              CDataSectionNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new CDataSectionNode(c); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CDataSection",177, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // PIContentChar_list ::= PIContentChar_list TOK_PIContentChar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l + c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PIContentChar_list",238, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // PIContentChar_list ::= TOK_PIContentChar 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PIContentChar_list",238, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // PIContentChar_list_opt ::= PIContentChar_list 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PIContentChar_list_opt",237, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // PIContentChar_list_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PIContentChar_list_opt",237, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // DirPIContents ::= PIContentChar_list_opt 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirPIContents",236, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // DirPIContents_opt ::= TOK_SForPI DirPIContents 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirPIContents_opt",235, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // DirPIContents_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirPIContents_opt",235, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // ProcessingInstructionStart_choice ::= TOK_ProcessingInstructionStart 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ProcessingInstructionStart_choice",256, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // ProcessingInstructionStart_choice ::= TOK_ProcessingInstructionStartForElementContent 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ProcessingInstructionStart_choice",256, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // DirPIConstructor ::= ProcessingInstructionStart_choice TOK_PITarget DirPIContents_opt TOK_ProcessingInstructionEnd 
            {
              ConstructorNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ConstructorNode(ConstructorKind.DIRECT, ConstructorType.PROCESSING_INSTRUCTION, new PITargetNode(t), new ContentNode(c)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirPIConstructor",116, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // CommentContentChar_choice ::= TOK_CommentContentCharDash 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommentContentChar_choice",234, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // CommentContentChar_choice ::= TOK_CommentContentChar 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommentContentChar_choice",234, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // CommentContentChar_list ::= CommentContentChar_list CommentContentChar_choice 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l + c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommentContentChar_list",233, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // CommentContentChar_list ::= CommentContentChar_choice 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommentContentChar_list",233, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // CommentContentChar_list_opt ::= CommentContentChar_list 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommentContentChar_list_opt",232, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // CommentContentChar_list_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommentContentChar_list_opt",232, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // DirCommentContents ::= CommentContentChar_list_opt 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirCommentContents",231, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // XmlCommentStart_choice ::= TOK_XmlCommentStart 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("XmlCommentStart_choice",255, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // XmlCommentStart_choice ::= TOK_XmlCommentStartForElementContent 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("XmlCommentStart_choice",255, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // DirCommentConstructor ::= XmlCommentStart_choice DirCommentContents TOK_XmlCommentEnd 
            {
              ConstructorNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ConstructorNode(ConstructorKind.DIRECT, ConstructorType.COMMENT, new ContentNode(d)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirCommentConstructor",115, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // CommonContent ::= EnclosedExpr 
            {
              ContentItem RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new NodeContentItem(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommonContent",193, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // CommonContent ::= TOK_RCurlyBraceEscape 
            {
              ContentItem RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new EscapeContentItem(EscapeItem.RIGHT_CURLY_BRACE); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommonContent",193, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // CommonContent ::= TOK_LCurlyBraceEscape 
            {
              ContentItem RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new EscapeContentItem(EscapeItem.LEFT_CURLY_BRACE); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommonContent",193, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // CommonContent ::= TOK_CharRef 
            {
              ContentItem RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new CharRefContentItem(c); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommonContent",193, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // CommonContent ::= TOK_PredefinedEntityRef 
            {
              ContentItem RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new EntityRefContentItem(p); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommonContent",193, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // DirElemContent ::= TOK_ElementContentChar 
            {
              ContentItem RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new CharContentItem(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirElemContent",194, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // DirElemContent ::= CommonContent 
            {
              ContentItem RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentItem c = (ContentItem)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirElemContent",194, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // DirElemContent ::= CDataSection 
            {
              ContentItem RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		CDataSectionNode c = (CDataSectionNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new NodeContentItem(c); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirElemContent",194, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // DirElemContent ::= DirectConstructor 
            {
              ContentItem RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode d = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new NodeContentItem(d); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirElemContent",194, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // AposAttrValueContent ::= CommonContent 
            {
              ContentItem RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentItem c = (ContentItem)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AposAttrValueContent",192, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // AposAttrValueContent ::= TOK_AposAttrContentChar 
            {
              ContentItem RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new CharContentItem(a); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AposAttrValueContent",192, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // QuotAttrValueContent ::= CommonContent 
            {
              ContentItem RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentItem c = (ContentItem)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("QuotAttrValueContent",190, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // QuotAttrValueContent ::= TOK_QuotAttrContentChar 
            {
              ContentItem RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new CharContentItem(q); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("QuotAttrValueContent",190, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // AttrContentApos_choice ::= AposAttrValueContent 
            {
              ContentItem RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentItem a = (ContentItem)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = a; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentApos_choice",191, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // AttrContentApos_choice ::= TOK_EscapeApos 
            {
              ContentItem RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new EscapeContentItem(EscapeItem.APOSTROPHE); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentApos_choice",191, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // AttrContentApos_list ::= AttrContentApos_list AttrContentApos_choice 
            {
              Content RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		Content l = (Content)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentItem a = (ContentItem)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(a); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentApos_list",187, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // AttrContentApos_list ::= AttrContentApos_choice 
            {
              Content RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentItem a = (ContentItem)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new Content(a); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentApos_list",187, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // AttrContentApos_list_opt ::= AttrContentApos_list 
            {
              Content RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Content l = (Content)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentApos_list_opt",186, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // AttrContentApos_list_opt ::= 
            {
              Content RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentApos_list_opt",186, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // AttrContentQuot_choice ::= QuotAttrValueContent 
            {
              ContentItem RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentItem q = (ContentItem)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = q; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentQuot_choice",189, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // AttrContentQuot_choice ::= TOK_EscapeQuot 
            {
              ContentItem RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new EscapeContentItem(EscapeItem.QUOTATION_MARK); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentQuot_choice",189, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // AttrContentQuot_list ::= AttrContentQuot_list AttrContentQuot_choice 
            {
              Content RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		Content l = (Content)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentItem a = (ContentItem)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(a); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentQuot_list",185, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // AttrContentQuot_list ::= AttrContentQuot_choice 
            {
              Content RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentItem a = (ContentItem)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new Content(a); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentQuot_list",185, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // AttrContentQuot_list_opt ::= AttrContentQuot_list 
            {
              Content RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Content l = (Content)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentQuot_list_opt",184, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // AttrContentQuot_list_opt ::= 
            {
              Content RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AttrContentQuot_list_opt",184, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // DirAttributeValue ::= TOK_OpenApos AttrContentApos_list_opt TOK_CloseApos 
            {
              ContentNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		Content a = (Content)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ContentNode(a); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirAttributeValue",174, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // DirAttributeValue ::= TOK_OpenQuot AttrContentQuot_list_opt TOK_CloseQuot 
            {
              ContentNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		Content a = (Content)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ContentNode(a); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirAttributeValue",174, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // DirAttributeValue_opt ::= TOK_TagQName S_opt TOK_ValueIndicator S_opt DirAttributeValue 
            {
              AttributeNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentNode d = (ContentNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new AttributeNode(new NameNode(q), d); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirAttributeValue_opt",183, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // DirAttributeValue_opt ::= 
            {
              AttributeNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirAttributeValue_opt",183, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // DirAttributeValue_list ::= DirAttributeValue_list TOK_S DirAttributeValue_opt 
            {
              XQNodeList<AttributeNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		XQNodeList<AttributeNode> l = (XQNodeList<AttributeNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		AttributeNode d = (AttributeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(d); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirAttributeValue_list",182, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // DirAttributeValue_list ::= TOK_S DirAttributeValue_opt 
            {
              XQNodeList<AttributeNode> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		AttributeNode d = (AttributeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<AttributeNode>(d); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirAttributeValue_list",182, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // DirAttributeValue_list_opt ::= DirAttributeValue_list 
            {
              XQNodeList<AttributeNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<AttributeNode> l = (XQNodeList<AttributeNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirAttributeValue_list_opt",181, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // DirAttributeValue_list_opt ::= 
            {
              XQNodeList<AttributeNode> RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirAttributeValue_list_opt",181, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // DirAttributeList ::= DirAttributeValue_list_opt 
            {
              AttrListNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<AttributeNode> l = (XQNodeList<AttributeNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new AttrListNode(l); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirAttributeList",173, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // S_opt ::= TOK_S 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("S_opt",253, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // S_opt ::= 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("S_opt",253, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // DirElemContent_list ::= DirElemContent_list DirElemContent 
            {
              Content RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		Content l = (Content)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentItem d = (ContentItem)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(d); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirElemContent_list",188, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // DirElemContent_list ::= DirElemContent 
            {
              Content RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentItem d = (ContentItem)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new Content(d); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirElemContent_list",188, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // DirElemContent_list_opt ::= DirElemContent_list 
            {
              ContentNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Content l = (Content)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new ContentNode(l); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirElemContent_list_opt",175, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // DirElemContent_list_opt ::= 
            {
              ContentNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirElemContent_list_opt",175, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // StartTagClosing_choice ::= TOK_StartTagClose DirElemContent_list_opt TOK_EndTagOpen TOK_TagQName S_opt TOK_EndTagClose 
            {
              ContentNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).right;
		ContentNode l = (ContentNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("StartTagClosing_choice",176, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // StartTagClosing_choice ::= TOK_EmptyTagClose 
            {
              ContentNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("StartTagClosing_choice",176, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // StartTagOpen_choice ::= TOK_StartTagOpen 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("StartTagOpen_choice",254, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // StartTagOpen_choice ::= TOK_StartTagOpenRoot 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("StartTagOpen_choice",254, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // DirElemConstructor ::= StartTagOpen_choice TOK_TagQName DirAttributeList StartTagClosing_choice 
            {
              ConstructorNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		AttrListNode d = (AttrListNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ContentNode c = (ContentNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new ConstructorNode(ConstructorKind.DIRECT, ConstructorType.ELEMENT, new NameNode(t), d, c); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirElemConstructor",114, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // DirectConstructor ::= DirPIConstructor 
            {
              ConstructorNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode d = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = d; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirectConstructor",113, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // DirectConstructor ::= DirCommentConstructor 
            {
              ConstructorNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode d = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = d; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirectConstructor",113, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // DirectConstructor ::= DirElemConstructor 
            {
              ConstructorNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode d = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = d; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DirectConstructor",113, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // Constructor ::= ComputedConstructor 
            {
              ExprNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode c = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Constructor",103, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // Constructor ::= DirectConstructor 
            {
              ExprNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ConstructorNode d = (ConstructorNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = d; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Constructor",103, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ExprSingle_list_opt ::= ExprSingle_list 
            {
              XQNodeList<ExprNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<ExprNode> l = (XQNodeList<ExprNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ExprSingle_list_opt",146, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ExprSingle_list_opt ::= 
            {
              XQNodeList<ExprNode> RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ExprSingle_list_opt",146, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // FunctionCall ::= TOK_QNameLpar ExprSingle_list_opt TOK_Rpar 
            {
              ExprNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		XQNodeList<ExprNode> l = (XQNodeList<ExprNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new FunctionCallNode(extractQNameFromQNameLpar(q), l); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FunctionCall",100, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // UnorderedExpr ::= TOK_UnorderedOpen Expr TOK_Rbrace 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new UnorderedExprNode(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnorderedExpr",102, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // OrderedExpr ::= TOK_OrderedOpen Expr TOK_Rbrace 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new OrderedExprNode(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderedExpr",101, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ContextItemExpr ::= TOK_Dot 
            {
              ExprNode RESULT =null;
		 RESULT = new ContextItemExprNode(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ContextItemExpr",99, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // Expr_opt ::= Expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Expr_opt",61, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // Expr_opt ::= 
            {
              ExprNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Expr_opt",61, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ParenthesizedExpr ::= TOK_Lpar Expr_opt TOK_Rpar 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 if (e == null) {
               RESULT = new EmptySequenceNode();
           } else {
               RESULT = e;
           } 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ParenthesizedExpr",104, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // VarRef ::= TOK_VariableIndicator TOK_VarName 
            {
              ExprNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new VarRefNode(n); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("VarRef",98, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // NumericLiteral ::= TOK_DoubleLiteral 
            {
              ExprNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new LiteralNode(LiteralType.DOUBLE, d); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NumericLiteral",97, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // NumericLiteral ::= TOK_DecimalLiteral 
            {
              ExprNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new LiteralNode(LiteralType.DECIMAL, d); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NumericLiteral",97, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // NumericLiteral ::= TOK_IntegerLiteral 
            {
              ExprNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new LiteralNode(LiteralType.INTEGER, i); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NumericLiteral",97, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // Literal ::= TOK_StringLiteral 
            {
              ExprNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		StringLiteral s = (StringLiteral)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new LiteralNode(s); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Literal",96, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // Literal ::= NumericLiteral 
            {
              ExprNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode n = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = n; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Literal",96, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // PrimaryExpr ::= Constructor 
            {
              ExprNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",95, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // PrimaryExpr ::= UnorderedExpr 
            {
              ExprNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode u = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = u; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",95, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // PrimaryExpr ::= OrderedExpr 
            {
              ExprNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode o = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = o; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",95, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // PrimaryExpr ::= FunctionCall 
            {
              ExprNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode f = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = f; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",95, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // PrimaryExpr ::= ContextItemExpr 
            {
              ExprNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",95, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // PrimaryExpr ::= ParenthesizedExpr 
            {
              ExprNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode p = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = p; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",95, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // PrimaryExpr ::= VarRef 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode v = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = v; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",95, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // PrimaryExpr ::= Literal 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",95, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // Predicate ::= TOK_Lbrack Expr TOK_Rbrack 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Predicate",105, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // Predicate_list ::= Predicate_list Predicate 
            {
              XQNodeList<ExprNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		XQNodeList<ExprNode> l = (XQNodeList<ExprNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode p = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(p); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Predicate_list",134, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // Predicate_list ::= Predicate 
            {
              XQNodeList<ExprNode> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode p = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<ExprNode>(p); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Predicate_list",134, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // PredicateList ::= Predicate_list 
            {
              PredicateListNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<ExprNode> l = (XQNodeList<ExprNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new PredicateListNode(l); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PredicateList",133, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // PredicateList ::= 
            {
              PredicateListNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PredicateList",133, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // FilterExpr ::= PrimaryExpr PredicateList 
            {
              StepExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PredicateListNode p = (PredicateListNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new StepExprNode(e, p); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FilterExpr",111, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // Wildcard ::= TOK_StarColonNCName 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = n; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Wildcard",230, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // Wildcard ::= TOK_NCNameColonStar 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = n; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Wildcard",230, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // Wildcard ::= TOK_Star 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Wildcard",230, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NameTest ::= Wildcard 
            {
              NameTestNode RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new NameTestNode(w); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NameTest",132, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NameTest ::= TOK_QName 
            {
              NameTestNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new NameTestNode(q); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NameTest",132, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NodeTest ::= NameTest 
            {
              ItemTypeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		NameTestNode n = (NameTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = n; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NodeTest",197, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // NodeTest ::= KindTest 
            {
              ItemTypeNode RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		KindTestNode k = (KindTestNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = k; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NodeTest",197, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // AbbrevReverseStep ::= TOK_DotDot 
            {
              AxisNode RESULT =null;
		 RESULT = new AxisNode(AxisKind.PARENT, 
               new KindTestNode(NodeKind.ANY_KIND), true); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AbbrevReverseStep",128, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ReverseAxis ::= TOK_AxisAncestorOrSelf 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.ANCESTOR_OR_SELF; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ReverseAxis",130, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ReverseAxis ::= TOK_AxisPreceding 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.PRECEDING; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ReverseAxis",130, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ReverseAxis ::= TOK_AxisPrecedingSibling 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.PRECEDING_SIBLING; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ReverseAxis",130, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // ReverseAxis ::= TOK_AxisAncestor 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.ANCESTOR; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ReverseAxis",130, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // ReverseAxis ::= TOK_AxisParent 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.PARENT; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ReverseAxis",130, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ReverseStep ::= AbbrevReverseStep 
            {
              AxisNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		AxisNode a = (AxisNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = a; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ReverseStep",127, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ReverseStep ::= ReverseAxis NodeTest 
            {
              AxisNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		AxisKind r = (AxisKind)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ItemTypeNode n = (ItemTypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new AxisNode(r, n, false); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ReverseStep",127, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // At_opt ::= TOK_At 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.ATTRIBUTE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("At_opt",131, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // At_opt ::= 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.CHILD; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("At_opt",131, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // AbbrevForwardStep ::= At_opt NodeTest 
            {
              AxisNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		AxisKind a = (AxisKind)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ItemTypeNode n = (ItemTypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new AxisNode(a, n, true); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AbbrevForwardStep",126, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // ForwardAxis ::= TOK_AxisFollowing 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.FOLLOWING; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForwardAxis",129, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // ForwardAxis ::= TOK_AxisFollowingSibling 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.FOLLOWING_SIBLING; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForwardAxis",129, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ForwardAxis ::= TOK_AxisDescendantOrSelf 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.DESCENDANT_OR_SELF; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForwardAxis",129, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ForwardAxis ::= TOK_AxisSelf 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.SELF; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForwardAxis",129, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ForwardAxis ::= TOK_AxisAttribute 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.ATTRIBUTE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForwardAxis",129, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ForwardAxis ::= TOK_AxisDescendant 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.DESCENDANT; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForwardAxis",129, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ForwardAxis ::= TOK_AxisChild 
            {
              AxisKind RESULT =null;
		 RESULT = AxisKind.CHILD; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForwardAxis",129, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ForwardStep ::= AbbrevForwardStep 
            {
              AxisNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		AxisNode a = (AxisNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = a; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForwardStep",125, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // ForwardStep ::= ForwardAxis NodeTest 
            {
              AxisNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		AxisKind f = (AxisKind)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ItemTypeNode n = (ItemTypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new AxisNode(f, n, false); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForwardStep",125, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // StepDir_choice ::= ReverseStep 
            {
              AxisNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		AxisNode r = (AxisNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = r; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("StepDir_choice",124, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // StepDir_choice ::= ForwardStep 
            {
              AxisNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		AxisNode f = (AxisNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = f; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("StepDir_choice",124, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // AxisStep ::= StepDir_choice PredicateList 
            {
              StepExprNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		AxisNode s = (AxisNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PredicateListNode p = (PredicateListNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new StepExprNode(s, p); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AxisStep",110, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // StepExpr ::= FilterExpr 
            {
              StepExprNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		StepExprNode f = (StepExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = f; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("StepExpr",109, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // StepExpr ::= AxisStep 
            {
              StepExprNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		StepExprNode a = (StepExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = a; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("StepExpr",109, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Slash_choice ::= TOK_SlashSlash 
            {
              StepExprNode RESULT =null;
		 RESULT = new SelfOrDescendantStepNode(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Slash_choice",112, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Slash_choice ::= TOK_Slash 
            {
              StepExprNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Slash_choice",112, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // StepExpr_list ::= StepExpr_list Slash_choice StepExpr 
            {
              PathExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		PathExpr l = (PathExpr)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		StepExprNode s = (StepExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		StepExprNode e = (StepExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(s); 
           l.add(e);
           RESULT = l; 
      
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("StepExpr_list",108, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // StepExpr_list ::= StepExpr 
            {
              PathExpr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		StepExprNode s = (StepExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new PathExpr(s); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("StepExpr_list",108, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // RelativePathExpr ::= StepExpr_list 
            {
              PathExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PathExpr l = (PathExpr)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("RelativePathExpr",106, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // RelativePathExpr_opt ::= RelativePathExpr 
            {
              PathExpr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PathExpr r = (PathExpr)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = r; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("RelativePathExpr_opt",107, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // RelativePathExpr_opt ::= 
            {
              PathExpr RESULT =null;
		 RESULT = new PathExpr(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("RelativePathExpr_opt",107, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Root_choice ::= TOK_RootDescendants RelativePathExpr 
            {
              ExprNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PathExpr p = (PathExpr)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 p.setInitialStep(InitialStep.ROOT);
           p.insertRootDescendantStep();
           RESULT = p.getNode(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Root_choice",94, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Root_choice ::= TOK_Root RelativePathExpr_opt 
            {
              ExprNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PathExpr p = (PathExpr)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 p.setInitialStep(InitialStep.ROOT); 
           RESULT = p.getNode(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Root_choice",94, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // PathExpr ::= RelativePathExpr 
            {
              ExprNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PathExpr r = (PathExpr)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 r.setInitialStep(InitialStep.CONTEXT);
           RESULT = r.getNode(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PathExpr",92, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // PathExpr ::= Root_choice 
            {
              ExprNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = r; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PathExpr",92, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // PragmaChar_list ::= PragmaChar_list TOK_Char 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l + c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PragmaChar_list",229, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // PragmaChar_list ::= TOK_Char 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PragmaChar_list",229, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // PragmaChar_list_opt ::= PragmaChar_list 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PragmaChar_list_opt",228, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // PragmaChar_list_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PragmaChar_list_opt",228, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // PragmaContents ::= PragmaChar_list_opt 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PragmaContents",227, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // PragmaContents_opt ::= TOK_S PragmaContents 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = p; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PragmaContents_opt",226, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // PragmaContents_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PragmaContents_opt",226, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Pragma ::= TOK_PragmaStart S_opt TOK_QName PragmaContents_opt TOK_PragmaEnd 
            {
              PragmaNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new PragmaNode(q, c); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Pragma",59, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // PragmaLbrace_choice ::= TOK_LbraceExprEnclosure 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PragmaLbrace_choice",252, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // PragmaLbrace_choice ::= TOK_Lbrace 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PragmaLbrace_choice",252, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Pragma_list ::= Pragma_list Pragma 
            {
              XQNodeList<PragmaNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		XQNodeList<PragmaNode> l = (XQNodeList<PragmaNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PragmaNode p = (PragmaNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(p); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Pragma_list",136, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Pragma_list ::= Pragma 
            {
              XQNodeList<PragmaNode> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PragmaNode p = (PragmaNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<PragmaNode>(p); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Pragma_list",136, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // ExtensionExpr ::= Pragma_list PragmaLbrace_choice Expr_opt TOK_Rbrace 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		XQNodeList<PragmaNode> l = (XQNodeList<PragmaNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ExtensionExprNode(new PragmaListNode(l), 
               e == null ? null : new DefaultValueNode(e)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ExtensionExpr",93, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // ValidateLbrace_choice ::= TOK_ValidateSchemaMode TOK_LbraceExprEnclosure 
            {
              ValidationMode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = extractValidationMode(v); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValidateLbrace_choice",135, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // ValidateLbrace_choice ::= TOK_ValidateLbrace 
            {
              ValidationMode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValidateLbrace_choice",135, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // ValidateExpr ::= ValidateLbrace_choice Expr TOK_Rbrace 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ValidationMode v = (ValidationMode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ValidateExprNode(v, e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValidateExpr",91, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NodeComp ::= TOK_GtGt 
            {
              Operator RESULT =null;
		 RESULT = Operator.NOD_FOLLOWS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NodeComp",140, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // NodeComp ::= TOK_LtLt 
            {
              Operator RESULT =null;
		 RESULT = Operator.NOD_PRECEDES; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NodeComp",140, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NodeComp ::= TOK_Is 
            {
              Operator RESULT =null;
		 RESULT = Operator.NOD_IS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NodeComp",140, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // ValueComp ::= TOK_FortranGe 
            {
              Operator RESULT =null;
		 RESULT = Operator.VAL_GREATER_THAN_EQUALS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValueComp",138, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // ValueComp ::= TOK_FortranGt 
            {
              Operator RESULT =null;
		 RESULT = Operator.VAL_GREATER_THAN; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValueComp",138, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ValueComp ::= TOK_FortranLe 
            {
              Operator RESULT =null;
		 RESULT = Operator.VAL_LESS_THAN_EQUALS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValueComp",138, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // ValueComp ::= TOK_FortranLt 
            {
              Operator RESULT =null;
		 RESULT = Operator.VAL_LESS_THAN; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValueComp",138, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ValueComp ::= TOK_FortranNe 
            {
              Operator RESULT =null;
		 RESULT = Operator.VAL_NOT_EQUALS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValueComp",138, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ValueComp ::= TOK_FortranEq 
            {
              Operator RESULT =null;
		 RESULT = Operator.VAL_EQUALS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValueComp",138, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // GeneralComp ::= TOK_GtEquals 
            {
              Operator RESULT =null;
		 RESULT = Operator.GEN_GREATER_THAN_EQUALS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",139, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // GeneralComp ::= TOK_Gt 
            {
              Operator RESULT =null;
		 RESULT = Operator.GEN_GREATER_THAN; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",139, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // GeneralComp ::= TOK_LtEquals 
            {
              Operator RESULT =null;
		 RESULT = Operator.GEN_LESS_THAN_EQUALS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",139, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // GeneralComp ::= TOK_Lt 
            {
              Operator RESULT =null;
		 RESULT = Operator.GEN_LESS_THAN; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",139, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // GeneralComp ::= TOK_NotEquals 
            {
              Operator RESULT =null;
		 RESULT = Operator.GEN_NOT_EQUALS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",139, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // GeneralComp ::= TOK_Equals 
            {
              Operator RESULT =null;
		 RESULT = Operator.GEN_EQUALS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("GeneralComp",139, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // ValueExpr ::= ExtensionExpr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValueExpr",90, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ValueExpr ::= PathExpr 
            {
              ExprNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode p = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = p; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValueExpr",90, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ValueExpr ::= ValidateExpr 
            {
              ExprNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode v = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = v; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ValueExpr",90, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // UnaryOper_choice ::= TOK_UnaryPlus 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnaryOper_choice",249, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // UnaryOper_choice ::= TOK_UnaryMinus 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnaryOper_choice",249, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // UnaryOper_list ::= UnaryOper_list UnaryOper_choice 
            {
              UnaryOperator RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		UnaryOperator l = (UnaryOperator)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Boolean u = (Boolean)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(u); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnaryOper_list",53, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // UnaryOper_list ::= UnaryOper_choice 
            {
              UnaryOperator RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Boolean u = (Boolean)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new UnaryOperator(u); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnaryOper_list",53, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // UnaryOper_list_opt ::= UnaryOper_list 
            {
              UnaryOperator RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		UnaryOperator l = (UnaryOperator)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnaryOper_list_opt",52, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // UnaryOper_list_opt ::= 
            {
              UnaryOperator RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnaryOper_list_opt",52, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // UnaryExpr ::= UnaryOper_list_opt ValueExpr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		UnaryOperator l = (UnaryOperator)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode v = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 if (l == null) {
               RESULT = v;
           } else {
               RESULT = new OperatorNode(l.getOperator(), v); 
           } 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",89, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // CastAsSingleType_opt ::= TOK_CastAs SingleType 
            {
              TypeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode s = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CastAsSingleType_opt",50, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // CastAsSingleType_opt ::= 
            {
              TypeNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CastAsSingleType_opt",50, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // CastExpr ::= UnaryExpr CastAsSingleType_opt 
            {
              ExprNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode u = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode c = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 if (c == null) {
               RESULT = u;
           } else {
               RESULT = new OperatorNode(Operator.CAST_AS, u, c); 
           } 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CastExpr",88, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // CastableSingleType_opt ::= TOK_Castable SingleType 
            {
              TypeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode s = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CastableSingleType_opt",51, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // CastableSingleType_opt ::= 
            {
              TypeNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CastableSingleType_opt",51, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // CastableExpr ::= CastExpr CastableSingleType_opt 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode c = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 if (c == null) {
               RESULT = e;
           } else {
               RESULT = new OperatorNode(Operator.CASTABLE_AS, e, c); 
           } 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CastableExpr",87, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TreatAsSeqType_opt ::= TOK_TreatAs SequenceType 
            {
              TypeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode s = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("TreatAsSeqType_opt",47, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TreatAsSeqType_opt ::= 
            {
              TypeNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("TreatAsSeqType_opt",47, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TreatExpr ::= CastableExpr TreatAsSeqType_opt 
            {
              ExprNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 if (t == null) {
               RESULT = c;
           } else {
               RESULT = new OperatorNode(Operator.TREAT_AS, c, t); 
           } 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("TreatExpr",86, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // InstanceofSeqType_opt ::= TOK_Instanceof SequenceType 
            {
              TypeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode s = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("InstanceofSeqType_opt",46, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // InstanceofSeqType_opt ::= 
            {
              TypeNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("InstanceofSeqType_opt",46, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // InstanceofExpr ::= TreatExpr InstanceofSeqType_opt 
            {
              ExprNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode t = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode i = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 if (i == null) {
               RESULT = t;
           } else {
               RESULT = new OperatorNode(Operator.INSTANCE_OF, t, i); 
           } 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("InstanceofExpr",85, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // IntersectOper_choice ::= TOK_Except 
            {
              Operator RESULT =null;
		 RESULT = Operator.DIFFERENCE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("IntersectOper_choice",144, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // IntersectOper_choice ::= TOK_Intersect 
            {
              Operator RESULT =null;
		 RESULT = Operator.INTERSECTION; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("IntersectOper_choice",144, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // InstanceofExpr_list ::= InstanceofExpr_list IntersectOper_choice InstanceofExpr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		Operator o = (Operator)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode i = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new OperatorNode(o, l, i); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("InstanceofExpr_list",84, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // InstanceofExpr_list ::= InstanceofExpr 
            {
              ExprNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode i = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = i; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("InstanceofExpr_list",84, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // IntersectExceptExpr ::= InstanceofExpr_list 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("IntersectExceptExpr",83, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // UnionOper_choice ::= TOK_Vbar 
            {
              Operator RESULT =null;
		 RESULT = Operator.UNION; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnionOper_choice",143, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // UnionOper_choice ::= TOK_Union 
            {
              Operator RESULT =null;
		 RESULT = Operator.UNION; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnionOper_choice",143, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // IntersectExceptExpr_list ::= IntersectExceptExpr_list UnionOper_choice IntersectExceptExpr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		Operator u = (Operator)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode i = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new OperatorNode(u, l, i); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("IntersectExceptExpr_list",82, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // IntersectExceptExpr_list ::= IntersectExceptExpr 
            {
              ExprNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode i = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = i; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("IntersectExceptExpr_list",82, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // UnionExpr ::= IntersectExceptExpr_list 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnionExpr",81, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // MultiplicativeOper_choice ::= TOK_Mod 
            {
              Operator RESULT =null;
		 RESULT = Operator.MOD; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeOper_choice",142, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // MultiplicativeOper_choice ::= TOK_Idiv 
            {
              Operator RESULT =null;
		 RESULT = Operator.IDIV; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeOper_choice",142, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // MultiplicativeOper_choice ::= TOK_Div 
            {
              Operator RESULT =null;
		 RESULT = Operator.DIV; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeOper_choice",142, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // MultiplicativeOper_choice ::= TOK_Multiply 
            {
              Operator RESULT =null;
		 RESULT = Operator.MUL; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeOper_choice",142, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // UnionExpr_list ::= UnionExpr_list MultiplicativeOper_choice UnionExpr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		Operator m = (Operator)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode u = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new OperatorNode(m, l, u); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnionExpr_list",80, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // UnionExpr_list ::= UnionExpr 
            {
              ExprNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode u = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = u; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("UnionExpr_list",80, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // MultiplicativeExpr ::= UnionExpr_list 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",79, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // AdditiveOper_choice ::= TOK_Minus 
            {
              Operator RESULT =null;
		 RESULT = Operator.MINUS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AdditiveOper_choice",141, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // AdditiveOper_choice ::= TOK_Plus 
            {
              Operator RESULT =null;
		 RESULT = Operator.PLUS; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AdditiveOper_choice",141, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // MultiplicativeExpr_list ::= MultiplicativeExpr_list AdditiveOper_choice MultiplicativeExpr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		Operator o = (Operator)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode m = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new OperatorNode(o, l, m); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr_list",78, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // MultiplicativeExpr_list ::= MultiplicativeExpr 
            {
              ExprNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode m = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = m; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr_list",78, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // AdditiveExpr ::= MultiplicativeExpr_list 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",77, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // RangeExprSuffix_opt ::= TOK_To AdditiveExpr 
            {
              ExprNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode a = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = a; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("RangeExprSuffix_opt",76, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // RangeExprSuffix_opt ::= 
            {
              ExprNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("RangeExprSuffix_opt",76, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // RangeExpr ::= AdditiveExpr RangeExprSuffix_opt 
            {
              ExprNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode a = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 if (r == null) {
               RESULT = a;
           } else {
               RESULT = new OperatorNode(Operator.TO, a, r);
           } 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("RangeExpr",75, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Comp_choice ::= NodeComp 
            {
              Operator RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Operator c = (Operator)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Comp_choice",137, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Comp_choice ::= GeneralComp 
            {
              Operator RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Operator c = (Operator)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Comp_choice",137, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Comp_choice ::= ValueComp 
            {
              Operator RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Operator c = (Operator)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Comp_choice",137, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ComparisonExprSuffix_opt ::= Comp_choice RangeExpr 
            {
              ComparisonExprSuffix RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		Operator c = (Operator)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new ComparisonExprSuffix(c, r); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ComparisonExprSuffix_opt",156, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ComparisonExprSuffix_opt ::= 
            {
              ComparisonExprSuffix RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ComparisonExprSuffix_opt",156, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ComparisonExpr ::= RangeExpr ComparisonExprSuffix_opt 
            {
              ExprNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode r = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ComparisonExprSuffix c = (ComparisonExprSuffix)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 if (c == null) {
               RESULT = r;
           } else {
               RESULT = new OperatorNode(c.getOperator(), r, c.getRightSide()); 
           } 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ComparisonExpr",74, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ComparisonExpr_list ::= ComparisonExpr_list TOK_And ComparisonExpr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new OperatorNode(Operator.AND, l, c); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ComparisonExpr_list",73, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ComparisonExpr_list ::= ComparisonExpr 
            {
              ExprNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode c = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ComparisonExpr_list",73, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // AndExpr ::= ComparisonExpr_list 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AndExpr",72, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // AndExpr_list ::= AndExpr_list TOK_Or AndExpr 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode a = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new OperatorNode(Operator.OR, l, a); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AndExpr_list",71, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // AndExpr_list ::= AndExpr 
            {
              ExprNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode a = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = a; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AndExpr_list",71, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OrExpr ::= AndExpr_list 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode l = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrExpr",70, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // IfExpr ::= TOK_IfLpar Expr TOK_Rpar TOK_Then ExprSingle TOK_Else ExprSingle 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ExprNode s = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode g = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new IfExprNode(new TestExpressionNode(e), 
               new ThenExpressionNode(s), new ElseExpressionNode(g)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("IfExpr",69, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // VariableIndicatorVarNameAs_opt ::= TOK_VariableIndicator TOK_VarName TOK_As 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = n; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("VariableIndicatorVarNameAs_opt",220, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // VariableIndicatorVarNameAs_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("VariableIndicatorVarNameAs_opt",220, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CaseClause ::= TOK_Case VariableIndicatorVarNameAs_opt SequenceType TOK_Return ExprSingle 
            {
              CaseClauseNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		TypeNode s = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new CaseClauseNode(v, s, new ReturnClauseNode(e)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CaseClause",170, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // VariableIndicatorVarName_opt ::= TOK_VariableIndicator TOK_VarName 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = n; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("VariableIndicatorVarName_opt",219, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // VariableIndicatorVarName_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("VariableIndicatorVarName_opt",219, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CaseClause_list ::= CaseClause_list CaseClause 
            {
              XQNodeList<CaseClauseNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		XQNodeList<CaseClauseNode> l = (XQNodeList<CaseClauseNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		CaseClauseNode c = (CaseClauseNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(c); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CaseClause_list",169, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CaseClause_list ::= CaseClause 
            {
              XQNodeList<CaseClauseNode> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		CaseClauseNode c = (CaseClauseNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<CaseClauseNode>(c); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CaseClause_list",169, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TypeswitchExpr ::= TOK_TypeswitchLpar Expr TOK_Rpar CaseClause_list TOK_Default VariableIndicatorVarName_opt TOK_Return ExprSingle 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).right;
		XQNodeList<CaseClauseNode> l = (XQNodeList<CaseClauseNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode s = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new TypeswitchExprNode(new OperandExpressionNode(e), 
               new CaseClausesNode(l), 
               new DefaultCaseNode(v, new ReturnClauseNode(s))); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("TypeswitchExpr",68, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-7)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // QuantifiedExpr_list ::= QuantifiedExpr_list TOK_Comma TOK_VariableIndicator TOK_VarName TypeDeclaration_opt TOK_In ExprSingle 
            {
              XQNodeList<InClauseNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).right;
		XQNodeList<InClauseNode> l = (XQNodeList<InClauseNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(new InClauseNode(v, t, new BindingSequenceNode(e))); 
               RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("QuantifiedExpr_list",168, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // QuantifiedExpr_list ::= TOK_Comma TOK_VariableIndicator TOK_VarName TypeDeclaration_opt TOK_In ExprSingle 
            {
              XQNodeList<InClauseNode> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<InClauseNode>(new InClauseNode(v, t, 
               new BindingSequenceNode(e))); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("QuantifiedExpr_list",168, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // QuantifiedExpr_list_opt ::= QuantifiedExpr_list 
            {
              XQNodeList<InClauseNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<InClauseNode> l = (XQNodeList<InClauseNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("QuantifiedExpr_list_opt",167, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // QuantifiedExpr_list_opt ::= 
            {
              XQNodeList<InClauseNode> RESULT =null;
		 RESULT = new XQNodeList<InClauseNode>(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("QuantifiedExpr_list_opt",167, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Quantifier_choice ::= TOK_Every 
            {
              Quantifier RESULT =null;
		 RESULT = Quantifier.EVERY; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Quantifier_choice",166, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Quantifier_choice ::= TOK_Some 
            {
              Quantifier RESULT =null;
		 RESULT = Quantifier.SOME; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Quantifier_choice",166, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // QuantifiedExpr ::= Quantifier_choice TOK_VarName TypeDeclaration_opt TOK_In ExprSingle QuantifiedExpr_list_opt TOK_Satisfies ExprSingle 
            {
              ExprNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-7)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-7)).right;
		Quantifier q = (Quantifier)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		XQNodeList<InClauseNode> l = (XQNodeList<InClauseNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode x = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(new InClauseNode(v, t, new BindingSequenceNode(e)));  
               RESULT = new QuantifiedExprNode(q, new InClausesNode(l), 
               new TestExpressionNode(x)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("QuantifiedExpr",67, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-7)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CollationURILiteral_opt ::= TOK_Collation TOK_StringLiteral 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		StringLiteral u = (StringLiteral)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = u.getValue(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CollationURILiteral_opt",218, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CollationURILiteral_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CollationURILiteral_opt",218, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Empty_choice ::= TOK_EmptyLeast 
            {
              EmptyOrderMode RESULT =null;
		 RESULT = EmptyOrderMode.LEAST; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Empty_choice",38, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Empty_choice ::= TOK_EmptyGreatest 
            {
              EmptyOrderMode RESULT =null;
		 RESULT = EmptyOrderMode.GREATEST; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Empty_choice",38, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Empty_choice_opt ::= Empty_choice 
            {
              EmptyOrderMode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		EmptyOrderMode e = (EmptyOrderMode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Empty_choice_opt",39, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Empty_choice_opt ::= 
            {
              EmptyOrderMode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Empty_choice_opt",39, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OrderDir ::= TOK_Descending 
            {
              OrderDirection RESULT =null;
		 RESULT = OrderDirection.DESCENDING; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderDir",154, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OrderDir ::= TOK_Ascending 
            {
              OrderDirection RESULT =null;
		 RESULT = OrderDirection.ASCENDING; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderDir",154, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OrderDir_opt ::= OrderDir 
            {
              OrderDirection RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		OrderDirection o = (OrderDirection)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = o; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderDir_opt",155, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OrderDir_opt ::= 
            {
              OrderDirection RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderDir_opt",155, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OrderModifier ::= OrderDir_opt Empty_choice_opt CollationURILiteral_opt 
            {
              OrderModifier RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		OrderDirection o = (OrderDirection)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		EmptyOrderMode e = (EmptyOrderMode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new OrderModifier(o, e, c); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderModifier",165, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OrderSpec ::= ExprSingle OrderModifier 
            {
              OrderSpecNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		OrderModifier o = (OrderModifier)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new OrderSpecNode(e, o); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderSpec",153, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OrderSpec_list ::= OrderSpec_list TOK_Comma OrderSpec 
            {
              XQNodeList<OrderSpecNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		XQNodeList<OrderSpecNode> l = (XQNodeList<OrderSpecNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		OrderSpecNode o = (OrderSpecNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(o); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderSpec_list",151, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OrderSpec_list ::= OrderSpec 
            {
              XQNodeList<OrderSpecNode> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		OrderSpecNode o = (OrderSpecNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<OrderSpecNode>(o); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderSpec_list",151, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OrderSpecList ::= OrderSpec_list 
            {
              XQNodeList<OrderSpecNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<OrderSpecNode> l = (XQNodeList<OrderSpecNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderSpecList",152, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OrderBy_choice ::= TOK_OrderByStable 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderBy_choice",247, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OrderBy_choice ::= TOK_OrderBy 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderBy_choice",247, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OrderByClause ::= OrderBy_choice OrderSpecList 
            {
              OrderByClauseNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<OrderSpecNode> l = (XQNodeList<OrderSpecNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new OrderByClauseNode(o, l); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderByClause",150, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // WhereClause ::= TOK_Where ExprSingle 
            {
              WhereClauseNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new WhereClauseNode(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("WhereClause",148, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LetClause_list ::= LetClause_list TOK_Comma TOK_VariableIndicator TOK_VarName TypeDeclaration_opt TOK_ColonEquals ExprSingle 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).right;
		XQNodeList<VariableBindingNode> l = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(new LetClauseNode(v, t, new BindingSequenceNode(e))); 
           RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("LetClause_list",164, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LetClause_list ::= TOK_Comma TOK_VariableIndicator TOK_VarName TypeDeclaration_opt TOK_ColonEquals ExprSingle 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<VariableBindingNode>
               (new LetClauseNode(v, t, new BindingSequenceNode(e))); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("LetClause_list",164, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LetClause_list_opt ::= LetClause_list 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<VariableBindingNode> l = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("LetClause_list_opt",163, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LetClause_list_opt ::= 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		 RESULT = new XQNodeList<VariableBindingNode>(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("LetClause_list_opt",163, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LetClause ::= TOK_LetVariable TOK_VarName TypeDeclaration_opt TOK_ColonEquals ExprSingle LetClause_list_opt 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<VariableBindingNode> l = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<VariableBindingNode>
             (new LetClauseNode(v, t, new BindingSequenceNode(e)));
           RESULT = XQNodeList.concat(RESULT, l); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("LetClause",160, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PositionalVar ::= TOK_AtWord TOK_VariableIndicator TOK_VarName 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = n; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PositionalVar",217, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ForClause_list ::= ForClause_list TOK_Comma TOK_VariableIndicator TOK_VarName TypeDeclaration_opt PositionalVar_opt TOK_In ExprSingle 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-7)).right;
		XQNodeList<VariableBindingNode> l = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(new ForClauseNode(v, t, p, new BindingSequenceNode(e))); 
           RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForClause_list",162, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-7)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ForClause_list ::= TOK_Comma TOK_VariableIndicator TOK_VarName TypeDeclaration_opt PositionalVar_opt TOK_In ExprSingle 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<VariableBindingNode>
               (new ForClauseNode(v, t, p, new BindingSequenceNode(e))); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForClause_list",162, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ForClause_list_opt ::= ForClause_list 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<VariableBindingNode> l = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForClause_list_opt",161, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ForClause_list_opt ::= 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		 RESULT = new XQNodeList<VariableBindingNode>(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForClause_list_opt",161, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PositionalVar_opt ::= PositionalVar 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = p; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PositionalVar_opt",216, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PositionalVar_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PositionalVar_opt",216, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ForClause ::= TOK_ForVariable TOK_VarName TypeDeclaration_opt PositionalVar_opt TOK_In ExprSingle ForClause_list_opt 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<VariableBindingNode> l = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<VariableBindingNode>
             (new ForClauseNode(v, t, p, new BindingSequenceNode(e)));
           RESULT = XQNodeList.concat(RESULT, l); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ForClause",159, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-6)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OrderByClause_opt ::= OrderByClause 
            {
              OrderByClauseNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		OrderByClauseNode o = (OrderByClauseNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = o; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderByClause_opt",149, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OrderByClause_opt ::= 
            {
              OrderByClauseNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderByClause_opt",149, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // WhereClause_opt ::= WhereClause 
            {
              WhereClauseNode RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		WhereClauseNode w = (WhereClauseNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = w; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("WhereClause_opt",147, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // WhereClause_opt ::= 
            {
              WhereClauseNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("WhereClause_opt",147, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FLClause_choice ::= LetClause 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<VariableBindingNode> l = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FLClause_choice",158, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FLClause_choice ::= ForClause 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<VariableBindingNode> f = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = f; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FLClause_choice",158, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FLClause_list ::= FLClause_list FLClause_choice 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		XQNodeList<VariableBindingNode> l = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<VariableBindingNode> f = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = XQNodeList.concat(l, f); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FLClause_list",157, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FLClause_list ::= FLClause_choice 
            {
              XQNodeList<VariableBindingNode> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<VariableBindingNode> f = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = f; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FLClause_list",157, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FLWORExpr ::= FLClause_list WhereClause_opt OrderByClause_opt TOK_Return ExprSingle 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).right;
		XQNodeList<VariableBindingNode> l = (XQNodeList<VariableBindingNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		WhereClauseNode w = (WhereClauseNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		OrderByClauseNode o = (OrderByClauseNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new FLWORExprNode(new TupleStreamNode(l), w, o, 
               new ReturnClauseNode(e)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FLWORExpr",66, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExprSingle ::= OrExpr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ExprSingle",65, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExprSingle ::= IfExpr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ExprSingle",65, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExprSingle ::= TypeswitchExpr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ExprSingle",65, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExprSingle ::= QuantifiedExpr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ExprSingle",65, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExprSingle ::= FLWORExpr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ExprSingle",65, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExprSingle_list ::= ExprSingle_list TOK_Comma ExprSingle 
            {
              XQNodeList<ExprNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		XQNodeList<ExprNode> l = (XQNodeList<ExprNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ExprSingle_list",145, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExprSingle_list ::= ExprSingle 
            {
              XQNodeList<ExprNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<ExprNode>(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ExprSingle_list",145, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= ExprSingle_list 
            {
              ExprNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<ExprNode> l = (XQNodeList<ExprNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 if (l.size() == 1) {
             RESULT = l.get(0);
         } else {
             RESULT = new CommaOperatorNode(l); 
         } 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Expr",60, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // QueryBody ::= Expr 
            {
              QueryBodyNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new QueryBodyNode(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("QueryBody",7, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EnclosedExprLbrace_choice ::= TOK_LbraceExprEnclosure 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("EnclosedExprLbrace_choice",251, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EnclosedExprLbrace_choice ::= TOK_Lbrace 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("EnclosedExprLbrace_choice",251, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EnclosedExpr ::= EnclosedExprLbrace_choice Expr TOK_Rbrace 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("EnclosedExpr",62, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Param ::= TOK_VariableIndicator TOK_VarName TypeDeclaration_opt 
            {
              ParamNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new ParamNode(n, t); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Param",57, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Param_list ::= Param_list TOK_Comma Param 
            {
              XQNodeList<ParamNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		XQNodeList<ParamNode> l = (XQNodeList<ParamNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ParamNode p = (ParamNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(p); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Param_list",56, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Param_list ::= Param 
            {
              XQNodeList<ParamNode> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ParamNode p = (ParamNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<ParamNode>(p); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Param_list",56, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ParamList ::= Param_list 
            {
              ParamListNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<ParamNode> l = (XQNodeList<ParamNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new ParamListNode(l); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ParamList",55, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FunctionBody_choice ::= TOK_External 
            {
              FunctionBodyNode RESULT =null;
		 RESULT = new FunctionBodyNode(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FunctionBody_choice",58, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FunctionBody_choice ::= EnclosedExpr 
            {
              FunctionBodyNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new FunctionBodyNode(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FunctionBody_choice",58, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FunctionRpar_choice ::= TOK_RparAs SequenceType 
            {
              TypeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode s = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FunctionRpar_choice",48, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FunctionRpar_choice ::= TOK_Rpar 
            {
              TypeNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FunctionRpar_choice",48, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ParamList_opt ::= ParamList 
            {
              ParamListNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ParamListNode p = (ParamListNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = p; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ParamList_opt",54, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ParamList_opt ::= 
            {
              ParamListNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ParamList_opt",54, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FunctionDecl ::= TOK_DefineFunction TOK_QNameLpar ParamList_opt FunctionRpar_choice FunctionBody_choice 
            {
              PrologChildNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		ParamListNode p = (ParamListNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		TypeNode r = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		FunctionBodyNode b = (FunctionBodyNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new FunctionDeclNode(extractQNameFromQNameLpar(q), 
               p, r, b); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",20, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ConstructionDecl ::= TOK_DeclareConstruction TOK_SchemaModeForDeclareConstruction 
            {
              PrologChildNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new ConstructionDeclNode(getContructionMode(s)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ConstructionDecl",25, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VarValue_choice ::= TOK_External 
            {
              VarValueNode RESULT =null;
		 RESULT = new VarValueNode(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("VarValue_choice",42, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VarValue_choice ::= TOK_ColonEquals ExprSingle 
            {
              VarValueNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new VarValueNode(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("VarValue_choice",42, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TypeDeclaration_opt ::= TypeDeclaration 
            {
              TypeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = t; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration_opt",43, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TypeDeclaration_opt ::= 
            {
              TypeNode RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration_opt",43, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VarDecl ::= TOK_DefineVariable TOK_VarName TypeDeclaration_opt VarValue_choice 
            {
              PrologChildNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		VarValueNode v = (VarValueNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new VarDeclNode(q, t, v); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("VarDecl",19, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NamespaceAssign_opt ::= TOK_Namespace TOK_NCNameForPrefix TOK_AssignEquals 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = n; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NamespaceAssign_opt",221, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NamespaceAssign_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NamespaceAssign_opt",221, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ModuleImport ::= TOK_ImportModule NamespaceAssign_opt TOK_URILiteral AtURILiterals_opt 
            {
              PrologChildNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<LocationHintNode> a = (XQNodeList<LocationHintNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new ModuleImportNode(n, u, new LocationHintsNode(a)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ModuleImport",30, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SchemaPrefix ::= TOK_DefaultElement TOK_Namespace 
            {
              SchemaPrefix RESULT =null;
		 RESULT = new SchemaPrefix(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaPrefix",172, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SchemaPrefix ::= TOK_Namespace TOK_NCNameForPrefix TOK_AssignEquals 
            {
              SchemaPrefix RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new SchemaPrefix(n); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaPrefix",172, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CommaURILiterals_list ::= CommaURILiterals_list TOK_Comma TOK_URILiteral 
            {
              XQNodeList<LocationHintNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		XQNodeList<LocationHintNode> l = (XQNodeList<LocationHintNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(new LocationHintNode(u)); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommaURILiterals_list",33, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CommaURILiterals_list ::= TOK_Comma TOK_URILiteral 
            {
              XQNodeList<LocationHintNode> RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new XQNodeList<LocationHintNode>
               (new LocationHintNode(u)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommaURILiterals_list",33, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CommaURILiterals_list_opt ::= CommaURILiterals_list 
            {
              XQNodeList<LocationHintNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<LocationHintNode> l = (XQNodeList<LocationHintNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommaURILiterals_list_opt",32, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CommaURILiterals_list_opt ::= 
            {
              XQNodeList<LocationHintNode> RESULT =null;
		 RESULT = new XQNodeList<LocationHintNode>(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CommaURILiterals_list_opt",32, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AtURILiterals_opt ::= TOK_AtURILiteral CommaURILiterals_list_opt 
            {
              XQNodeList<LocationHintNode> RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<LocationHintNode> l = (XQNodeList<LocationHintNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(new LocationHintNode(extractURILiteralFromAtURILiteral(u))); 
           RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AtURILiterals_opt",31, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AtURILiterals_opt ::= 
            {
              XQNodeList<LocationHintNode> RESULT =null;
		 RESULT = new XQNodeList<LocationHintNode>(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("AtURILiterals_opt",31, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SchemaPrefix_opt ::= SchemaPrefix 
            {
              SchemaPrefix RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		SchemaPrefix s = (SchemaPrefix)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaPrefix_opt",171, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SchemaPrefix_opt ::= 
            {
              SchemaPrefix RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaPrefix_opt",171, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SchemaImport ::= TOK_ImportSchema SchemaPrefix_opt TOK_URILiteral AtURILiterals_opt 
            {
              PrologChildNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		SchemaPrefix s = (SchemaPrefix)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<LocationHintNode> a = (XQNodeList<LocationHintNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new SchemaImportNode(s, u, new LocationHintsNode(a)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SchemaImport",29, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BaseURIDecl ::= TOK_DeclareBaseURI TOK_URILiteral 
            {
              PrologChildNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new BaseURIDeclNode(u); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("BaseURIDecl",24, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DefaultCollationDecl ::= TOK_DeclareCollation TOK_URILiteral 
            {
              PrologChildNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new DefaultCollationDeclNode(u); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DefaultCollationDecl",23, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InheritMode ::= TOK_NamespacesNoInherit 
            {
              InheritMode RESULT =null;
		 RESULT = InheritMode.NO_INHERIT; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("InheritMode",41, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // InheritMode ::= TOK_NamespacesInherit 
            {
              InheritMode RESULT =null;
		 RESULT = InheritMode.INHERIT; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("InheritMode",41, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PreserveMode ::= TOK_NamespacesNoPreserve 
            {
              PreserveMode RESULT =null;
		 RESULT = PreserveMode.NO_PRESERVE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PreserveMode",40, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PreserveMode ::= TOK_NamespacesPreserve 
            {
              PreserveMode RESULT =null;
		 RESULT = PreserveMode.PRESERVE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("PreserveMode",40, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CopyNamespacesDecl ::= TOK_DeclareCopyNamespaces PreserveMode TOK_Comma InheritMode 
            {
              PrologChildNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		PreserveMode p = (PreserveMode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		InheritMode i = (InheritMode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new CopyNamespacesDeclNode(p, i); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("CopyNamespacesDecl",28, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EmptyOrderType_choice ::= TOK_EmptyLeast 
            {
              EmptyOrderMode RESULT =null;
		 RESULT = EmptyOrderMode.LEAST; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("EmptyOrderType_choice",37, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EmptyOrderType_choice ::= TOK_EmptyGreatest 
            {
              EmptyOrderMode RESULT =null;
		 RESULT = EmptyOrderMode.GREATEST; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("EmptyOrderType_choice",37, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EmptyOrderDecl ::= TOK_DeclareDefaultOrder EmptyOrderType_choice 
            {
              PrologChildNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		EmptyOrderMode e = (EmptyOrderMode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new EmptyOrderDeclNode(e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("EmptyOrderDecl",27, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Ordered_choice ::= TOK_Unordered 
            {
              OrderingMode RESULT =null;
		 RESULT = OrderingMode.UNORDERED; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Ordered_choice",36, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Ordered_choice ::= TOK_Ordered 
            {
              OrderingMode RESULT =null;
		 RESULT = OrderingMode.ORDERED; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Ordered_choice",36, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OrderingModeDecl ::= TOK_DeclareOrdering Ordered_choice 
            {
              PrologChildNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		OrderingMode o = (OrderingMode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new OrderingModeDeclNode(o); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OrderingModeDecl",26, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptionDecl ::= TOK_DeclareOption TOK_QName TOK_StringLiteral 
            {
              PrologChildNode RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		StringLiteral s = (StringLiteral)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new OptionDeclNode(q, s.getValue()); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("OptionDecl",21, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DeclareDefault_choice ::= TOK_DeclareDefaultFunction 
            {
              DefaultNamespaceKind RESULT =null;
		 RESULT = DefaultNamespaceKind.FUNCTION; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DeclareDefault_choice",35, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DeclareDefault_choice ::= TOK_DeclareDefaultElement 
            {
              DefaultNamespaceKind RESULT =null;
		 RESULT = DefaultNamespaceKind.ELEMENT; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DeclareDefault_choice",35, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DefaultNamespaceDecl ::= DeclareDefault_choice TOK_Namespace TOK_URILiteral 
            {
              PrologChildNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		DefaultNamespaceKind d = (DefaultNamespaceKind)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new DefaultNamespaceDeclNode(d, u); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("DefaultNamespaceDecl",15, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BoundarySpace_choice ::= TOK_BoundarySpaceStrip 
            {
              BoundarySpaceMode RESULT =null;
		 RESULT = BoundarySpaceMode.STRIP; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("BoundarySpace_choice",34, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BoundarySpace_choice ::= TOK_BoundarySpacePreserve 
            {
              BoundarySpaceMode RESULT =null;
		 RESULT = BoundarySpaceMode.PRESERVE; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("BoundarySpace_choice",34, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BoundarySpaceDecl ::= TOK_DeclareBoundarySpace BoundarySpace_choice 
            {
              PrologChildNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		BoundarySpaceMode b = (BoundarySpaceMode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new BoundarySpaceDeclNode(b); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("BoundarySpaceDecl",22, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NamespaceDecl ::= TOK_DeclareNamespace TOK_NCNameForPrefix TOK_AssignEquals TOK_URILiteral 
            {
              PrologChildNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new NamespaceDeclNode(n ,u); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("NamespaceDecl",17, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Separator ::= TOK_SemiColon 
            {
              Object RESULT =null;

              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Separator",250, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Import ::= ModuleImport 
            {
              PrologChildNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode m = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = m; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Import",18, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Import ::= SchemaImport 
            {
              PrologChildNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode s = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Import",18, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Setter ::= CopyNamespacesDecl 
            {
              PrologChildNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode c = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Setter",16, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Setter ::= EmptyOrderDecl 
            {
              PrologChildNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode e = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = e; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Setter",16, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Setter ::= OrderingModeDecl 
            {
              PrologChildNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode o = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = o; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Setter",16, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Setter ::= ConstructionDecl 
            {
              PrologChildNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode c = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = c; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Setter",16, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Setter ::= BaseURIDecl 
            {
              PrologChildNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode b = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = b; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Setter",16, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Setter ::= DefaultCollationDecl 
            {
              PrologChildNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode d = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = d; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Setter",16, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Setter ::= BoundarySpaceDecl 
            {
              PrologChildNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode b = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = b; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Setter",16, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SecondPrologPart_choice ::= OptionDecl 
            {
              PrologChildNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode o = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = o; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SecondPrologPart_choice",14, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SecondPrologPart_choice ::= FunctionDecl 
            {
              PrologChildNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode f = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = f; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SecondPrologPart_choice",14, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SecondPrologPart_choice ::= VarDecl 
            {
              PrologChildNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode v = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = v; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SecondPrologPart_choice",14, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SecondPrologPart_list ::= SecondPrologPart_list SecondPrologPart_choice Separator 
            {
              XQNodeList<PrologChildNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		XQNodeList<PrologChildNode> l = (XQNodeList<PrologChildNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		PrologChildNode p = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 l.add(p); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SecondPrologPart_list",12, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SecondPrologPart_list ::= SecondPrologPart_choice Separator 
            {
              XQNodeList<PrologChildNode> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		PrologChildNode p = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new XQNodeList<PrologChildNode>(p); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SecondPrologPart_list",12, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SecondPrologPart_list_opt ::= SecondPrologPart_list 
            {
              XQNodeList<PrologChildNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<PrologChildNode> l = (XQNodeList<PrologChildNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SecondPrologPart_list_opt",11, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SecondPrologPart_list_opt ::= 
            {
              XQNodeList<PrologChildNode> RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("SecondPrologPart_list_opt",11, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FirstPrologPart_choice ::= Import 
            {
              PrologChildNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode i = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = i; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FirstPrologPart_choice",13, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FirstPrologPart_choice ::= NamespaceDecl 
            {
              PrologChildNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode n = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = n; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FirstPrologPart_choice",13, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FirstPrologPart_choice ::= Setter 
            {
              PrologChildNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode s = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FirstPrologPart_choice",13, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FirstPrologPart_choice ::= DefaultNamespaceDecl 
            {
              PrologChildNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologChildNode d = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = d; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FirstPrologPart_choice",13, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FirstPrologPart_list ::= FirstPrologPart_list FirstPrologPart_choice Separator 
            {
              XQNodeList<PrologChildNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		XQNodeList<PrologChildNode> l = (XQNodeList<PrologChildNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		PrologChildNode p = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 l.add(p); RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FirstPrologPart_list",10, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FirstPrologPart_list ::= FirstPrologPart_choice Separator 
            {
              XQNodeList<PrologChildNode> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		PrologChildNode p = (PrologChildNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new XQNodeList<PrologChildNode>(p); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FirstPrologPart_list",10, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FirstPrologPart_list_opt ::= FirstPrologPart_list 
            {
              XQNodeList<PrologChildNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<PrologChildNode> l = (XQNodeList<PrologChildNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FirstPrologPart_list_opt",9, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FirstPrologPart_list_opt ::= 
            {
              XQNodeList<PrologChildNode> RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("FirstPrologPart_list_opt",9, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Prolog ::= FirstPrologPart_list_opt SecondPrologPart_list_opt 
            {
              PrologNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		XQNodeList<PrologChildNode> f = (XQNodeList<PrologChildNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		XQNodeList<PrologChildNode> s = (XQNodeList<PrologChildNode>)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new PrologNode(XQNodeList.concat(f, s)); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Prolog",6, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ModuleDecl ::= TOK_ModuleNamespace TOK_NCNameForPrefix TOK_AssignEquals TOK_URILiteral Separator 
            {
              ModuleDeclNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new ModuleDeclNode(n, u); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("ModuleDecl",8, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-4)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LibraryModule ::= ModuleDecl Prolog 
            {
              Module RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ModuleDeclNode m = (ModuleDeclNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		PrologNode p = (PrologNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new LibraryModule(m, p); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("LibraryModule",5, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MainModule ::= Prolog QueryBody 
            {
              Module RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		PrologNode p = (PrologNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		QueryBodyNode q = (QueryBodyNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new MainModule(p, q); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("MainModule",4, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Encoding_opt ::= TOK_Encoding TOK_StringLiteral 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		StringLiteral s = (StringLiteral)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = s.getValue(); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Encoding_opt",215, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Encoding_opt ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Encoding_opt",215, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VersionDecl ::= TOK_XQueryVersion TOK_StringLiteral Encoding_opt Separator 
            {
              VersionDecl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).right;
		StringLiteral v = (StringLiteral)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		 RESULT = new VersionDecl(v.getValue(), e); 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("VersionDecl",2, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-3)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Module_choice ::= LibraryModule 
            {
              Module RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Module l = (Module)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = l; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Module_choice",3, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Module_choice ::= MainModule 
            {
              Module RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Module m = (Module)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = m; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Module_choice",3, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VersionDecl_opt ::= VersionDecl 
            {
              VersionDecl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		VersionDecl v = (VersionDecl)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = v; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("VersionDecl_opt",1, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VersionDecl_opt ::= 
            {
              VersionDecl RESULT =null;
		 RESULT = null; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("VersionDecl_opt",1, ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Module ::= VersionDecl_opt Module_choice 
            {
              ModuleNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		VersionDecl v = (VersionDecl)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()).right;
		Module m = (Module)((java_cup.runtime.Symbol) CUP$XQParser$stack.peek()).value;
		 RESULT = new ModuleNode(v, m); moduleNode = RESULT; 
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("Module",0, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          return CUP$XQParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Module EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).right;
		ModuleNode start_val = (ModuleNode)((java_cup.runtime.Symbol) CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)).value;
		RESULT = start_val;
              CUP$XQParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$XQParser$stack.elementAt(CUP$XQParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$XQParser$parser.done_parsing();
          return CUP$XQParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

