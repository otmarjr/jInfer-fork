/*
 *  Copyright (C) 2010 anti
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cz.cuni.mff.ksi.jinfer.twostep.processing.automatonmergingstate.simplifying.defective.defectivemdl.properties;

import cz.cuni.mff.ksi.jinfer.base.interfaces.NamedModule;
import cz.cuni.mff.ksi.jinfer.base.objects.AbstractPropertiesPanel;
import cz.cuni.mff.ksi.jinfer.base.objects.ProjectPropsComboRenderer;
import cz.cuni.mff.ksi.jinfer.base.utils.ModuleSelectionHelper;
import cz.cuni.mff.ksi.jinfer.twostep.processing.automatonmergingstate.AutomatonMergingState;
import cz.cuni.mff.ksi.jinfer.twostep.processing.automatonmergingstate.evaluating.DefectiveAutomatonEvaluatorFactory;
import cz.cuni.mff.ksi.jinfer.twostep.processing.automatonmergingstate.regexping.RegexpAutomatonSimplifier;
import cz.cuni.mff.ksi.jinfer.twostep.processing.automatonmergingstate.simplifying.AutomatonSimplifier;
import cz.cuni.mff.ksi.jinfer.twostep.processing.automatonmergingstate.simplifying.defective.defectivemdl.DefectiveMDLFactory;
import cz.cuni.mff.ksi.jinfer.twostep.processing.automatonmergingstate.simplifying.defective.defectivemdl.suspection.SuspectionFactory;
import java.util.Properties;
import javax.swing.DefaultComboBoxModel;

/**
 * Properties panel for {@link AutomatonMergingState}.
 *
 * Lets user select {@link AutomatonSimplifier} module and {@link RegexpAutomatonSimplifier} module.
 * 
 * @author anti
 */
@SuppressWarnings({"PMD.SingularField", "PMD.UnusedFormalParameter", "PMD.MethodArgumentCouldBeFinal"})
public class DefectiveMDLPropertiesPanel extends AbstractPropertiesPanel {

  private static final long serialVersionUID = 78446331L;

  /** Creates new form ModuleSelectionJPanel */
  public DefectiveMDLPropertiesPanel(final Properties properties) {
    super(properties);
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    labelAutomatonEvaluator = new javax.swing.JLabel();
    automatonEvaluator = new javax.swing.JComboBox();
    jScrollPane3 = new javax.swing.JScrollPane();
    descAutomatonEvaluator = new javax.swing.JTextPane();
    labelSuspection = new javax.swing.JLabel();
    jScrollPane4 = new javax.swing.JScrollPane();
    descSuspection = new javax.swing.JTextPane();
    suspection = new javax.swing.JComboBox();

    setMinimumSize(new java.awt.Dimension(500, 300));
    setPreferredSize(new java.awt.Dimension(500, 300));
    setLayout(new java.awt.GridBagLayout());

    labelAutomatonEvaluator.setText("Automaton Evaluator"); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 12);
    add(labelAutomatonEvaluator, gridBagConstraints);

    automatonEvaluator.setMinimumSize(new java.awt.Dimension(400, 22));
    automatonEvaluator.setPreferredSize(new java.awt.Dimension(400, 22));
    automatonEvaluator.setRenderer(new ProjectPropsComboRenderer(automatonEvaluator.getRenderer()));
    automatonEvaluator.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        automatonEvaluatorChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(automatonEvaluator, gridBagConstraints);

    jScrollPane3.setBorder(null);

    descAutomatonEvaluator.setContentType("text/html");
    descAutomatonEvaluator.setEditable(false);
    descAutomatonEvaluator.setFocusable(false);
    descAutomatonEvaluator.setOpaque(false);
    jScrollPane3.setViewportView(descAutomatonEvaluator);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jScrollPane3, gridBagConstraints);

    labelSuspection.setText("Suspection"); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 12);
    add(labelSuspection, gridBagConstraints);

    jScrollPane4.setBorder(null);

    descSuspection.setContentType("text/html");
    descSuspection.setEditable(false);
    descSuspection.setFocusable(false);
    descSuspection.setOpaque(false);
    jScrollPane4.setViewportView(descSuspection);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(jScrollPane4, gridBagConstraints);

    suspection.setMinimumSize(new java.awt.Dimension(400, 22));
    suspection.setPreferredSize(new java.awt.Dimension(400, 22));
    suspection.setRenderer(new ProjectPropsComboRenderer(suspection.getRenderer()));
    suspection.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        suspectionChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(suspection, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  private String htmlize(String text) {
    return "<html><head></head><body style=\"margin-top: 0; font-family: sans;\">" + text + "</body></html>";
  }

  private void automatonEvaluatorChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_automatonEvaluatorChanged
    descAutomatonEvaluator.setText(htmlize(
            ModuleSelectionHelper.lookupImpl(DefectiveAutomatonEvaluatorFactory.class,
            ((NamedModule) automatonEvaluator.getSelectedItem()).getName()).getUserModuleDescription()));
  }//GEN-LAST:event_automatonEvaluatorChanged

  private void suspectionChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suspectionChanged
    descSuspection.setText(htmlize(
            ModuleSelectionHelper.lookupImpl(SuspectionFactory.class,
            ((NamedModule) suspection.getSelectedItem()).getName()).getUserModuleDescription()));
}//GEN-LAST:event_suspectionChanged

  @Override
  public final void load() {
    automatonEvaluator.setModel(new DefaultComboBoxModel(
            ModuleSelectionHelper.lookupImpls(DefectiveAutomatonEvaluatorFactory.class).toArray()));

    automatonEvaluator.setSelectedItem(ModuleSelectionHelper.lookupImpl(DefectiveAutomatonEvaluatorFactory.class,
            properties.getProperty(DefectiveMDLFactory.PROPERTIES_EVALUATOR,
            DefectiveMDLFactory.PROPERTIES_EVALUATOR_DEFAULT)));
    automatonEvaluatorChanged(null);

    suspection.setModel(new DefaultComboBoxModel(
            ModuleSelectionHelper.lookupImpls(SuspectionFactory.class).toArray()));

    suspection.setSelectedItem(ModuleSelectionHelper.lookupImpl(SuspectionFactory.class,
            properties.getProperty(DefectiveMDLFactory.PROPERTIES_SUSPECTION,
            DefectiveMDLFactory.PROPERTIES_SUSPECTION_DEFAULT)));
    suspectionChanged(null);
  }

  @Override
  public void store() {
    properties.setProperty(DefectiveMDLFactory.PROPERTIES_EVALUATOR,
            ((NamedModule) automatonEvaluator.getSelectedItem()).getName());

    properties.setProperty(DefectiveMDLFactory.PROPERTIES_SUSPECTION,
            ((NamedModule) suspection.getSelectedItem()).getName());
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox automatonEvaluator;
  private javax.swing.JTextPane descAutomatonEvaluator;
  private javax.swing.JTextPane descSuspection;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JLabel labelAutomatonEvaluator;
  private javax.swing.JLabel labelSuspection;
  private javax.swing.JComboBox suspection;
  // End of variables declaration//GEN-END:variables
}
