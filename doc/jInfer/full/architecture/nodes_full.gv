digraph nodes_full {
	rankdir = BT;
	node [shape = rectangle, fontname = "TeXGyrePagella-Regular", fontsize = 10];
	edge [fontname = "TeXGyrePagella-Regular", fontsize = 10];
{
	rank = same;
	interface [style = solid];
	class [style= rounded, label = "class"];

	NamedNode 
	[shape = record, label = "{<head> NamedNode|<fields> |<methods> getContext():\ List\<String\>\lgetName():\ String\lgetMetadata():\ Map\<String, Object\>}"];
}

{
	rank = same;
	ContentNode
	[shape = record, label = "{<head> ContentNode|<fields> |<methods> getContentType():\ String\lgetContent():\ List\<String\>\l}"];

	AbstractNamedNode 
	[style= rounded, shape = record, label = "{<head> AbstractNamedNode|<fields> |<methods> +setImmutable()\l}"];
	StructuralNode
	[shape = record, label = "{<head> StructuralNode|<fields> |<methods> getType():\ StructuralNodeType\lisElement():\ Boolean\lisSimpleData():\ Boolean\l}"];

	StructuralNodeType 
	[style = rounded, shape = record, label = "{<head> \<\<enum\>\>\nStructuralNodeType|<fields> +ELEMENT\l+SIMPLE_DATA\l|<methods> }"];
}
	Attribute [style= rounded]
	[shape = record, label = "{<head> Attribute|<fields> -contentType:\ String\l-content:\ List\<String\>|<methods> }"];

	AbstractStructuralNode [style= rounded]
	[shape = record, label = "{<head> AbstractStructuralNode|<fields> |<methods>+\<\<abstract\>\>getType(): StructuralNodeType\l}"];

	SimpleData [style= rounded]
	[shape = record, label = "{<head> SimpleData|<fields> -contentType:\ String\l-content:\ List\<String\>\l|<methods> getMutable():\ SimpleData}"];

	Element [style= rounded]
	[shape = record, label = "{<head> Element|<fields> -subnodes:\ Regexp\<AbstractStructuralNode\>\l-attributes:\ List\<Attribute\>\l|<methods> +getMutable():\ Element\l+getSubnodes():\ Regexp\<AbstractStructuralNode\>\l}"];
	
	StructuralNode -> NamedNode [label = "extends"];
	ContentNode -> NamedNode [label = "extends"];
	AbstractNamedNode -> NamedNode [style = dashed, label = "implements"];
	
	AbstractStructuralNode -> StructuralNode [style = dashed, label = "implements"];
	AbstractStructuralNode -> AbstractNamedNode [label = "extends"];
	
	Element -> AbstractStructuralNode [label = "extends"];
	SimpleData -> AbstractStructuralNode [label = "extends"];
	SimpleData -> ContentNode [style = dashed, label = "implements"];
	
	Attribute -> AbstractNamedNode [label = "extends"];
	Attribute -> ContentNode [style = dashed, label = "implements"];
}