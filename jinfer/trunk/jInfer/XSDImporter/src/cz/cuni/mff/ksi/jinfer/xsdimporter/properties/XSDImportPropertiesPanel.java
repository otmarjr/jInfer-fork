/*
 *  Copyright (C) 2010 reseto
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package cz.cuni.mff.ksi.jinfer.xsdimporter.properties;

import cz.cuni.mff.ksi.jinfer.base.objects.AbstractPropertiesPanel;
import java.util.Properties;

/**
 *
 * @author reseto
 */
public class XSDImportPropertiesPanel extends AbstractPropertiesPanel {

  public static final String NAME = "XSDImport";
  public static final String PARSER = "parser";
  public static final String STOP_ON_ERROR = "stop.on.error";

    /** Creates new form XSDImportPropertiesPanel */
    public XSDImportPropertiesPanel(final Properties properties) {
      super(properties);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("PMD")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    parserComboBox = new javax.swing.JComboBox();
    stopOnError = new javax.swing.JCheckBox();
    parserLabel = new javax.swing.JLabel();

    parserComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SAX", "DOM" }));

    stopOnError.setSelected(true);
    stopOnError.setText(org.openide.util.NbBundle.getMessage(XSDImportPropertiesPanel.class, "XSDImportPropertiesPanel.stopOnError.text")); // NOI18N

    parserLabel.setText(org.openide.util.NbBundle.getMessage(XSDImportPropertiesPanel.class, "XSDImportPropertiesPanel.parserLabel.text")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(10, 10, 10)
            .addComponent(stopOnError))
          .addGroup(layout.createSequentialGroup()
            .addComponent(parserLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(parserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(211, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(parserLabel)
          .addComponent(parserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(stopOnError)
        .addContainerGap(244, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  @Override
  public void store() {
    properties.setProperty(PARSER,
            String.valueOf(parserComboBox.getSelectedIndex()));
    properties.setProperty(STOP_ON_ERROR,
            Boolean.toString(stopOnError.isSelected()));
  }

  @Override
  public void load() {
    parserComboBox.setSelectedIndex(
            Integer.parseInt(properties.getProperty(PARSER, "0")));
    stopOnError.setSelected(
            Boolean.parseBoolean(properties.getProperty(STOP_ON_ERROR, "true")));
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox parserComboBox;
  private javax.swing.JLabel parserLabel;
  private javax.swing.JCheckBox stopOnError;
  // End of variables declaration//GEN-END:variables

}
