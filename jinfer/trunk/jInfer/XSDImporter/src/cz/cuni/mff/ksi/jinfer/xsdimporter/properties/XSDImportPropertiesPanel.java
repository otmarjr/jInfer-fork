/*
 *  Copyright (C) 2010 reseto
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package cz.cuni.mff.ksi.jinfer.xsdimporter.properties;

import cz.cuni.mff.ksi.jinfer.base.objects.AbstractPropertiesPanel;
import cz.cuni.mff.ksi.jinfer.base.utils.LogLevels;
import cz.cuni.mff.ksi.jinfer.base.utils.ModuleSelectionHelper;
import cz.cuni.mff.ksi.jinfer.xsdimporter.utils.XSDParser;
import java.util.List;
import java.util.Properties;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author reseto
 */
public class XSDImportPropertiesPanel extends AbstractPropertiesPanel {

  private static final long serialVersionUID = 35344234;

  public static final String NAME = "XSDImport";
  public static final String PARSER = "parser";
  public static final String STOP_ON_ERROR = "stop.on.error";
  public static final String VERBOSE_INFO = "verbose.info";
  public static final String LOG_LEVEL = "log.level";
  private static final String DEFAULT_MENU_TEXT = "<none available>";

  /** Creates new form XSDImportPropertiesPanel */
  public XSDImportPropertiesPanel(final Properties properties) {
    super(properties);
    initComponents();
  }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("PMD")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    parserLabel = new javax.swing.JLabel();
    parserComboBox = new javax.swing.JComboBox();
    loglevelLabel = new javax.swing.JLabel();
    logLevelCombo = new javax.swing.JComboBox();
    stopLabel = new javax.swing.JLabel();
    stopOnError = new javax.swing.JCheckBox();
    verboseLabel = new javax.swing.JLabel();
    verbose = new javax.swing.JCheckBox();
    jPanel1 = new javax.swing.JPanel();
    jPanel2 = new javax.swing.JPanel();

    setMinimumSize(new java.awt.Dimension(500, 300));
    setPreferredSize(new java.awt.Dimension(500, 300));
    setLayout(new java.awt.GridBagLayout());

    parserLabel.setText(org.openide.util.NbBundle.getMessage(XSDImportPropertiesPanel.class, "XSDImportPropertiesPanel.parserLabel.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 12);
    add(parserLabel, gridBagConstraints);

    parserComboBox.setMinimumSize(new java.awt.Dimension(100, 22));
    parserComboBox.setPreferredSize(new java.awt.Dimension(100, 22));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(parserComboBox, gridBagConstraints);

    loglevelLabel.setText(org.openide.util.NbBundle.getMessage(XSDImportPropertiesPanel.class, "XSDImportPropertiesPanel.loglevelLabel.text")); // NOI18N
    loglevelLabel.setToolTipText(org.openide.util.NbBundle.getMessage(XSDImportPropertiesPanel.class, "XSDImportPropertiesPanel.loglevelLabel.toolTipText")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 12);
    add(loglevelLabel, gridBagConstraints);

    logLevelCombo.setMaximumRowCount(12);
    logLevelCombo.setModel(LogLevels.getDefaultModel());
    logLevelCombo.setMinimumSize(new java.awt.Dimension(100, 22));
    logLevelCombo.setPreferredSize(new java.awt.Dimension(100, 22));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(logLevelCombo, gridBagConstraints);

    stopLabel.setText(org.openide.util.NbBundle.getMessage(XSDImportPropertiesPanel.class, "XSDImportPropertiesPanel.stopLabel.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 12);
    add(stopLabel, gridBagConstraints);

    stopOnError.setSelected(true);
    stopOnError.setText(org.openide.util.NbBundle.getMessage(XSDImportPropertiesPanel.class, "XSDImportPropertiesPanel.stopOnError.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(stopOnError, gridBagConstraints);

    verboseLabel.setText(org.openide.util.NbBundle.getMessage(XSDImportPropertiesPanel.class, "XSDImportPropertiesPanel.verboseLabel.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 12);
    add(verboseLabel, gridBagConstraints);

    verbose.setText(org.openide.util.NbBundle.getMessage(XSDImportPropertiesPanel.class, "XSDImportPropertiesPanel.verbose.text")); // NOI18N
    verbose.setToolTipText(org.openide.util.NbBundle.getMessage(XSDImportPropertiesPanel.class, "XSDImportPropertiesPanel.verbose.toolTipText")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(verbose, gridBagConstraints);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 499, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 234, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 1.0;
    add(jPanel1, gridBagConstraints);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 155, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 102, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridheight = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    add(jPanel2, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  @Override
  public void store() {
    properties.setProperty(PARSER,
            (String) parserComboBox.getSelectedItem());
    properties.setProperty(LOG_LEVEL,
            (String) logLevelCombo.getSelectedItem());
    properties.setProperty(STOP_ON_ERROR,
            Boolean.toString(stopOnError.isSelected()));
    properties.setProperty(VERBOSE_INFO,
            Boolean.toString(verbose.isSelected()));
  }

  @Override
  public void load() {
    final List<String> names = ModuleSelectionHelper.lookupNames(XSDParser.class);
    parserComboBox.setModel(new DefaultComboBoxModel(names.toArray()));

    if (names.contains("SAX Parser")) {
      parserComboBox.setSelectedItem(properties.getProperty(PARSER, "SAX Parser"));
    } else {
      parserComboBox.setSelectedItem(properties.getProperty(PARSER, DEFAULT_MENU_TEXT));
    }

    logLevelCombo.setSelectedItem(properties.getProperty(LOG_LEVEL, LogLevels.getRootLogLevel()));

    stopOnError.setSelected(
            Boolean.parseBoolean(properties.getProperty(STOP_ON_ERROR, "true")));
    verbose.setSelected(
            Boolean.parseBoolean(properties.getProperty(VERBOSE_INFO, "false")));
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JComboBox logLevelCombo;
  private javax.swing.JLabel loglevelLabel;
  private javax.swing.JComboBox parserComboBox;
  private javax.swing.JLabel parserLabel;
  private javax.swing.JLabel stopLabel;
  private javax.swing.JCheckBox stopOnError;
  private javax.swing.JCheckBox verbose;
  private javax.swing.JLabel verboseLabel;
  // End of variables declaration//GEN-END:variables

}
