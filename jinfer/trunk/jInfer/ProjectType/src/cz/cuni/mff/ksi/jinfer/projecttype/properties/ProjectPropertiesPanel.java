/*
 *  Copyright (C) 2010 sviro
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cz.cuni.mff.ksi.jinfer.projecttype.properties;

import cz.cuni.mff.ksi.jinfer.base.objects.AbstractPropertiesPanel;
import cz.cuni.mff.ksi.jinfer.base.objects.FolderType;
import cz.cuni.mff.ksi.jinfer.base.utils.LogLevels;
import java.util.Properties;
import javax.swing.DefaultComboBoxModel;
import org.apache.log4j.lf5.LogLevel;

/**
 * Properties panel of miscellaneous project properties.
 * 
 * @author sviro
 */
@SuppressWarnings("PMD.SingularField")
public class ProjectPropertiesPanel extends AbstractPropertiesPanel {

  private static final long serialVersionUID = 35345345345l;

  /**
   * Name of the property for folder type.
   */
  public static final String FOLDER_TYPE = "folderType";
  /**
   * Default value of the folder type property.
   */
  public static final String FOLDER_TYPE_DEFAULT = FolderType.DOCUMENT.getName();
  /**
   * Name of Log level property for project.
   */
  public static final String LOG_LEVEL = "logLevel";



  /**
   * Creates Miscellaneous properties panel for jInfer Project.
   * @param properties Properties used to store and load data to panel.
   */
  public ProjectPropertiesPanel(final Properties properties) {
    super(properties);
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings({"PMD", "unchecked"})
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    defaultFolder = new javax.swing.JComboBox();
    logLevel = new javax.swing.JComboBox();
    loglevelLabel2 = new javax.swing.JLabel();
    defaultFolderLabel2 = new javax.swing.JLabel();
    defaultFolderLabel1 = new javax.swing.JLabel();
    logLevelLabel1 = new javax.swing.JLabel();
    fill1 = new javax.swing.JPanel();
    fill2 = new javax.swing.JPanel();

    setPreferredSize(new java.awt.Dimension(330, 59));
    setLayout(new java.awt.GridBagLayout());

    defaultFolder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    defaultFolder.setMinimumSize(new java.awt.Dimension(90, 20));
    defaultFolder.setPreferredSize(new java.awt.Dimension(90, 22));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(defaultFolder, gridBagConstraints);

    logLevel.setMaximumRowCount(12);
    logLevel.setModel(LogLevels.getDefaultModel());
    logLevel.setMinimumSize(new java.awt.Dimension(100, 22));
    logLevel.setPreferredSize(new java.awt.Dimension(100, 22));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    add(logLevel, gridBagConstraints);

    loglevelLabel2.setFont(loglevelLabel2.getFont().deriveFont((loglevelLabel2.getFont().getStyle() | java.awt.Font.ITALIC), 10));
    loglevelLabel2.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesPanel.class, "ProjectPropertiesPanel.loglevelLabel2.text")); // NOI18N
    loglevelLabel2.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectPropertiesPanel.class, "ProjectPropertiesPanel.loglevelLabel2.toolTipText")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 2);
    add(loglevelLabel2, gridBagConstraints);

    defaultFolderLabel2.setFont(defaultFolderLabel2.getFont().deriveFont((defaultFolderLabel2.getFont().getStyle() | java.awt.Font.ITALIC), 10));
    defaultFolderLabel2.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesPanel.class, "ProjectPropertiesPanel.defaultFolderLabel2.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 2);
    add(defaultFolderLabel2, gridBagConstraints);

    defaultFolderLabel1.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesPanel.class, "ProjectPropertiesPanel.defaultFolderLabel1.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 12);
    add(defaultFolderLabel1, gridBagConstraints);

    logLevelLabel1.setText(org.openide.util.NbBundle.getMessage(ProjectPropertiesPanel.class, "ProjectPropertiesPanel.logLevelLabel1.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(2, 12, 2, 12);
    add(logLevelLabel1, gridBagConstraints);

    javax.swing.GroupLayout fill1Layout = new javax.swing.GroupLayout(fill1);
    fill1.setLayout(fill1Layout);
    fill1Layout.setHorizontalGroup(
      fill1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 544, Short.MAX_VALUE)
    );
    fill1Layout.setVerticalGroup(
      fill1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 138, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 1.0;
    add(fill1, gridBagConstraints);

    javax.swing.GroupLayout fill2Layout = new javax.swing.GroupLayout(fill2);
    fill2.setLayout(fill2Layout);
    fill2Layout.setHorizontalGroup(
      fill2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 39, Short.MAX_VALUE)
    );
    fill2Layout.setVerticalGroup(
      fill2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 50, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    add(fill2, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  @Override
  public void store() {
    properties.setProperty(FOLDER_TYPE, ((FolderType) defaultFolder.getSelectedItem()).getName());
    properties.setProperty(LOG_LEVEL, (String) logLevel.getSelectedItem());
  }

  @Override
  public void load() {
    defaultFolder.setModel(new DefaultComboBoxModel(FolderType.values()));
    defaultFolder.setSelectedItem(properties.getProperty(FOLDER_TYPE, FOLDER_TYPE_DEFAULT));
    logLevel.setSelectedItem(properties.getProperty(LOG_LEVEL, LogLevel.WARN.toString()));
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox defaultFolder;
  private javax.swing.JLabel defaultFolderLabel1;
  private javax.swing.JLabel defaultFolderLabel2;
  private javax.swing.JPanel fill1;
  private javax.swing.JPanel fill2;
  private javax.swing.JComboBox logLevel;
  private javax.swing.JLabel logLevelLabel1;
  private javax.swing.JLabel loglevelLabel2;
  // End of variables declaration//GEN-END:variables
}
